{
    "openapi": "3.0.1",
    "info": {
      "title": "Api gateway",
      "description": "Api gateway",
      "version": "d5906dc_716"
    },
    "servers": [
      {
        "url": "https://evgo-preprod.driivz.com/api-gateway",
        "description": "Generated server url"
      }
    ],
    "tags": [
      {
        "name": "Account Invoices"
      },
      {
        "name": "Customer Accounts"
      },
      {
        "name": "Charger Host Invoices"
      },
      {
        "name": "Country Currencies"
      },
      {
        "name": "Charger Connectors"
      },
      {
        "name": "Charger Hosts"
      },
      {
        "name": "Reservations"
      },
      {
        "name": "Charger Groups"
      },
      {
        "name": "Charger Models"
      },
      {
        "name": "Authentication"
      },
      {
        "name": "Charger Model Protocol"
      },
      {
        "name": "Charger Group Remote Operations"
      },
      {
        "name": "Energy Policies"
      },
      {
        "name": "Operators"
      },
      {
        "name": "Account Charger Operations"
      },
      {
        "name": "Utility Tariffs"
      },
      {
        "name": "Customer Tariffs"
      },
      {
        "name": "Customer Plan Displays"
      },
      {
        "name": "Resources"
      },
      {
        "name": "Properties"
      },
      {
        "name": "Charger Host Statements"
      },
      {
        "name": "Account Billing Transactions"
      },
      {
        "name": "Chargers"
      },
      {
        "name": "Account Payment Methods"
      },
      {
        "name": "Customer Plan Products"
      },
      {
        "name": "Charger Host Transactions"
      },
      {
        "name": "Sites"
      },
      {
        "name": "Vehicles"
      },
      {
        "name": "Account Ad-hoc Contracts"
      },
      {
        "name": "Account Reservations"
      },
      {
        "name": "Account Cards"
      },
      {
        "name": "Cards"
      },
      {
        "name": "Customer Plans"
      },
      {
        "name": "Billing Transactions"
      },
      {
        "name": "Configurations"
      },
      {
        "name": "Contact People"
      },
      {
        "name": "EV Transactions"
      },
      {
        "name": "Account Charging Capabilities"
      },
      {
        "name": "Charger Remote Operations"
      },
      {
        "name": "Guest Driver Details"
      },
      {
        "name": "Customer Member Accounts"
      },
      {
        "name": "Grid Management"
      },
      {
        "name": "Account Contracts"
      },
      {
        "name": "Charger Model Connectors"
      },
      {
        "name": "Companies"
      },
      {
        "name": "User Notification Preferences"
      },
      {
        "name": "Customer Plan Tariffs"
      }
    ],
    "paths": {
      "/v1/customer-plans/{planCode}/tariffs/charger-groups/{chargerGroupId}": {
        "get": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Get a customer plan tariffs by plan code and charger group id",
          "description": "Get a customer plan tariffs by plan code and charger group id",
          "operationId": "getBillingPlanGroupTariffsByCode",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "chargerGroupId",
              "in": "path",
              "description": "Charger group id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 12
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "CuJLUO5Kcq",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "M85bOBGjyy",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lDIgwxHThN",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "rUJNA4Kkk3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanTariffsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "put": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Update all a customer plan tariffs of a plan code",
          "description": "Update all a customer plan tariffs of a plan code",
          "operationId": "updatePlanGroupTariffsByCode",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "chargerGroupId",
              "in": "path",
              "description": "groupId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 12
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanTariffsUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZzcAeNLOrx",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9xLcwVun19",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "4lQdYS2IfA",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "NamOGtWh7E",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PutPlanTariffsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/tariffs/charger-groups/all": {
        "get": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Get a customer plan tariffs by plan code that related to all chargers",
          "description": "Get a customer plan tariffs by plan code that related to all chargers",
          "operationId": "getBillingPlanTariffsForAllGroupsByCode",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IO3W2nr9pf",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ydsBFOeuVv",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "jAwIcIq421",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "7481Gm9xmI",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanTariffsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "put": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Update all a customer plan tariffs of a plan code",
          "description": "Update all a customer plan tariffs of a plan code",
          "operationId": "updatePlanGroupTariffsByCode_1",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanTariffsUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "orJKuAmJJS",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Xj9odSyBuk",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "kILyEFBmN0",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "cQYic18q1j",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PutPlanTariffsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/vehicles/filter": {
        "post": {
          "tags": [
            "Vehicles"
          ],
          "summary": "Find vehicles by filter",
          "description": "Get details of all vehicles by filter",
          "operationId": "getVehiclesByFilter",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VehicleFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "s1FWGQxzwh",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uKjgYvSrbI",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "xAP5YG60cy",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "4fIVqnyzD6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/VehicleResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/utility-tariffs/filter": {
        "post": {
          "tags": [
            "Utility Tariffs"
          ],
          "summary": "Find utility tariffs by filter",
          "description": "Find utility tariffs by filter",
          "operationId": "filter",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UtilityTariffFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kf1L0ajHBo",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AajxkPPVJe",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "SNg4Q9m5A1",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "hHwlWdsvKb",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/UtilityTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites": {
        "post": {
          "tags": [
            "Sites"
          ],
          "summary": "Create a site",
          "description": "Create a site",
          "operationId": "addSite",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uwpaaaMuVY",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "CDW7JgFf0d",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "PQufWdhnNs",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "86uNudxRvT",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SiteResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/{siteId}/energy-planning/calculate": {
        "post": {
          "tags": [
            "Grid Management"
          ],
          "summary": "Calculate energy planning",
          "description": "Calculate energy planning",
          "operationId": "calcEnergyPlanning",
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "description": "Site ID",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 123
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnergyPlanningCalculationResult"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "sKdKIH4qsU",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "4YwWDo5Ffa",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "QzjPYPFRos",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Vj6BwhhBM5",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EnergyPlanningResultResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/{id}/schedules/import": {
        "post": {
          "tags": [
            "Sites"
          ],
          "summary": "Add vehicles schedule to a given site by a CSV file ",
          "description": "Add vehicles schedule to a given site by a CSV file",
          "operationId": "loadVehiclesSchedule",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "siteId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1235
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "description": "File to upload",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9mfZxJHTFT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XGzBnTdN0E",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "q07lvSzlg8",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "LcBNV0yoDT",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/{id}/resources/{fileName}": {
        "get": {
          "tags": [
            "Sites"
          ],
          "summary": "Find a site resource",
          "description": "Find a site resource",
          "operationId": "findSiteResource",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "fileName",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "TN9Hiaz9iv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7xoVomIL3X",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lJSF2n6LKf",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "YDQnMOza5Z",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceContentResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "post": {
          "tags": [
            "Sites"
          ],
          "summary": "Connect a resource to a site",
          "description": "Connect a resource to a site",
          "operationId": "connectResourceToSite",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "fileName",
              "in": "path",
              "description": "File name",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "e37e70ae-86ff-41b7-b47c-64eddde408bc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteResourceCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "nhk1mooljY",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "p5RsebTyz5",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "CU4rPb3VSc",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "lTDDHjLSXs",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SiteResourceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Sites"
          ],
          "summary": "Delete site's resource",
          "description": "Delete site's resource by id and file name",
          "operationId": "deleteSiteResource",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "fileName",
              "in": "path",
              "description": "File name",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "e37e70ae-86ff-41b7-b47c-64eddde408bc"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "skhmUFO6lz",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ep5e4uGQRi",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Q8gqkO7jv4",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "hayM1wP57b",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Sites"
          ],
          "summary": "Update s site resource",
          "description": "Update s site resource",
          "operationId": "updateSiteResource",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "fileName",
              "in": "path",
              "description": "File name",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "e37e70ae-86ff-41b7-b47c-64eddde408bc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteResourcePatch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "y8lnnBsQi7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6Wt2ggyrIP",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "eCPcSgsNKa",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "j5c2HPpbtF",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/filter": {
        "post": {
          "tags": [
            "Sites"
          ],
          "summary": "Find sites",
          "description": "Find sites by filter",
          "operationId": "filterSites",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KmH5TEQYwK",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8h6b5LAASE",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "U9UpfvcD8j",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "IpWzPOp7Re",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SiteResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/resources": {
        "post": {
          "tags": [
            "Resources"
          ],
          "summary": "Upload files",
          "description": "Upload files",
          "operationId": "uploadFiles",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "files"
                  ],
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "description": "Files to upload",
                      "items": {
                        "type": "string",
                        "format": "binary"
                      }
                    },
                    "chargerHostId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Dp6KArtzll",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "H7wCDDeY2f",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "gmRTDWW3ls",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "T0saEM6PcE",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ResourceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/reservations/filter": {
        "post": {
          "tags": [
            "Reservations"
          ],
          "summary": "Find reservations",
          "description": "Finds reservations based on a given filter",
          "operationId": "filterReservations",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "iLx8hlEEGv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7gDu3FtYv5",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "tEgtXDTVtV",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "g6YHB2TLzi",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/properties": {
        "post": {
          "tags": [
            "Properties"
          ],
          "summary": "Create a property",
          "description": "Create a property",
          "operationId": "addProperty",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "BSi3skQmiW",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Llu4pbl2nU",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "stMi307Xqr",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "4NSV4uWuJ3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PropertyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/properties/filter": {
        "post": {
          "tags": [
            "Properties"
          ],
          "summary": "Find properties",
          "description": "Finds properties based on a given filter",
          "operationId": "filterProperties",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "y8BeUMrlEI",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "TzQRXtF1aV",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "2mW2PWxURV",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "1xrkPPj90G",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PropertyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/operators": {
        "post": {
          "tags": [
            "Operators"
          ],
          "summary": "Add a new operator user",
          "description": "Add a new operator user",
          "operationId": "addOperator",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "BR0hX6SzZr",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uxLbs0ubjH",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "chBtJWLykU",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "He6WWyM7SE",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedOperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/operators/filter": {
        "post": {
          "tags": [
            "Operators"
          ],
          "summary": "Find operator users",
          "description": "Finds operator users based on a given filter",
          "operationId": "filterOperators",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XC4rVw26dJ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "t8qUQzzX9X",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "0x5ZhfE9MZ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Im37h5zX3e",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/guest-driver-details/filter": {
        "post": {
          "tags": [
            "Guest Driver Details"
          ],
          "summary": "Find driver details of one-time payment billing transactions",
          "description": "Find driver details of one-time payment billing transactions",
          "operationId": "getGuestDriverDetails",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuestDriverDetailsFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "VZITHKGj6J",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9lkvQCPnBS",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "AgnBNzlGF0",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "SBk9TESPG0",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/GuestDriverDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/ev-transactions/filter": {
        "post": {
          "tags": [
            "EV Transactions"
          ],
          "summary": "Find EV transactions by filter",
          "description": "Get details of EV transactions based on a given filter",
          "operationId": "filterEvTransactions",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvTransactionFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XdTo65i7MC",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ktftgJ3p5A",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "kfPC0zHOhX",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ttJhZ2P7h7",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EvTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/energy-policies": {
        "post": {
          "tags": [
            "Energy Policies"
          ],
          "summary": "Create energy policy",
          "description": "Create energy policy",
          "operationId": "addPolicy",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "V3rUSaVtYW",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "x59JYvj9oK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "pRY8G0Ir0H",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "oEx59mKf8Q",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/energy-policies/filter": {
        "post": {
          "tags": [
            "Energy Policies"
          ],
          "summary": "Find policies",
          "description": "Find energy policies based on a given filter",
          "operationId": "filterPolicies",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Z0eXPZ7Ico",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6Jupq2MEOU",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "dXAFyeUVaF",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Qx1wD0dM5x",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs": {
        "post": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Create new customer tariff",
          "description": "Create customer tariff",
          "operationId": "addCustomerTariff",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTariffCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "pMCmNJMADz",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "feRonAnNAL",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "brHq48b1D5",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "LkrLmuhgk1",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/{id}/reservations/now/terms": {
        "post": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Create customer reservation tariff term",
          "description": "Create customer reservation tariff term",
          "operationId": "createCustomerReservationTariffTerm",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveNowTermCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bPZw5JxaUD",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "vjkaBP550u",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lu5n0dfK4y",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "6IBBMq2cRu",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerReservationTariffNowResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/filter": {
        "post": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Find customers tariffs by filter",
          "description": "Find customers tariffs by filter",
          "operationId": "filter_1",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTariffFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PwNQ8vTc8P",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "f4bk3nHWiY",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Q7TKPAQY6l",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "itGWEI9ygk",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans": {
        "post": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Create customer plan",
          "description": "Create customer plan",
          "operationId": "createPlan",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Pury2lEBdT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "3gcnhvCHMk",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "IMkfSciIeL",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "vQc6k4zxIA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/products": {
        "get": {
          "tags": [
            "Customer Plan Products"
          ],
          "summary": "Get a customer plan products by plan code",
          "description": "Get a plan products by plan code",
          "operationId": "getBillingPlanProducts",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZgSlKAj5T7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "u4LsHobTwq",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "rW2jtzq1yu",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ex4flk3iVp",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProductsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "post": {
          "tags": [
            "Customer Plan Products"
          ],
          "summary": "Add product to customer plan",
          "description": "Add product to customer plan",
          "operationId": "addPlanProduct",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanProductCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "WQnvFh5E8N",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "YMLBtofarC",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "MzQ9S4mLXp",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "sdRRCyzTUa",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProductsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/profiles/filter": {
        "post": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Find customer plan profile details by filter",
          "operationId": "filterPlanProfile",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanProfileFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "dlW3t38AWJ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aLOIqTCQx4",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "RC7YxGb3hn",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "rPTRvA7hSU",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts": {
        "post": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Create a new customer",
          "description": "Create a new customer",
          "operationId": "addCustomer",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1riQzUt5Ry",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "xB6eYwtHLa",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "jOgJNDwZT5",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "15QPpKvdTJ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{payingAccountNumber}/members": {
        "post": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Create a new member",
          "description": "Create a new member",
          "operationId": "addMember",
          "parameters": [
            {
              "name": "payingAccountNumber",
              "in": "path",
              "description": "Paying Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rHJemKYJfy",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9n9fmMHZ8u",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "hwHhAnqwEr",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "oc0VGbS6fV",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/members/filter": {
        "post": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Find members by filter",
          "description": "Get details of members based on a given filter",
          "operationId": "filterMembers",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "caeKvmz7e7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qVsQoyQF1V",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ClzS4XLWOm",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "J1Uy2cL2sU",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/filter": {
        "post": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Find by account customer",
          "description": "Get details of a customer by filter",
          "operationId": "filterCustomerAccounts",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "tjDb9XqQeU",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Gq6BjG6cAE",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "kdhCk0ayaM",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "rjYq8Cljbz",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/country-currencies/filter": {
        "post": {
          "tags": [
            "Country Currencies"
          ],
          "summary": "Find country currencies by filter",
          "description": "Find country currencies by filter",
          "operationId": "filter_2",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryCurrencyFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "nv7WMjmLLW",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "u9jcPwsXDU",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "zjcR4e1561",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "YKeMrnTMMo",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CountryCurrencyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/contact-people": {
        "post": {
          "tags": [
            "Contact People"
          ],
          "summary": "Create a new contact person",
          "description": "Create a new contact person",
          "operationId": "createPerson",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPersonCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "50mfnVWzUN",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "YCE0VKmC4Y",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "VfGcedD23u",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "8GCuGw7fZR",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContactPersonResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/contact-people/filter": {
        "post": {
          "tags": [
            "Contact People"
          ],
          "summary": "Find contact people by filter",
          "description": "Get details of contact people based on a given filter",
          "operationId": "filterContactPeople",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPersonFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5GSbVYfi6F",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "B7AFwD7kSa",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "zpgbcwjNQk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "gXktOPh9Yp",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ContactPersonResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/configurations/filter": {
        "post": {
          "tags": [
            "Configurations"
          ],
          "summary": "Find configurations by filter",
          "description": "Find configurations by filter",
          "operationId": "filter_3",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "txDdita9tk",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "VO3SgQ0zUG",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ppIuetH6v2",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Us9ORsqxDg",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfigurationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/companies/filter": {
        "post": {
          "tags": [
            "Companies"
          ],
          "summary": "Find companies by filter",
          "description": "Find companies by filter",
          "operationId": "filter_4",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qbBa8LmJsa",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kKyIcfleSb",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "fy75ardmuz",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "qw5ppKXB6x",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CompanyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Create a Charger",
          "description": "Create a Charger",
          "operationId": "addCharger",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8W7gBUZNIB",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aiUiCLVgU2",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "teV2Ddl18M",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "qvrt5MuSnX",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{identityKey}/remote-operations/raw": {
        "post": {
          "tags": [
            "Charger Remote Operations"
          ],
          "summary": "Send raw remote operation",
          "description": "Send remote operation to charger. Make sure each request is sent with a <b>different GUID</b>\n\n<b>OCPP 1.6 Example:</b>\n\n<code>[\n&ensp;&ensp;2,\n&ensp;&ensp;\"8cc0c606-2c6b-4447-96bd-82c6cf01393c\",\n&ensp;&ensp;\"RemoteStartTransaction\", {\n&ensp;&ensp;&ensp;&ensp;\"idTag\": \"EE06547CE41FB7\",\n&ensp;&ensp;&ensp;&ensp;\"connectorId\": 2\n&ensp;&ensp;&ensp;&ensp;}\n]</code>\n\n<b>OCPP 1.5 SOAP Example:</b>\n\n<code><soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ns=\"urn://Ocpp/Cp/2012/06/\">\n&ensp;&ensp;<soap:Header>\n&ensp;&ensp;&ensp;&ensp;<ns:chargeBoxIdentity>SCAL0001</ns:chargeBoxIdentity>\n&ensp;&ensp;</soap:Header>\n&ensp;&ensp;<soap:Body>\n&ensp;&ensp;&ensp;&ensp;<ns:clearCacheRequest/>\n&ensp;&ensp;</soap:Body>\n</soap:Envelope></code>",
          "operationId": "sendRawMessage",
          "parameters": [
            {
              "name": "identityKey",
              "in": "path",
              "description": "Identity Key",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "test"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Send raw operation message"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string",
                  "description": "Send raw operation message"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OlLN71ekCZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "CiT4L2selC",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mz6lzgSO3q",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Vh7DeW5fx3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/RawOperationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{identityKey}/remote-operations/charging-profile": {
        "post": {
          "tags": [
            "Charger Remote Operations"
          ],
          "summary": "Send charging profile remote operation",
          "description": "Send charging profile remote operation to charger.\n\n<b>OCPP 1.6 Example:</b>\n\n<code>{\n&ensp;&ensp;\"connectorId\": 2,\n&ensp;&ensp;\"csChargingProfiles\": {\n&ensp;&ensp;&ensp;&ensp;\"chargingProfileId\": 520,\n&ensp;&ensp;&ensp;&ensp;\"transactionId\": 122202,\n&ensp;&ensp;&ensp;&ensp;\"stackLevel\": 0,\n&ensp;&ensp;&ensp;&ensp;\"chargingProfilePurpose\": \"TxProfile\",\n&ensp;&ensp;&ensp;&ensp;\"chargingProfileKind\": \"Absolute\",\n&ensp;&ensp;&ensp;&ensp;\"chargingSchedule\": {\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;\"startSchedule\": \"2021-05-18T12:44:09Z\",\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;\"chargingRateUnit\": \"A\",\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;\"chargingSchedulePeriod\": [\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;{\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;\"startPeriod\": 0,\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;\"limit\": 1,\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;\"numberPhases\": 3\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;}\n&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;]\n&ensp;&ensp;&ensp;&ensp;}\n&ensp;&ensp;}\n}</code>",
          "operationId": "sendChargingProfileMessage",
          "parameters": [
            {
              "name": "identityKey",
              "in": "path",
              "description": "Identity Key",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "test"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Send charging profile operation message"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "wX4uidReYa",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "lrYc0OPOPb",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "gRbCMIeZtK",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "RmCbjWLXzQ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/RawOperationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/statuses/filter": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger status details by filter",
          "description": "Find charger status details by filter",
          "operationId": "filterChargerStatus",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerStatusFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1bpGLsuMlG",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7crGJaMomM",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "CBPI7f0fLP",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ZkzG7eCPlE",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerStatusResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/profiles/filter": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger profile details by filter",
          "operationId": "filterChargerProfile",
          "parameters": [
            {
              "name": "requestedFields",
              "in": "query",
              "description": "Requested Fields",
              "required": false,
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerProfileFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5uH2xT9bpw",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "CYLdolH1eO",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "HSTbeZnlHM",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Fc8ZI8lK9R",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/networks/filter": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger network details by filter",
          "description": "Find charger network details by filter",
          "operationId": "filterChargerNetwork",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerNetworkFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "sbc9ODRmyT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "jopfJwynKA",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "RNbqSSHpf4",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "QBUcnshoYM",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerNetworkResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/maintenance/filter": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger maintenance details by filter",
          "description": "Find charger maintenance details by filter",
          "operationId": "filterChargerMaintenance",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerMaintenanceFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZvKndvvm09",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rqCeNs0nOD",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Nq3uYyh2ZF",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "bVEbZZqUUf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerMaintenanceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/locations/filter": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger locations details by filter",
          "description": "Find charger locations details by filter",
          "operationId": "filterChargerLocation",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerLocationFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "GoUyysqyqa",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cXaRftnuTT",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "BloACR0Sva",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "wvmx21MeLt",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerLocationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/groups/{groupId}/remote-operations/raw": {
        "post": {
          "tags": [
            "Charger Group Remote Operations"
          ],
          "summary": "Send raw remote operation",
          "description": "Send remote operation to charger group. Make sure each request is sent with a <b>different GUID</b>\n\n<b>OCPP 1.6 Example:</b>\n\n<code>[\n&ensp;&ensp;2,\n&ensp;&ensp;\"8cc0c606-2c6b-4447-96bd-82c6cf01393c\",\n&ensp;&ensp;\"GetCompositeSchedule\", {\n&ensp;&ensp;&ensp;&ensp;\"connectorId\": 0\n&ensp;&ensp;&ensp;&ensp;\"duration\": 3600\n&ensp;&ensp;&ensp;&ensp;\"chargingRateUnit\": \"A\",\n&ensp;&ensp;&ensp;&ensp;}\n]</code>\n\n",
          "operationId": "sendRawMessage_1",
          "parameters": [
            {
              "name": "groupId",
              "in": "path",
              "description": "Group Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 14208
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Send raw operation message"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6NsjwUoGOr",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ydN5AOazst",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "XEFvczr5eQ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "7kSIWc864M",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/electrical/filter": {
        "post": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger electrical details by filter",
          "description": "Find charger electrical details by filter",
          "operationId": "filterChargerElectrical",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerElectricalFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KqpchA4bPZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IXOayAzxpZ",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "XfBqDPfstt",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "d47wQmHaZz",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerElectricalResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models": {
        "post": {
          "tags": [
            "Charger Models"
          ],
          "summary": "Create a charger model",
          "description": "Create a charger model",
          "operationId": "createChargerModel",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "m9lDnmJqsj",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1SkPzOEhn6",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "PykmH2DbEv",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "pu1ZJFPOZR",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models/{id}/protocols": {
        "post": {
          "tags": [
            "Charger Model Protocol"
          ],
          "summary": "Create a charger model protocol",
          "description": "Create a charger model protocol",
          "operationId": "createModelProtocol",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelProtocolCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8tVagqS16X",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "iPxKa8jXBM",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "jbR3IHV9Z9",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "2JE0P7N1o6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelProtocolResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models/{id}/connectors": {
        "post": {
          "tags": [
            "Charger Model Connectors"
          ],
          "summary": "Create a charger model connector",
          "description": "Create a charger model connector",
          "operationId": "createChargerModelConnector",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelConnectorCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "loEWH6NW9I",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AJ83XkIWl6",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "sXNibychGh",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "foNtSSRyla",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelConnectorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models/filter": {
        "post": {
          "tags": [
            "Charger Models"
          ],
          "summary": "Find charger models by filter",
          "description": "Find charger models by filter",
          "operationId": "filterChargerModel",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "QvRz8toFl9",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "igGU1bTdjq",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "FZzGt4LrkP",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "0M5W4T1vO6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts": {
        "post": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Create a charger host",
          "description": "Create a charger host",
          "operationId": "createChargerHost",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "FliqDRiKus",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "V2FyCftNM2",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "rUnccJ6x6e",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "p5iqQzUBzy",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/statements/filter": {
        "post": {
          "tags": [
            "Charger Host Statements"
          ],
          "summary": "Find statements",
          "description": "Finds statements based on a given filter",
          "operationId": "filterStatements",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IKzbL93lhO",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KlD0Jw3u7D",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "dYkQWSSeIU",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "nEGcaOenmG",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/StatementResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/invoices/filter": {
        "post": {
          "tags": [
            "Charger Host Invoices"
          ],
          "summary": "Find statements",
          "description": "Finds statements based on a given filter",
          "operationId": "filterInvoices",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 932343
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "WuiBS3k8Pu",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZLoTobRbN7",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "wHyQpsG3CW",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "S0A4nIh8Ie",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/InvoiceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/invoices/current/pdf": {
        "post": {
          "tags": [
            "Charger Host Invoices"
          ],
          "summary": "Get current statement as pdf",
          "description": "Get invoice as pdf",
          "operationId": "getCurrentStatementAsPdf",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 932343
            },
            {
              "name": "Accept-Language",
              "in": "header",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentStatement"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "EoA9lqVDdO",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ebUCSqJQXr",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "NqIOkDR6jK",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "cfRqVlSDbu",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "application/pdf": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/billing-transactions/filter": {
        "post": {
          "tags": [
            "Charger Host Transactions"
          ],
          "summary": "Find transactions by filter",
          "description": "Finds transactions based on a given filter",
          "operationId": "filterTransactions",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostTransactionFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "jGVcZL1b6t",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "yVH2m3D6hC",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "YieVB8Ycob",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "nHbTeZY6o2",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/filter": {
        "post": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find charger hosts",
          "description": "Finds charger hosts based on a given filter",
          "operationId": "filterChargerHosts",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "iJ2qJQoCtv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "nUM5BSAkF6",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "eGUhQTiEn0",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "n4sYi2qpTZ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}": {
        "get": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Find charger group by id",
          "description": "Get details of a given charger group",
          "operationId": "getChargerGroupById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9HZg6xMgl6",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "pgzHRUwAjp",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "1r91alNoQk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "DLmm0hbwKH",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "post": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Create new charger group",
          "description": "Create new charger group under a given group id",
          "operationId": "addChargerGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerGroupCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JGmdwIxbDW",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "xmAAWdUJi0",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "8QwPAECJnJ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "oxr9JNdxyr",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Delete charger group by id",
          "description": "Delete a charger group by id",
          "operationId": "deleteChargerGroupById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "90AsimdQhm",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OdgjYcSUTm",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "vDyggqMUuz",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "8gpKLR7pXu",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Update charger group",
          "description": "Update single charger group",
          "operationId": "updateChargerGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerGroupUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "2owxafuvEv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZZISlfI5wu",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "c36FMZsj6w",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "i906lgSxM9",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/folder": {
        "post": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Create new folder",
          "description": "Create new folder under a given group id",
          "operationId": "addChargerGroupFolder",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "DCmlPQRK3X",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "G1Lz9JXOmD",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "rP6PQVmPCi",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "7IxAAQLm3o",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/{id}/reassign": {
        "post": {
          "tags": [
            "Cards"
          ],
          "summary": "Reassign card by id",
          "description": "Reassign card by id",
          "operationId": "reassign",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReassignCard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PgSBVrHDGw",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XO4bCneGhR",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "PbH1TBQaCO",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "bETDtp3Gn4",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/{id}/activate": {
        "post": {
          "tags": [
            "Cards"
          ],
          "summary": "Activate card",
          "description": "Exiting card must be in one of the following statuses to be activated:\n\n* LOST\n* DESTROYED\n* INACTIVE\n* CANCELLED\n* SUSPENDED\n* STOLEN\n* NOT_ASSIGNED",
          "operationId": "activateCard",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivateCard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8Gre8CaYb9",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "F5JYrtWGne",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "bkJ1MhH7T7",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "c8gJNM3XW4",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/filter": {
        "post": {
          "tags": [
            "Cards"
          ],
          "summary": "Find cards",
          "description": "Finds cards based on a given filter",
          "operationId": "filterCards",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cinfqBNGgA",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6Dx4sTAG4l",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "qBIz3J1lCE",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "mmul0dt5sf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/batch/import": {
        "post": {
          "tags": [
            "Cards"
          ],
          "summary": "Import batch of cards",
          "description": "Import batch of cards",
          "operationId": "importBatch",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchCardImport"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HEOhqrGrjI",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Dxi0SXvD6e",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "LZp3muTuVg",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ogkIHZXFgh",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/billing-transactions/filter": {
        "post": {
          "tags": [
            "Billing Transactions"
          ],
          "summary": "Find billing transactions",
          "description": "Finds billing transactions based on a given filter",
          "operationId": "filterTransactions_1",
          "parameters": [
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "2GmNE9cgd3",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9avNhxK5qZ",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "iZL70uoDqR",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "3WiBEDZE4u",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/authentication/operator/login": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Operator login",
          "description": "Operator login",
          "operationId": "operatorLogin",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JCrwlywHaj",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "FFtTsroAS0",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "T980PoUWvo",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "OG8itjca0d",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorLoginResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/v1/authentication/operator/customer-login": {
        "post": {
          "tags": [
            "Authentication"
          ],
          "summary": "Operator login as customer",
          "description": "Operator login as customer",
          "operationId": "operatorLoginAsCustomer",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginAsCustomerRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "BOLziaFVq8",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5yl0CBVndA",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "sRLEhPzXoB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Po8oO8UHLd",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerLoginResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/statements/filter": {
        "post": {
          "tags": [
            "Account Invoices"
          ],
          "summary": "Find statements",
          "description": "Finds statements based on a given filter",
          "operationId": "filterStatements_1",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatementFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "hKKtMS7yxz",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "DqLIelrMF5",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "k9fxvTl90I",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "5tqhJIMfmJ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/StatementResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/reservations/terms/now": {
        "post": {
          "tags": [
            "Account Reservations"
          ],
          "summary": "Get reservation terms to reserve now",
          "description": "Get reservation terms to reserve now",
          "operationId": "getReservationTermsNow",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationTermsNow"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "oToaImrZLc",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "I6Oni56T6l",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "101bNyLxV1",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Ef4Lgi4wPc",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/TermsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/reservations/terms/byDate": {
        "post": {
          "tags": [
            "Account Reservations"
          ],
          "summary": "Get reservation terms by date",
          "description": "Get reservation terms by date",
          "operationId": "getReservationTermsByDate",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationTermsByDate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Q3eADm7jiJ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "lfVSuhGhUx",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "5CKq3yfcVU",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "UqHvc8WqmE",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/TermsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/reservations/now": {
        "post": {
          "tags": [
            "Account Reservations"
          ],
          "summary": "Reserve now",
          "description": "Reserve now",
          "operationId": "reserveNow",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationCreateNow"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "LmkAX2881g",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ij6flZ20vW",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "4W0zUceCLH",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "QkoHwDjCjd",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/reservations/chargers": {
        "post": {
          "tags": [
            "Account Reservations"
          ],
          "summary": "Find a charger",
          "description": "Get details of charger to reserve",
          "operationId": "getChargerForReservation",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerFind"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cmhaSWdo1V",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aP6gOSLn3Z",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "rPdby53ZRp",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "yN9JAg4L8W",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerReservationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/reservations/by-date": {
        "post": {
          "tags": [
            "Account Reservations"
          ],
          "summary": "Create a reservation by date",
          "description": "Create a reservation by date",
          "operationId": "createReservationByDate",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationCreateByDate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AXToL4PN3o",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "SHzlz08XVc",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "wutYzKYjAx",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "kNHS8UubtH",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/payment-methods/payment-cards": {
        "get": {
          "tags": [
            "Account Payment Methods"
          ],
          "summary": "Find card payment methods ",
          "description": "Get details of card payment methods by account number",
          "operationId": "getPaymentCard",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "97Y6paCCFf",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "i8MRMgM81T",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "TljqkUEMH5",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "KeqkeN9u0l",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "post": {
          "tags": [
            "Account Payment Methods"
          ],
          "summary": "Add card payment method",
          "description": "Add a new card payment method",
          "operationId": "addCardPaymentMethod",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePaymentCard"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PJfeLSqORh",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "SxYwqo56ha",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "TbyDtmPeQk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "B0HBvNc9eH",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/payment-methods/bank-account": {
        "get": {
          "tags": [
            "Account Payment Methods"
          ],
          "summary": "Find bank account payment methods ",
          "description": "Get details of bank account payment methods by account number",
          "operationId": "getBankAccountPayments",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "S5BYZypzwT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "yRCKQ0ftuc",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "tqN1vkdeYB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "dok1R2A0Mk",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "post": {
          "tags": [
            "Account Payment Methods"
          ],
          "summary": "Add bank account payment method",
          "description": "Add a new bank account payment method",
          "operationId": "addBankAccount",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBankAccount"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mfPrS8ulKf",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cpp4UCgOxK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "k7HXiLkp0a",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "8j1XuvfVce",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BankAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/invoices/filter": {
        "post": {
          "tags": [
            "Account Invoices"
          ],
          "summary": "Find invoices",
          "description": "Find invoices based on a given filter",
          "operationId": "filterInvoices_1",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "3683yKBSt6",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "WOLAiRmIhK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mu1TM8uXSk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "UjKkHb7tZE",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/InvoiceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/invoices/current/pdf": {
        "post": {
          "tags": [
            "Account Invoices"
          ],
          "summary": "Get current statement as pdf",
          "description": "Get invoice as pdf",
          "operationId": "getCurrentStatementAsPdf_1",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "Accept-Language",
              "in": "header",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentStatement"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "y2s22QV8ay",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "T5GFO83lLZ",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lEFKAcETei",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "6dyI2p0raH",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "application/pdf": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts": {
        "post": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Add a new contract",
          "description": "Add a new contract",
          "operationId": "addContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ja8cZNCptg",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kMT84u8yli",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "dmDWIz8Lxn",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Fh6Kj7iMoh",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/filter": {
        "post": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Find contracts",
          "description": "Finds contracts based on a given filter",
          "operationId": "filterContracts",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aMY7bgv3bg",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "F2GkNqayo3",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "RshA8OBsQS",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "dFiihTnbf4",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/ad-hoc": {
        "get": {
          "tags": [
            "Account Ad-hoc Contracts"
          ],
          "summary": "Find an ad hoc contract",
          "description": "Find an ad hoc contract for a given account",
          "operationId": "getAdHocContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "hxjvQeQKVN",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "lqcasarrta",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "MnCdavvnse",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "q2cimuqGQK",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CreditResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "post": {
          "tags": [
            "Account Ad-hoc Contracts"
          ],
          "summary": "Add a new ad hoc contract",
          "description": "Add a new ad hoc contract",
          "operationId": "addAdHocContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdHocContractCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7MfGRr60m3",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "una5kTnD7r",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "30hcXTfr4n",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "I2YymX0jj6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CreditResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/charging-ability/reservation/status": {
        "post": {
          "tags": [
            "Account Charging Capabilities"
          ],
          "summary": "Validate that a customer has all capabilities to reserve charger",
          "description": "Validate that a customer has all capabilities to reserve charger",
          "operationId": "validateChargingAbilityReservation",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingAbilityReservationRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rCc76qPgPL",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ev6UsdW5fd",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "PIvPPjRb2l",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "7xCX73ZRoL",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/charging-ability/charging/status": {
        "post": {
          "tags": [
            "Account Charging Capabilities"
          ],
          "summary": "Validate that a customer has all capabilities to charge",
          "description": "Validate that a customer has all capabilities to charge",
          "operationId": "validateChargingStartStatus",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargingAbilityChargeRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "52zY939h2w",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "RuyE4yFb5G",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ddzTyRuxN1",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "OOoWckh5No",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/charger-operations/chargers/{chargerIdentityKey}/connectors/{connectorIdentityKey}/auto-charge/enroll": {
        "post": {
          "tags": [
            "Account Charger Operations"
          ],
          "summary": "Auto charge enrollment ",
          "description": "Auto charge enrollment",
          "operationId": "autoCharge",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "chargerIdentityKey",
              "in": "path",
              "description": "Charger Identity Key",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "test"
            },
            {
              "name": "connectorIdentityKey",
              "in": "path",
              "description": "Connector Identity Key",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "test"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kxYh2uwsLw",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "LaP1xtnNCs",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "UDFuZjV72Z",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "PKEq5jf4b4",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AutoChargeResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/cards/suspend": {
        "post": {
          "tags": [
            "Account Cards"
          ],
          "summary": "Suspend cards of account",
          "description": "Suspend all cards for a given account",
          "operationId": "suspendCards",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aHZ8nRQmiX",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "czYy2Myqjb",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "gZCnawflPB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "flkc2jtcOW",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SuspendCardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/cards/batch/assign": {
        "post": {
          "tags": [
            "Account Cards"
          ],
          "summary": "Assign batch of cards",
          "description": "Assign batch of cards. No billing involved when assigning to given account",
          "operationId": "batchAssign",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchCardAssign"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "sTen90kNCV",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "UkrAFmMRXn",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "2ZQXA3U4jh",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "hHyM0qdsWl",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/refunds": {
        "post": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Add a new billing transaction",
          "description": "Add a new billing transaction refund related",
          "operationId": "addRefundTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionRefundCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "UuojgygeDy",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "MdFgPrRIih",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "re97lziBMA",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "CXjVOpR13t",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/penalties": {
        "post": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Add a new billing transaction",
          "description": "Add a new billing transaction penalty related",
          "operationId": "addPenaltyTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionPenaltyCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "92GRuIglN7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "CvN64TRRDr",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ul1jI0qGqB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "tlqAXxsy6h",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/filter": {
        "post": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Find billing transactions",
          "description": "Finds billing transactions based on a given filter",
          "operationId": "filterTransactions_2",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionFilter"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "H10nPhomDd",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AcldguvI42",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Rwq0sJ3AdD",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "yM8nYkBElB",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/externalPayments": {
        "post": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Add a new billing transaction",
          "description": "Add a new billing transaction external payment related",
          "operationId": "addExternalPaymentTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionExternalPaymentCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "nWaVRPpSFB",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Rk4ON6hNWr",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "COJPOA4RMK",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "9RRZ4vK9HK",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/credits": {
        "post": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Add a new billing transaction",
          "description": "Add a new billing transaction credit related",
          "operationId": "addCreditTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionCreditCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JMyWyBItGr",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Lwx9hw85sD",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "eT4WfXsYIM",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "worfWAf5Uq",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/contracts": {
        "post": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Add a new billing transaction",
          "description": "Add a new billing transaction contract related",
          "operationId": "addContractsTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingTransactionContractCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "T08we4I104",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "wwesi32wuy",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "yUhuiPQ6F7",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "wc7WtD8iyN",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/user-notifications-preferences/{userId}": {
        "patch": {
          "tags": [
            "User Notification Preferences"
          ],
          "summary": "Update notification preferences for user",
          "description": "Update notification preferences for user",
          "operationId": "updateNotificationPreferences",
          "parameters": [
            {
              "name": "userId",
              "in": "path",
              "description": "User Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotificationPreferencesPatch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "R7Aw0AVqjR",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "2nV5Kp1otB",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "HPvMpkp40c",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "pcL44bFzZ0",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/UserNotificationPreferenceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/{id}": {
        "get": {
          "tags": [
            "Sites"
          ],
          "summary": "Find by id",
          "description": "Get details of site by its id",
          "operationId": "getSite",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "LHKaLO6Cw5",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "C5iPR8xRFd",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "V3OQ0PcAD6",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "TCAMQtjgQl",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SiteResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Sites"
          ],
          "summary": "Delete a site",
          "description": "Deletes a single site by its id",
          "operationId": "deleteSiteById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "WVxSYERrJ5",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XLOw4BiZ6a",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "sNdDSL1BNG",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "xZ1rPSyjNv",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Sites"
          ],
          "summary": "Update a site",
          "description": "Update a single site. Address field is optional.\n\n To inherit the address of the property pass null for address field",
          "operationId": "updateSite",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "p89R9M1k0F",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "pio5YZGqXp",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "SLMOifkDxV",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "2x3V6njsK6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SiteResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/{id}/external": {
        "patch": {
          "tags": [
            "Sites"
          ],
          "summary": "Update an external site",
          "description": "Updates a single external site",
          "operationId": "updateExternalSite",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalSiteUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OATyVWr6sa",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5GBLqshcAs",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "dAk0Wq4waN",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "W0s60EKzyw",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/SiteResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/properties/{id}": {
        "get": {
          "tags": [
            "Properties"
          ],
          "summary": "Find by id",
          "description": "Get details of property by its id",
          "operationId": "getProperty",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AF9N6Ur6du",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8PkscEDk5j",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "LJKbcsq7Pb",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "sB4Yok4eAd",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PropertyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Properties"
          ],
          "summary": "Delete property",
          "description": "Deletes a single property by its id",
          "operationId": "deletePropertyById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Jb5aWG0EGF",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9vCbfkLtaF",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "csHrBIhJ1v",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "JfMgWeOrc0",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Properties"
          ],
          "summary": "Update a property",
          "description": "Updates a single property",
          "operationId": "updateProperty",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "gRxijO3qR1",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "tVa5DGjHDc",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "FuEZsOQMfJ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "hP7woBtSKA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PropertyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/properties/{id}/external": {
        "patch": {
          "tags": [
            "Properties"
          ],
          "summary": "Update an external property",
          "description": "Updates a single external property",
          "operationId": "updateExternalProperty",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalPropertyUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "fpLLij3ZCV",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "v7JjWXvvr9",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "I4jOD6sYNk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Er3klSQLUd",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PropertyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/operators/{id}": {
        "get": {
          "tags": [
            "Operators"
          ],
          "summary": "Find by id",
          "description": "Get details of operator user by its id",
          "operationId": "getOperator",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "SVegmf1pHZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Nm7YSFkybv",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "hp10W0HrMZ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "0vnoULRFvf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Operators"
          ],
          "summary": "Delete an operator user",
          "description": "Deletes a single operator by its id",
          "operationId": "deleteOperatorById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JOJBqg2MSd",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "2cVgj0M3ug",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "rXNzt3WD73",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "25aIk9cAeJ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Operators"
          ],
          "summary": "Update operator user",
          "description": "Update operator user",
          "operationId": "updateOperator",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperatorPatch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uL32iDop2C",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "msYTaQ4MUt",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "BxXf4iGHLd",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "DWbwTcE8oP",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/operators/{id}/unblock": {
        "patch": {
          "tags": [
            "Operators"
          ],
          "summary": "Unblock operator user",
          "description": "Unblocks an operator",
          "operationId": "unblockOperator",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "fD5j4ZQXaS",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "zx0kBzhAQK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "042TzhshV9",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Q3Nsr0e86e",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/operators/{id}/suspend": {
        "patch": {
          "tags": [
            "Operators"
          ],
          "summary": "Suspend an operator",
          "description": "Suspend an operator by its id",
          "operationId": "suspend",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uaV3wCqfBw",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "4LNHHfk9fd",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "JgWvPhjiGh",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "WaJweUUSia",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/operators/{id}/reactivate": {
        "patch": {
          "tags": [
            "Operators"
          ],
          "summary": "Reactivate an operator",
          "description": "Change operator status to active",
          "operationId": "reactivate",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Iwqacfb8lb",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rfbyaZoOj6",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "uVBW5MrXiD",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "nngK5ZhSs6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/OperatorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/energy-policies/{id}": {
        "get": {
          "tags": [
            "Energy Policies"
          ],
          "summary": "Find by id",
          "description": "Get details of energy policy by its id",
          "operationId": "getPolicy",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Luiq8BwIUq",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qwRGGBaKCB",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "qZWgVO1uFV",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ApmEpHXAIf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Energy Policies"
          ],
          "summary": "Delete energy policy",
          "description": "Deletes a single energy policy by its id",
          "operationId": "deletePropertyById_1",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "98Xpz5u2NB",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "x7kworLv3m",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "oQMcWrrEk0",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "HvC4AU24UG",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Energy Policies"
          ],
          "summary": "Update energy policy",
          "description": "Updates single energy policy",
          "operationId": "updatePolicy",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9rcsx18Kwl",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mJ9bVOsT4s",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "FBB3HcfNFW",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "zpf3H0IPh6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PolicyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/{id}": {
        "get": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Get customer tariff by id",
          "description": "Get customer tariff by id",
          "operationId": "getCustomerTariff",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ahz78WGtRS",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "jRDkniJN0j",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "KZ5Nps8Xet",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "h40rOyThYx",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Update customer tariff",
          "description": "Update customer tariff",
          "operationId": "updateCustomerTariff",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerTariffUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "GOC0NRAQAZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "0krMnYyFyS",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ZFGPcMofue",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "zqos5ITSa9",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/{id}/reservations/now": {
        "patch": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Update customer reservation tariff now",
          "description": "Update customer reservation tariff now",
          "operationId": "updateCustomerReservationTariffNow",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveNowUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ObsJCNY7D7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "y7hQAiXVz1",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "t1O89ZwW0M",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "DAElRIT9eS",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerReservationTariffNowResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/{id}/reservations/now/terms/{termId}": {
        "delete": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Delete customer reservation tariff term",
          "description": "Delete customer reservation tariff term",
          "operationId": "deleteCustomerReservationTariffTerm",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "termId",
              "in": "path",
              "description": "Term Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 2
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "j9n2BvVC8G",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Dcy9tqK3SG",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "bV0BDYNzcw",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "0twgpxMeZt",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerReservationTariffNowResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Update customer reservation tariff term",
          "description": "Update customer reservation tariff term",
          "operationId": "updateCustomerReservationTariffTerm",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "termId",
              "in": "path",
              "description": "Term Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 2
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveNowTermUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "r7cRja6Oyy",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kkgj6ZIfDc",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Xx6eB7xW6Z",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "IZ88l6cGWL",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerReservationTariffNowResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/{id}/reservations/by-date": {
        "patch": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Update customer reservation tariff",
          "description": "Update customer reservation tariff",
          "operationId": "updateCustomerReservationTariffByDate",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReserveByDateTermsUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PphXyB4lr2",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "0DkfvoAo5m",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "6A0SjNqMTl",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "IPPnkje3XU",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerReservationTariffByDateResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/profile": {
        "get": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Get a customer plan profile by plan code",
          "description": "Get a customer plan profile by plan code",
          "operationId": "getPlanProfile",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "nYGKGfZBfn",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XDN05S9m9F",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lwOnVTfgQU",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "1iSzt1KtJu",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Update a customer plan profile by plan code",
          "description": "Update a customer plan profile by plan code",
          "operationId": "updatePlan",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPlanProfileUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "MiR48SJGTT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "0viWR3pTlE",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "c24Z0hS6UJ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "j2y47TgJOs",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/products/update": {
        "patch": {
          "tags": [
            "Customer Plan Products"
          ],
          "summary": "Update a customer plan product by plan code",
          "description": "Update a customer plan product by plan code",
          "operationId": "updatePlanProduct",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanProductUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Y8VFryC8wB",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6bHkAqQKs3",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "z2kFUEzvPN",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "GIbCOoTSnA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProductsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/products/remove": {
        "patch": {
          "tags": [
            "Customer Plan Products"
          ],
          "summary": "Remove product from customer plan",
          "description": "Remove product from customer plan",
          "operationId": "removePlanProduct",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanProductDelete"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6G95D9tD9Q",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "sLeBunmPaD",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "JKsSTZZdT7",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "E29sbDtdso",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProductsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/locales/{locale}/registration-display": {
        "get": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Get a customer plan registration display by code and locale",
          "description": "Get a customer plan registration display by code and locale",
          "operationId": "getPlanRegistrationDisplay",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "viinVB0v9R",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "2naoajM5mN",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "NKvRKusShQ",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "bKrJgkB04n",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanRegistrationDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Update a customer plan registration display by code and locale",
          "description": "Update a customer plan registration display by code and locale",
          "operationId": "updatePlanRegistrationDisplay",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanRegistrationDisplayUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JvOncnLk3n",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AWveiZiGSF",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "nW6o4hvf1N",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "xRyiAUtgMf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanRegistrationDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/locales/{locale}/display": {
        "get": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Get a customer plan display by plan code and locale",
          "description": "Get a customer plan display by plan code and locale",
          "operationId": "getPlanDisplayByCode",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "vpuS0TGmlM",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IkpJgXRgaK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "WrzhOLKCxI",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "KVhHKZ2LaA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Update a customer plan display by code and locale",
          "description": "Update a customer plan display by code and locale",
          "operationId": "updatePrimaryPlanDisplay",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDisplayUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ihgM2H6Zlc",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "wDmOySzGSa",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "S0WZxr5tUz",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "tJfg6QGPi9",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/deactivate": {
        "patch": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Deactivate a customer plan by plan code",
          "description": "Deactivate a customer plan by plan code",
          "operationId": "deactivatePlan",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "tspQ7emwlh",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5jV5AaA13M",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mwPXudF8u3",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "5302OVbL4E",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/profile": {
        "get": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Get a customer plan profile by plan code and country-currency",
          "description": "Get a customer plan profile by plan code and country(ISO3)-currency",
          "operationId": "getPlanProfileByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "SkLgrj5EAp",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "hEkgDRGPc0",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ONv4p1oyxB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "3SqqXJ1Oyb",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Update a customer plan profile by plan code and country-currency",
          "description": "Update a customer plan profile by plan code and country(ISO3)-currency",
          "operationId": "updatePlanByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerCountryCurrencyPlanUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "c5oHKVlnfb",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cbgNxHmYCL",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "xh6dLmt31z",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "VddjKc5WJo",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/products/update": {
        "patch": {
          "tags": [
            "Customer Plan Products"
          ],
          "summary": "Update a customer plan product by plan code and country-currency",
          "description": "Update a customer plan product by plan code and country(ISO3)-currency",
          "operationId": "updatePlanProduct_1",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanProductUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mZNWfnzNyR",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "NzJDLkkMDq",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Ytjm2mq77l",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ZcPV1iZNZw",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProductsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/locales/{locale}/registration-display": {
        "get": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Get a customer plan registration display by code, country(ISO3)-currency and locale",
          "description": "Get a customer plan registration display by code, country(ISO3)-currency and locale",
          "operationId": "getPlanRegistrationDisplayByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ni9XJYhArU",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bAL3o33Fp7",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Kw0Ll4d2oN",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "UfjufCckhN",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanRegistrationDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Update a customer plan registration display by code, country(ISO3)-currency and locale",
          "description": "Update a customer plan registration display by code, country(ISO3)-currency and locale",
          "operationId": "updatePlanRegistrationDisplayByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanRegistrationDisplayUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OSX94HuCt2",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7UCcMoe2CP",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "XMQgUMmrkY",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "31t8WHqNm6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanRegistrationDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/locales/{locale}/display": {
        "get": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Get a customer plan display by code, country(ISO3)-currency and locale",
          "description": "Get a customer plan display by code, country(ISO3)-currency and locale",
          "operationId": "getPlanDisplayByCodeCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "QuEYxeA5EZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "UPqfwMKLCO",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "GVNhmKHN3v",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "OwhbDMskHw",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Plan Displays"
          ],
          "summary": "Update a customer plan display by code, country(ISO3)-currency and locale",
          "description": "Update a customer plan display by code, country(ISO3)-currency and locale",
          "operationId": "updatePlanDisplayByCodeCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            },
            {
              "name": "locale",
              "in": "path",
              "description": "locale",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "en"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDisplayUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ygxn37hq6M",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "FhfSTmBB5j",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "7ft6j6levF",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "WAworPZ8sD",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanDisplayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/deactivate": {
        "patch": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Deactivate a customer plan profile by plan code and country-currency",
          "description": "Deactivate a customer plan profile by plan code and country(ISO3)-currency",
          "operationId": "deactivatePlanByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9YTmq1V6s3",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "BUM2fJyM7a",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "7hDIGOcUg3",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "CpL25qa1Jc",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/activate": {
        "patch": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Activate a customer plan profile by plan code and country-currency",
          "description": "Activate a customer plan profile by plan code and country(ISO3)-currency",
          "operationId": "activatePlanByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "zxCs1P4bIz",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KZYe91ybYx",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "JR1WyfLOHv",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "OfB3jUZCVj",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/activate": {
        "patch": {
          "tags": [
            "Customer Plans"
          ],
          "summary": "Activate a customer plan by plan code",
          "description": "Activate a customer plan by plan code",
          "operationId": "activatePlan",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "gQxSqHBSBH",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "oWS0vjxOLF",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Li5UQIk7Be",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Kk24UBkdDA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/wallet": {
        "get": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Get an account wallet",
          "description": "Get an account's wallet by account number",
          "operationId": "getAccountWallet",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "frqonaIXug",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ji71Z8RfaC",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "0GHGigEDw5",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "4Bd6mDXX8T",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountWalletResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Update customer's account wallet",
          "description": "Update customer's account wallet",
          "operationId": "updateCustomerWallet",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerWalletUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "0HzPEsqTAA",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kS1tCXQw4Q",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "tzr9T1A61j",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "OWTVtBfS4T",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountWalletResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/wallet/charging-configuration": {
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Update charging configuration",
          "description": "Update charging configuration of an account",
          "operationId": "updateChargingConfiguration",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountChargingConfigurationUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mGXlmvlrh9",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KrEbeM9oO6",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "tQDB95tKik",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "t4U3Xj81Uf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/wallet/block-settings": {
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Update customer's account wallet block settings",
          "description": "Update customer's account wallet block settings",
          "operationId": "updateAccountWalletBlockSettings",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBlockSettingsUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1p3FSHs4ZI",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "spS5H9fvso",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "KEVRGXZRTH",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "l5340V98Ja",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WalletBlockStatusResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/wallet/billing-cycle": {
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Update billing cycle",
          "description": "Update billing cycle of an account",
          "operationId": "updateAccountBillingCycle",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountBillingCycleUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "t4xE1PVREU",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JKQXdgHkGF",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "T25578iAVv",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "aZ3XMn3Rw4",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AccountWalletResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/profile": {
        "get": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Find by customer details by account number",
          "description": "Get details of a customer by account number",
          "operationId": "getCustomerAccount",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "YWBQKwCs6n",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IBbkyway0z",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ICiqUwkRAm",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "g3vhGXsOzj",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Update customer's profile by account number",
          "description": "Update customer's profile by by account number",
          "operationId": "updateCustomerProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "n4ecdh1wds",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OkvOH1Gpsu",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "U4inPEZGxE",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "mx2Ok6aiS5",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/actions/close": {
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Close an account",
          "description": "Close account of a paying customer, the operation also closes members account",
          "operationId": "close",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloseAccountRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "m0xUmKBxQj",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "MYpkMJENOt",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "7P1ZkH7Chw",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Sma4srEbDh",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CloseAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/{accountNumber}/actions/activate": {
        "patch": {
          "tags": [
            "Customer Accounts"
          ],
          "summary": "Activate a registered account",
          "description": "Activate a registered account",
          "operationId": "activateRegisteredAccount",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HBgyrTv8Yr",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "pv7MXGgtu5",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "GuoU10vMxN",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "yodCU8wEis",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CloseAccountResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/members/{accountNumber}/profile": {
        "get": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Find by account number",
          "description": "Get details of a member by account number",
          "operationId": "getMember",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Qp1Y1wsHDn",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "khmwt6lkEB",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "JdegmIkTbj",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "e39oustRqy",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Update a member",
          "description": "Update a member by account number",
          "operationId": "updateMemberByAccountNumber",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "akI1xtMHiN",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "z1tCJPyu1V",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "S7SHVeklYw",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "FZ5peYAFPS",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/members/{accountNumber}/actions/unsuspend": {
        "patch": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Unsuspend a member",
          "description": "Unsuspends a member by account number",
          "operationId": "unsuspendMemberByAccountNumber",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OObUzlfsyH",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "tjWlVL9sS0",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "hoYWf5x2Rf",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "daaDxXE0s5",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/members/{accountNumber}/actions/suspend": {
        "patch": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Suspend a member",
          "description": "Suspends a member by account number",
          "operationId": "suspendMemberByAccountNumber",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "WokmnojV68",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "a1oG5M34kl",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mLtKV3Qb45",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "sppNzYAXl1",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/configurations/{id}": {
        "get": {
          "tags": [
            "Configurations"
          ],
          "summary": "Get a configuration by id",
          "description": "Get a configuration by id",
          "operationId": "getConfigurationById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "oucNYuNshR",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Q59OWMJ2c4",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "qhNEbKCOgI",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Nh5nQItjRX",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfigurationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Configurations"
          ],
          "summary": "Update a configuration by id",
          "description": "Update a configuration by id",
          "operationId": "update",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "o77zJ6pBV7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1UPJ9riiLU",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "YdPB17RTz4",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "tVS9SpaDQt",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfigurationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/profile": {
        "get": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find by id",
          "description": "Get details of charger profile by its id",
          "operationId": "getChargerProfile",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "requestedFields",
              "in": "query",
              "description": "Requested Fields",
              "required": false,
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aUW6A07Vld",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Ea36mCyQPd",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "awcoWK2mgV",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "u1FjilNKMZ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Chargers"
          ],
          "summary": "Update charger profile by id",
          "description": "Update charger profile by its id",
          "operationId": "updateChargerProfile",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerProfileUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7km4009vY0",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PFU4lCHbd0",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "bfpQL2Vbfh",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "1OM8vpkdrC",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/network": {
        "get": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find by id",
          "description": "Get details of charger network by its id",
          "operationId": "getChargerNetwork",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "v0TOeELuVM",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "tRLmi7jNqS",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "fKv4LIJmls",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Qu1GEqlGfF",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerNetworkResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Chargers"
          ],
          "summary": "Update charger networks details ",
          "description": "Updates charger networks details",
          "operationId": "updateChargerNetwork",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerNetworkUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "GV3fTQXebM",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "eazNBI7yx1",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "7VxyKo3OR5",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "iR46VF9Jkd",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerNetworkResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/maintenance": {
        "get": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find by id",
          "description": "Get details of charger maintenance by its id",
          "operationId": "getChargerMaintenance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "4eRtK8QUYV",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1afIKyfisJ",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Lu4y1oo9cB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "GjRuFGWc0i",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerMaintenanceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Chargers"
          ],
          "summary": "Update a charger maintenance details ",
          "description": "Updates a single charger maintenance details",
          "operationId": "updateChargerMaintenance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerMaintenanceUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aq2xDobRWm",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "AXQFWJYcIR",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "tGp0J8ARnt",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "gdyb7SLg5N",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerMaintenanceResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/location": {
        "get": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find by id",
          "description": "Get details of charger location by its id",
          "operationId": "getChargerLocation",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rCcoEosJXD",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "3OVM2rDymT",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "XkwhBOAhmU",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "oGsVe0qOvL",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerLocationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Chargers"
          ],
          "summary": "Update charger location details ",
          "description": "Updates charger location details",
          "operationId": "updateChargerLocation",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerLocationUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "B1hT0KybU1",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "fKEStMOO7u",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "j8SUccJTUW",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "atp9RnlKpO",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerLocationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/electrical": {
        "get": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find by id",
          "description": "Get details of charger electrical by its id",
          "operationId": "getChargerElectrical",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "EmllejgQNU",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9O7nE0i35v",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "zum1K9M6Rk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "u60Xd6HCD5",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerElectricalResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Chargers"
          ],
          "summary": "Update charger electrical details ",
          "description": "Updates charger electrical details",
          "operationId": "updateChargerElectrical",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerElectricalUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "yaqZoHfO7T",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "CP0btgh9BS",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "g5dQ5WsoxF",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "PI3seiIXvG",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerElectricalResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/connectors/{connectorId}": {
        "patch": {
          "tags": [
            "Charger Connectors"
          ],
          "summary": "Update charger connector",
          "description": "Update charger connector",
          "operationId": "updateChargerConnector",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "connectorId",
              "in": "path",
              "description": "Connector id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 2
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerConnectorUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1T80VoRpo6",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "3o7DllAsEz",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "T5hRcTSLl9",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "gTc1Bhd3jV",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerConnectorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{chargerId}/connectors/{connectorId}/tariffs": {
        "get": {
          "tags": [
            "Charger Connectors"
          ],
          "summary": "Get connector tariffs by id",
          "description": "Get connector tariffs by id",
          "operationId": "getConnectorTariff",
          "parameters": [
            {
              "name": "chargerId",
              "in": "path",
              "description": "chargerId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 8
            },
            {
              "name": "connectorId",
              "in": "path",
              "description": "connectorId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 2
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7mnXX4Y1kB",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Twp2NYReJD",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lwmmIqmj8V",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "RbOrrkQdAy",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ConnectorTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Connectors"
          ],
          "summary": "Update connector tariffs",
          "description": "Update connector tariffs",
          "operationId": "updateConnectorTariff",
          "parameters": [
            {
              "name": "chargerId",
              "in": "path",
              "description": "chargerId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 8
            },
            {
              "name": "connectorId",
              "in": "path",
              "description": "connectorId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 2
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorTariffsUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "jdjFU58QCj",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "RjPsSOW9BD",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "qS8ANdOjRa",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "G8EPA64m26",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ConnectorTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models/{id}": {
        "get": {
          "tags": [
            "Charger Models"
          ],
          "summary": "Find a charger model by id",
          "description": "Get details of a charger model by id",
          "operationId": "getChargerModel",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "OtL0mZQnj8",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "SXrcsQ1zAS",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "OIWy6iz5JB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "yMw8Jvnd1v",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Charger Models"
          ],
          "summary": "Delete a charger model",
          "description": "Delete a charger model",
          "operationId": "deleteModel",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "r3uTm9Swtr",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mfzMhGwrKt",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "KE4DI3dBHo",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "LDGsPo14k9",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Models"
          ],
          "summary": "Update a charger model",
          "description": "Update a charger model",
          "operationId": "updateChargerModel",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "NEMiKPStmt",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "y7tazcem1K",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "qjih8YiCUG",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "qRR0g5MGaq",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models/{id}/protocols/{protocolId}": {
        "delete": {
          "tags": [
            "Charger Model Protocol"
          ],
          "summary": "Delete a charger model protocol",
          "description": "Delete a charger model protocol",
          "operationId": "deleteModelProtocol",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "protocolId",
              "in": "path",
              "description": "Protocol Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "GmIyWepfd8",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XbiNMwglFt",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "X5DbisnBSu",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "XpqdWVMiRV",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Model Protocol"
          ],
          "summary": "Update a charger model protocol",
          "description": "Update a charger model protocol",
          "operationId": "updateModelProtocol",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "protocolId",
              "in": "path",
              "description": "Protocol Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelProtocolUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XZQNNGMWcd",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kyBKAhaAai",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "grHeADQqOm",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ykntrATUba",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelProtocolResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-models/{id}/connectors/{connectorId}": {
        "delete": {
          "tags": [
            "Charger Model Connectors"
          ],
          "summary": "Delete a charger model connector",
          "description": "Delete a charger model connector",
          "operationId": "deleteChargerModelConnector",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "connectorId",
              "in": "path",
              "description": "Connector id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "j0KpVl48D3",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "peSOryVb5z",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "taBTIVXac1",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Id7kHZjPGA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Model Connectors"
          ],
          "summary": "Update a charger model connector",
          "description": "Update a charger model connector",
          "operationId": "updateChargerModelConnector",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "connectorId",
              "in": "path",
              "description": "Connector id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerModelConnectorUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PMh4YNqpQH",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "R7PuAKWy0A",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "QbpeGLQLPM",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "k2hAIfuPUr",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerModelConnectorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/wallet/block-settings": {
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Update charger host account wallet block settings",
          "description": "Update charger host account wallet block settings",
          "operationId": "updateWalletBlockSettings",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletBlockSettingsUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "lASshg7H9J",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mNZo28boRy",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "3rN1dWFz0q",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "d5aLDFaWHQ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostWalletBlockSettingsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/wallet/billing-info": {
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Update charger host billing info by account number",
          "description": "Update charger host billing info by account number",
          "operationId": "updateWalletBillingInfo",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostWalletBillingInfoUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IsjTfykS53",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "JI0vEp0YHQ",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ve79KXWOhB",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "QSePSAA03a",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostWalletBillingInfoResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/profile": {
        "get": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find by account number",
          "description": "Find by account number",
          "operationId": "getChargerHostProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KIg5wEwIIx",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "lmxBcMumME",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mWcAsTxACt",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "IJEfh6ucS1",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Update a charger host profile by account number",
          "description": "Update a charger host profile by by account number",
          "operationId": "updateChargerHostProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostProfileUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "RobGaqRYNc",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "NABBEPlhBY",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "p91gL0x9S6",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "NSydLU7IhX",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/payment-gateway": {
        "get": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find by account number ",
          "description": "Find by account number",
          "operationId": "getChargerHostPaymentGateway",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "sK7efV2R4Q",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "hJSMz9mbSN",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "7lxaHW2bpY",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "K7pF3c4Pif",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostPaymentGatewayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Update charger host payment gateway by account number",
          "description": "Update charger host payment gateway by account number",
          "operationId": "updateChargerHostPaymentGateway",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostPaymentGatewayUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Zc4Bk625Ef",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "mYXp1BNsnk",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "dIT17Mn64h",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "sVxr3UGH3e",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostPaymentGatewayResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/billing": {
        "get": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find by account number ",
          "description": "Find by account number",
          "operationId": "getChargerHostBilling",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "36ruRodNsv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "hYIMabsimW",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "njaHPYdZdi",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "xBJe0E6XK8",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostBillingResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Update a charger host billing by account number",
          "description": "Update a charger host billing by account number",
          "operationId": "updateChargerHostBilling",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerHostBillingUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "VQSKshkv5K",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1E0OwCGSF9",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "AYzP7W5vdd",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "jYwqTuAFN6",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostBillingResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/actions/suspend": {
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Suspend a charger host's account by account number",
          "description": "Suspend a charger host's account by account number",
          "operationId": "suspendChargerHostProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rf2CJLSp2p",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "GSKZwr0eQy",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "CWhQWsTSQv",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "R4iUfXYHPf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/actions/reopen": {
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Reopen a charger host's account by account number",
          "description": "Reopen a charger host's account by account number",
          "operationId": "reopenChargerHostProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "jdAm9873az",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "NnM9f9eOg4",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "qcNbKO25XO",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "VUPVgB5rlv",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/actions/close": {
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Close a charger host's account by account number",
          "description": "Close a charger host's account by account number",
          "operationId": "closeChargerHostProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HjyWkxgEF1",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "vZJJrazWOT",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "edbsaxwx57",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ArguGntL7Z",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/actions/activate": {
        "patch": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Activate a charger host's account by account number ",
          "description": "Activate a charger host's account by account number",
          "operationId": "activateChargerHostProfile",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "A47pkhCxHN",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "pAV9SYjb1v",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "T5ShDDxYgD",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Q8RDDlS0XK",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostProfileResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/reallocation": {
        "patch": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Reallocate charger group",
          "description": "Reallocate a charger group",
          "operationId": "reallocateChargerGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargerGroupReallocate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bhOCFeWBbZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "PgjDMgeXaK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "SuIDccDhIK",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "cFGthnezBr",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/chargers/remove": {
        "patch": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Remove chargers from charger group",
          "description": "Remove chargers from charger group",
          "operationId": "removeChargersFromGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveChargers"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "J0RmpENmAy",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "X8fBqf9XG3",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "2FrZ6Bk77c",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "yTxeLMkjPH",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/chargers/add": {
        "patch": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Add chargers to a charger group",
          "description": "Add chargers to a charger group",
          "operationId": "addChargersToGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddChargers"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Vp4vRAMwQT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qEQrrhJnSf",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "jwkFzqIMt6",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "dvc6y561bY",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/billing-plans/remove": {
        "patch": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Remove billing plans from a charger group",
          "description": "Remove billing plans from a charger group",
          "operationId": "removeBillingPlansFromGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveBillingPlans"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HD9bh0ch7z",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8UY3nWxPtB",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "ksVHHiQyG5",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "DNt2BXJYLG",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/billing-plans/add": {
        "patch": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Add billing plans to a charger group",
          "description": "Add billing plans to a charger group",
          "operationId": "addBillingPlansToGroup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddBillingPlans"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7KxwecwpLZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "pAEKSges0x",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "tCrTniX0cX",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "kratxCvAMF",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/{id}/status": {
        "patch": {
          "tags": [
            "Cards"
          ],
          "summary": "Update card status",
          "description": "Card must be active in order to update it's status to one of the following:\n\n* LOST\n* DESTROYED\n* INACTIVE\n* CANCELLED\n* SUSPENDED\n* STOLEN",
          "operationId": "changeStatus",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateStatus"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "l78QMjw4iK",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5IVsS8J9LW",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "nMKCo0q3oW",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "zAZCLpSaqm",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/{id}/delete": {
        "patch": {
          "tags": [
            "Cards"
          ],
          "summary": "Delete card by id",
          "description": "Delete card by id",
          "operationId": "deleteCardById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCardRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "35JHLnbdlV",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Dh7xysuOS1",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "yZ1uT4nIka",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "QJdQim4eiX",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/reservations/{id}/cancel": {
        "patch": {
          "tags": [
            "Account Reservations"
          ],
          "summary": "Cancel reservation by id",
          "description": "Cancel reservation by its id",
          "operationId": "cancelReservation",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "WcUgwF2cI3",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bTUgcaAZ1F",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "FnDh8WeKZe",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "uOEv5Fj0hU",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/payment-methods/payment-cards/{id}/primary": {
        "patch": {
          "tags": [
            "Account Payment Methods"
          ],
          "summary": "Set card payment method as primary",
          "description": "Set card payment method as primary",
          "operationId": "setPrimaryPaymentCard",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "d8ZzAgorHQ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7jPaIgwNsT",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "JwLKe8NVkh",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "l17JMRpRvK",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PaymentCardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/{contractId}": {
        "get": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Find a contract by contract id",
          "description": "Get details of a contract by the account number and contract id",
          "operationId": "getContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "contractId",
              "in": "path",
              "description": "Contract Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "0CqZAVKD3m",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "dEZvqou5Rj",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "eoSFtsnv5b",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "yP7WBeOwSr",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Update contract",
          "description": "Update contract",
          "operationId": "updateContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "contractId",
              "in": "path",
              "description": "Contract Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qsb249QstZ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "YEfceHtwpW",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "TBXPOM2BOP",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "WX2JpCXfT5",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/{contractId}/swap": {
        "patch": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Rollover contract",
          "description": "Rollover contract",
          "operationId": "swapContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "contractId",
              "in": "path",
              "description": "Contract Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractSwap"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "E0QgU2W6np",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "oSqSz0v3di",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "rnLPFVGccW",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "FN2vDnNrN0",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/{contractId}/status": {
        "patch": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Update the status of a contract",
          "description": "Update the status of a contract",
          "operationId": "updateContractStatus",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "contractId",
              "in": "path",
              "description": "Contract Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractStatusUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "h3fZHy8XhP",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "rFrBnedw5m",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "5OTdUaGvrS",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "qHWpSaeXv3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/{contractId}/credit": {
        "patch": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Update usage credit of a contract",
          "description": "Update usage credit of a contract",
          "operationId": "updateContractUsageCredit",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "contractId",
              "in": "path",
              "description": "Contract Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractCreditUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "wShv0TQvXu",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uxU51FFdKU",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "vUJi8oj2Jh",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "oJIPyYhZjf",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CreditResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/{contractId}/close": {
        "patch": {
          "tags": [
            "Account Contracts"
          ],
          "summary": "Close contract",
          "operationId": "closeContract",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "contractId",
              "in": "path",
              "description": "Contract Id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractClose"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XUCUzoEuVp",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bqUermme6M",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "1XVc9vkNcO",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "O2QaIrJyTz",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedContractResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/ad-hoc/status": {
        "patch": {
          "tags": [
            "Account Ad-hoc Contracts"
          ],
          "summary": "Update the status of an ad hoc contract",
          "description": "Update the status of an ad hoc contract",
          "operationId": "updateAdHocContractStatus",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdHocContractStatusUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qYmo74Uf0Z",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "z6km3fiB9Y",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "VLx3eqVJxn",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "LigxuzXZzr",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CreditResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/contracts/ad-hoc/credit": {
        "patch": {
          "tags": [
            "Account Ad-hoc Contracts"
          ],
          "summary": "Update an ad hoc contract credit",
          "description": "Update an ad hoc contract credit",
          "operationId": "updateAdHocContractCredit",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdHocContractUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "yQ6uTtOb1k",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Dls0aSiNXn",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "kncyOqn2Wb",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "cE4iPHN18w",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CreditResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/utility-tariffs/{id}": {
        "get": {
          "tags": [
            "Utility Tariffs"
          ],
          "summary": "Get utility tariff by id",
          "description": "Get utility tariff by id",
          "operationId": "getUtilityTariff",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HMTqrzU1g8",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "z6SI690H11",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "MAkLC5b2tG",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "64t8AuTxvI",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/UtilityTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/sites/{siteId}/energy-planning/result": {
        "get": {
          "tags": [
            "Grid Management"
          ],
          "summary": "Get last energy planning result",
          "description": "Get last energy planning result",
          "operationId": "getLastEnergyPlanningResult",
          "parameters": [
            {
              "name": "siteId",
              "in": "path",
              "description": "Site ID",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 123
            },
            {
              "name": "from",
              "in": "query",
              "description": "From date",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date-time"
              },
              "example": "2020-01-01T00:00:00-01:00"
            },
            {
              "name": "to",
              "in": "query",
              "description": "To date",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date-time"
              },
              "example": "2020-01-01T00:00:00-01:00"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "KHS06Q28Vi",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "I5RvRzYvNG",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "1t6pr7AglW",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "Z2z8OZJw3c",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EnergyPlanningResultResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/reservations/{id}": {
        "get": {
          "tags": [
            "Reservations"
          ],
          "summary": "Find by id",
          "description": "Get details of reservation by its id",
          "operationId": "getReservation",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "VtTJ6b0Hal",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "aIE3TA9gxW",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "wEmfroOlFI",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "a73lJkWgyW",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ReservationResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/ev-transactions/{id}": {
        "get": {
          "tags": [
            "EV Transactions"
          ],
          "summary": "Find EV transaction by id",
          "description": "Get details of EV transaction by its id",
          "operationId": "getEvTransaction",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "4AcUo4bBng",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "1O13leZISi",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Rx9bYlXRzo",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "k6uaBfaZDQ",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EvTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/ev-transactions/cost/{id}": {
        "get": {
          "tags": [
            "EV Transactions"
          ],
          "summary": "Get EV transaction cost",
          "description": "Get EV transaction cost",
          "operationId": "getEvTransactionCost",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7Tzz8LZGpS",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XzDRviM5qX",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "C9NFCERA39",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "hg4Plu3zKB",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/EvTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-tariffs/{id}/reservations": {
        "get": {
          "tags": [
            "Customer Tariffs"
          ],
          "summary": "Get customer reservation tariff by id",
          "description": "Get customer reservation tariff by id",
          "operationId": "getCustomerReservationTariff",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Aq2DgvJWQv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6QWmbVm5ZN",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "LOqZRLZyKg",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "5ueQBIydI3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomerReservationTariffResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/tariffs/charger-groups/{chargerGroupId}": {
        "get": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Get a customer plan tariffs by plan code and charger group id",
          "description": "Get a customer plan tariffs by plan code and charger group id",
          "operationId": "getBillingPlanGroupTariffsByCodeCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            },
            {
              "name": "chargerGroupId",
              "in": "path",
              "description": "Charger group id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 12
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "eSRR78G5uv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6Q7jjtStxv",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "vrkN6u5ZbO",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "NnrkSuGZDd",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanTariffsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/tariffs/charger-groups/all": {
        "get": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Get a customer plan tariffs by plan code that related to all chargers",
          "description": "Get a customer plan tariffs by plan code that related to all chargers",
          "operationId": "getBillingPlanTariffsForAllGroupsByCodeCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kaEjrmP1NP",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "uQzLeQ4uiA",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "amzozE583c",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "nqKPDtuwuq",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanTariffsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/products": {
        "get": {
          "tags": [
            "Customer Plan Products"
          ],
          "summary": "Get a customer plan products by plan code, country(ISO3)-currency and locale",
          "description": "Get a plan products by plan code, country(ISO3)-currency and locale",
          "operationId": "getBillingPlanProductsByCountryCurrency",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "countryCurrency",
              "in": "path",
              "description": "Country Currency",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z]+_[A-Za-z]+",
                "type": "string"
              },
              "example": "USA_USD"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "EQJtQaQHqT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "T4W31DaPKZ",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mTpDWgv6Fj",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "nKmAFheiyb",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/PlanProductsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/country-currencies/{id}": {
        "get": {
          "tags": [
            "Country Currencies"
          ],
          "summary": "Find by id",
          "description": "Get details of country currency by its id",
          "operationId": "getCountryCurrency",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HmXmdSl93A",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "R2TXlpQ9Ba",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "BSQ0ZzTnwL",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "GqQsR5WjD3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CountryCurrencyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/contact-people/{id}": {
        "get": {
          "tags": [
            "Contact People"
          ],
          "summary": "Find by contact person id",
          "description": "Get details of a contact person by id",
          "operationId": "getContactPerson",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "YNgR7p1agW",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "FvH7HFDcM4",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "2IBxjfBXQD",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "BEGJos9C05",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ContactPersonResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/configurations/external-card-authorization-providers": {
        "get": {
          "tags": [
            "Configurations"
          ],
          "summary": "Get external card authorization providers",
          "description": "Get external card authorization providers by service provider",
          "operationId": "getExternalCardAuthorizationProvider",
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "0RZhxRxbH5",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "LVGXBxCepH",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "mbDPgu53Oe",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "YtRT99aJpu",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ExternalCardAuthorizationProviderResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/companies/{id}": {
        "get": {
          "tags": [
            "Companies"
          ],
          "summary": "Get company by id",
          "description": "Get company by id",
          "operationId": "getCompany",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HSGkN2OTSf",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "RtDpa0lzAY",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "loCX7qfJoK",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "dSTrl8lkvj",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CompanyResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/status": {
        "get": {
          "tags": [
            "Chargers"
          ],
          "summary": "Find charger status by id",
          "description": "Get details of charger status by its id",
          "operationId": "getChargerStatus",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "P31xpscY7n",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "3eWXqJCW5a",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "PItKNSKfxk",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "3qOXbF5quM",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerStatusResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/chargers/{id}/charger-groups": {
        "get": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Find charger-groups by charger id",
          "description": "Get charger-groups by a given charger id",
          "operationId": "getGroupsByChargerId",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "TLJhJO12Ka",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bMh2pZQlee",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "lb3aYfu0km",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "uOiMxeEIJB",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/wallet": {
        "get": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find by account number ",
          "description": "Find by account number",
          "operationId": "getChargerHostAccount",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "o7K5yxlMkE",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "FRfYF8jKGa",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "nWkuTmSe1t",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "tLnuFkaXXu",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostAccountWalletResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/plan-management": {
        "get": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find by account number ",
          "description": "Find by account number",
          "operationId": "getChargerHostPlanManagement",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9CrrV5QoAj",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "h28Ephhr2M",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "AYZP9m9aSF",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "eNvoL11FLA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostPlanManagementResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/invoices/{id}/pdf": {
        "get": {
          "tags": [
            "Charger Host Invoices"
          ],
          "summary": "Get invoice as pdf",
          "description": "Get invoice as pdf",
          "operationId": "getInvoicePdf",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 932343
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "Accept-Language",
              "in": "header",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "zGstP3vteG",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "8U36bQxoRK",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "W8K1bPqxH9",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "w5RHAMFjAY",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "application/pdf": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-hosts/{accountNumber}/currencies/{currency}/wallet": {
        "get": {
          "tags": [
            "Charger Hosts"
          ],
          "summary": "Find by account number and currency",
          "description": "Find by account number",
          "operationId": "getChargerHostAccount_1",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "AccountNumber",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            },
            {
              "name": "currency",
              "in": "path",
              "description": "Currency",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "USD"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "RYi80mREjJ",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "G7RXOf98ph",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "1B0U0IJRLV",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ydYijba84S",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerHostAccountWalletResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/{id}/chargers": {
        "get": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Find chargers of charger-group by its id",
          "description": "Get charger ids by a given charger-group id",
          "operationId": "getChargerGroupChargersById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "VK74aVTEHc",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "V4sk2PikOC",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Bve5YiEJK7",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "GEC0WRcPoE",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupChargersResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/charger-groups/root": {
        "get": {
          "tags": [
            "Charger Groups"
          ],
          "summary": "Find charger's root group",
          "description": "Get details of charger's root group",
          "operationId": "getChargerRootGroup",
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "qKJkZ1s4ku",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "iLvt5zeZ05",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "9g3csTGKXg",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "guZ1jIh7v5",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ChargerGroupResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/{id}": {
        "get": {
          "tags": [
            "Cards"
          ],
          "summary": "Find by id",
          "description": "Get details of card by its id",
          "operationId": "getCard",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "NEmBerIZF7",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "6My1RRhW8I",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "pz2o6Ynmju",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "sEBoJ764kF",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CardResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/cards/batch/{id}": {
        "get": {
          "tags": [
            "Cards"
          ],
          "summary": "Get card ids from batch import",
          "description": "Get card ids from existing batch import",
          "operationId": "getCardIdsFromBatch",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZHd6VF9pBc",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "ZHXSehGfJy",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "5oWXZ50tCP",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ahSvYHYS75",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BatchCardsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/invoices/{id}/pdf": {
        "get": {
          "tags": [
            "Account Invoices"
          ],
          "summary": "Get invoice as pdf",
          "description": "Get invoice as pdf",
          "operationId": "getInvoicePdf_1",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "Accept-Language",
              "in": "header",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "kmDIbx0fLO",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "5MJ1LYvMh1",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "oJ8vAa2C9a",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "SUNGpMFsfg",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "application/pdf": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/charging-ability/status": {
        "get": {
          "tags": [
            "Account Charging Capabilities"
          ],
          "summary": "Validate that a customer's account is in good standing for charging",
          "description": "Validate that a customer's account is in good standing for charging",
          "operationId": "validateAccountBeforeCharging",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1000006
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "u3CHvXvqmm",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "B3wSqyTvf0",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "bRbZ3apkYt",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "J6VpN1RSR3",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/{id}": {
        "get": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Find a billing transaction by id",
          "description": "Get details of a billing transaction by account number and id",
          "operationId": "getTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "4F7si11sYv",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "LgJtNswylq",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "Qtp42uUCBF",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ztS8OLPUC7",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/billing-transactions/{id}/lineItems": {
        "get": {
          "tags": [
            "Account Billing Transactions"
          ],
          "summary": "Find line items of a transaction by transaction id",
          "description": "Get line items details of transaction by its id",
          "operationId": "getLineItemForTransaction",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            },
            {
              "name": "pageSize",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 20
            },
            {
              "name": "pageNumber",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": 0
            },
            {
              "name": "sortBy",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "example": "id:asc"
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cbH7xhomHz",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "fvrN3dAC8H",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "HeesUcMf0m",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "2METinU9YA",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BillingTransactionResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/tariffs/connector-type/{connectorType}/charger-groups/{chargerGroupId}": {
        "delete": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Delete customer plan tariffs by plan code and connector type for a given charger group",
          "description": "Delete customer plan tariffs by plan code and connector type for for a given charger group",
          "operationId": "deletePlanGroupTariffsByCodeAndConnectorType",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "connectorType",
              "in": "path",
              "required": true,
              "schema": {
                "pattern": "(TYPE_2_MENNEKES|TYPE_4_CHADEMO|TYPE_F_SCHUKO_CEE_7_4_GER|TYPE_E_AND_F_CEE_7_5_FRA|TYPE_3_SCAME|TYPE_COMBO_GERMANY|TYPE_K_SECTION_107_2_D1_DEN|TYPE_C_CEE7_16_EU|TYPE_E_CEE_7_5_FRA|TYPE_C_CEE_7_17_GER_FRA|TYPE_L_CEI_23_16_VII_ITA|TYPE_J_SEV_1011_CH|TYPE_D_BS_546_2_PIN_UK|TYPE_D_BS_546_3_PIN_UK|TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK|TYPE_1_J1772_YAZAKI|SAE_J1772_COMBO_US|SAE_J1772_AVCON|TESLA_UNIVERSAL_MOBILE_CONNECTOR|NEMA_1_15P|TYPE_B_NEMA_5_15|TYPE_B_NEMA_5_20|TESLA_R|TESLA_S|TYPE_2_TETHERED)",
                "type": "string"
              }
            },
            {
              "name": "chargerGroupId",
              "in": "path",
              "description": "groupId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 12
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "7UlDMyYtup",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "cWzIfG8y10",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "TXOQMbqt6J",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "OODwCP6EaX",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/tariffs/connector-type/{connectorType}/charger-groups/all": {
        "delete": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Delete customer plan tariffs by plan code and connector type for all chargers group",
          "description": "Delete customer plan tariffs by plan code and connector type for all chargers group",
          "operationId": "deletePlanGroupTariffsByCodeAndConnectorType_1",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "connectorType",
              "in": "path",
              "required": true,
              "schema": {
                "pattern": "(TYPE_2_MENNEKES|TYPE_4_CHADEMO|TYPE_F_SCHUKO_CEE_7_4_GER|TYPE_E_AND_F_CEE_7_5_FRA|TYPE_3_SCAME|TYPE_COMBO_GERMANY|TYPE_K_SECTION_107_2_D1_DEN|TYPE_C_CEE7_16_EU|TYPE_E_CEE_7_5_FRA|TYPE_C_CEE_7_17_GER_FRA|TYPE_L_CEI_23_16_VII_ITA|TYPE_J_SEV_1011_CH|TYPE_D_BS_546_2_PIN_UK|TYPE_D_BS_546_3_PIN_UK|TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK|TYPE_1_J1772_YAZAKI|SAE_J1772_COMBO_US|SAE_J1772_AVCON|TESLA_UNIVERSAL_MOBILE_CONNECTOR|NEMA_1_15P|TYPE_B_NEMA_5_15|TYPE_B_NEMA_5_20|TESLA_R|TESLA_S|TYPE_2_TETHERED)",
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IVTPsCUH7Z",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "IV3ctG32JP",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "cw2rciwooO",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "qXlJe5pgfa",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/tariffs/charger-speed/{chargerSpeed}/charger-groups/{chargerGroupId}": {
        "delete": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Delete customer plan tariffs by plan code and charger speed for a given charger group",
          "description": "Delete customer plan tariffs by plan code and charger speed for for a given charger group",
          "operationId": "deletePlanGroupTariffsByCodeAndSpeed",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "chargerSpeed",
              "in": "path",
              "required": true,
              "schema": {
                "pattern": "(SLOW|SEMI_FAST|FAST|ULTRA_FAST)",
                "type": "string"
              }
            },
            {
              "name": "chargerGroupId",
              "in": "path",
              "description": "groupId",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 12
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "d9mar5RNzF",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "jNEH6k83p2",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "iHOiZZPsx2",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ymSidy1WHW",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-plans/{planCode}/tariffs/charger-speed/{chargerSpeed}/charger-groups/all": {
        "delete": {
          "tags": [
            "Customer Plan Tariffs"
          ],
          "summary": "Delete customer plan tariffs by plan code and charger speed for all chargers group",
          "description": "Delete customer plan tariffs by plan code and charger speed for all chargers group",
          "operationId": "deletePlanGroupTariffsByCodeAndSpeed_1",
          "parameters": [
            {
              "name": "planCode",
              "in": "path",
              "description": "Plan Code",
              "required": true,
              "schema": {
                "pattern": "[A-Za-z0-9.\\-_\\s]+",
                "type": "string"
              },
              "example": "PlanCode"
            },
            {
              "name": "chargerSpeed",
              "in": "path",
              "required": true,
              "schema": {
                "pattern": "(SLOW|SEMI_FAST|FAST|ULTRA_FAST)",
                "type": "string"
              }
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "XBBwSC4NVz",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "p9Nj9UCzq8",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "juOOGGAF5t",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "FusBsKlVvc",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/customer-accounts/members/{accountNumber}": {
        "delete": {
          "tags": [
            "Customer Member Accounts"
          ],
          "summary": "Delete a member",
          "description": "Deletes a member by its account number",
          "operationId": "deleteMemberByAccountNumber",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "9kdLVfYXYf",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "HtcJ7tuJ6d",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "iweXxoakP7",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "pCAvkeQNlp",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      },
      "/v1/accounts/{accountNumber}/payment-methods/payment-cards/{id}": {
        "delete": {
          "tags": [
            "Account Payment Methods"
          ],
          "summary": "Delete card payment method",
          "description": "Delete card payment method",
          "operationId": "deleteCreditCard",
          "parameters": [
            {
              "name": "accountNumber",
              "in": "path",
              "description": "Account Number",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "example": 1
            },
            {
              "name": "id",
              "in": "path",
              "description": "Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              },
              "example": 1
            }
          ],
          "responses": {
            "404": {
              "description": "Not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "Y9qWExwzIT",
                    "code": "api-gateway-404",
                    "reason": "entity.not.found",
                    "message": "Entity not found",
                    "errors": [
                      {
                        "code": "api-gateway-404",
                        "reason": "user.not.found",
                        "message": "User not found"
                      }
                    ]
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 400,
                    "requestId": "bWAVnEaoRq",
                    "code": "api-gateway-400",
                    "reason": "invalid.request",
                    "message": "Invalid request",
                    "errors": [
                      {
                        "code": "api-gateway-400",
                        "reason": "invalid.request",
                        "message": "Invalid request"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Internal error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 500,
                    "requestId": "UGeLNgriKp",
                    "code": "api-gateway-500",
                    "reason": "internal.error",
                    "message": "Unknown error",
                    "errors": [
                      {
                        "code": "api-gateway-500",
                        "reason": "internal.error",
                        "message": "Unknown error"
                      }
                    ]
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  },
                  "example": {
                    "httpStatusCode": 403,
                    "requestId": "ZvOOQz1Aqm",
                    "code": "api-gateway-403",
                    "reason": "invalid.ticket",
                    "message": "Invalid ticket"
                  }
                }
              }
            },
            "200": {
              "description": "Ok",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BaseResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "dmsTicket": []
            }
          ]
        }
      }
    },
    "components": {
      "schemas": {
        "BaseResponse": {
          "required": [
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            }
          }
        },
        "Message": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "PlanTariffUpdate": {
          "required": [
            "allowCharging",
            "billingTariffCode",
            "dayOfWeek",
            "endTimeHour",
            "endTimeMinutes",
            "startTimeHour",
            "startTimeMinutes"
          ],
          "type": "object",
          "properties": {
            "dayOfWeek": {
              "title": "Day of the week",
              "pattern": "(SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY)",
              "type": "string",
              "description": "Specifies day of the week\n* MONDAY\n* TUESDAY\n* WEDNESDAY\n* THURSDAY\n* FRIDAY\n* SATURDAY\n* SUNDAY",
              "example": "MONDAY"
            },
            "startTimeHour": {
              "title": "Start time hours",
              "type": "integer",
              "format": "int32",
              "example": 14
            },
            "startTimeMinutes": {
              "title": "Start time minutes",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "endTimeHour": {
              "title": "End time hours",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "endTimeMinutes": {
              "title": "End time minutes",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "billingTariffCode": {
              "title": "Billing tariff code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "Fleet Free L2"
            },
            "allowCharging": {
              "title": "Allow charging",
              "type": "boolean",
              "example": true
            }
          }
        },
        "PlanTariffsUpdate": {
          "required": [
            "planTariffs"
          ],
          "type": "object",
          "properties": {
            "connectorType": {
              "title": "Connector type",
              "pattern": "(TYPE_2_MENNEKES|TYPE_4_CHADEMO|TYPE_F_SCHUKO_CEE_7_4_GER|TYPE_E_AND_F_CEE_7_5_FRA|TYPE_3_SCAME|TYPE_COMBO_GERMANY|TYPE_K_SECTION_107_2_D1_DEN|TYPE_C_CEE7_16_EU|TYPE_E_CEE_7_5_FRA|TYPE_C_CEE_7_17_GER_FRA|TYPE_L_CEI_23_16_VII_ITA|TYPE_J_SEV_1011_CH|TYPE_D_BS_546_2_PIN_UK|TYPE_D_BS_546_3_PIN_UK|TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK|TYPE_1_J1772_YAZAKI|SAE_J1772_COMBO_US|SAE_J1772_AVCON|TESLA_UNIVERSAL_MOBILE_CONNECTOR|NEMA_1_15P|TYPE_B_NEMA_5_15|TYPE_B_NEMA_5_20|TESLA_R|TESLA_S|TYPE_2_TETHERED)",
              "type": "string",
              "description": "\n* Specifies connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_4_CHADEMO"
            },
            "chargerSpeed": {
              "title": "Charger speed",
              "pattern": "(SLOW|SEMI_FAST|FAST|ULTRA_FAST)",
              "type": "string",
              "description": "Specifies the charger speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
              "example": "ULTRA_FAST"
            },
            "planTariffs": {
              "title": "Set of tariffs",
              "maxItems": 35,
              "minItems": 7,
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PlanTariffUpdate"
              }
            }
          },
          "description": "Plan tariff update object"
        },
        "PutPlanTariffsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TariffResponse"
              }
            }
          }
        },
        "TariffResponse": {
          "type": "object",
          "properties": {
            "connectorType": {
              "title": "Connector type",
              "type": "string",
              "description": "\n* Specifies the connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_2_MENNEKES"
            },
            "chargerSpeed": {
              "title": "Charging speed",
              "type": "string",
              "description": "\n* Specifies the charge speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
              "example": "FAST"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "tariffTimeRanges": {
              "title": "Plan tariff time range",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TariffTimeRange"
              }
            }
          }
        },
        "TariffTimeRange": {
          "title": "Plan tariff time range",
          "type": "object",
          "properties": {
            "id": {
              "title": "Plan tariff id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "dayOfWeek": {
              "title": "Day of the week",
              "type": "string",
              "description": "Specifies day of the week\n* MONDAY\n* TUESDAY\n* WEDNESDAY\n* THURSDAY\n* FRIDAY\n* SATURDAY\n* SUNDAY",
              "example": "MONDAY"
            },
            "startTimeHour": {
              "title": "Start time hour",
              "type": "integer",
              "format": "int32",
              "example": 14
            },
            "startTimeMinutes": {
              "title": "Start time minutes",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "endTimeHour": {
              "title": "End time hour",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "endTimeMinutes": {
              "title": "End time minutes",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "billingTariffId": {
              "title": "Billing tariff Id",
              "type": "integer",
              "format": "int64",
              "example": 6578
            },
            "allowCharging": {
              "title": "Allow charging",
              "type": "boolean",
              "example": true
            }
          }
        },
        "VehicleFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "accountNumbers": {
              "title": "Account numbers",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                146639,
                123445
              ],
              "items": {
                "title": "Account numbers",
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Vehicle": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Vehicle id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 1000006
            },
            "licensePlateNumber": {
              "title": "License plate number",
              "type": "string",
              "example": "12-905-62"
            },
            "memberId": {
              "title": "Member id",
              "type": "integer",
              "format": "int64",
              "example": 1242
            },
            "model": {
              "title": "Model",
              "type": "string",
              "example": "I3"
            },
            "imageUrl": {
              "title": "Image url",
              "type": "string",
              "example": "ford_focus.png"
            },
            "modelManufacturer": {
              "title": "Model manufacturer",
              "type": "string",
              "example": "BMW"
            },
            "year": {
              "title": "Year",
              "type": "string",
              "example": "52335"
            },
            "emaidCardId": {
              "title": "Emaid card id",
              "type": "integer",
              "format": "int64",
              "example": 930
            },
            "macCardId": {
              "title": "Mac card id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "Ex-num-34"
            }
          }
        },
        "VehicleResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Vehicle"
              }
            }
          }
        },
        "UtilityTariffFilter": {
          "type": "object",
          "properties": {
            "externalId": {
              "title": "External id for filtering",
              "type": "string",
              "example": "a1d2f"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Address": {
          "title": "Address details",
          "type": "object",
          "properties": {
            "address1": {
              "title": "Address",
              "type": "string",
              "example": "Haharash 4"
            },
            "address2": {
              "title": "Address2",
              "type": "string",
              "example": "Bldg D Mail Drop: D303"
            },
            "city": {
              "title": "City",
              "type": "string",
              "example": "Hod Hasharon"
            },
            "zipCode": {
              "title": "Zipcode",
              "type": "string",
              "example": "2134456"
            },
            "countryCode": {
              "title": "Country code",
              "type": "string",
              "example": "ISR"
            },
            "stateCode": {
              "title": "USA state code",
              "type": "string",
              "example": "NY"
            },
            "zoneId": {
              "title": "Timezone id",
              "type": "string",
              "example": "America/New_York"
            },
            "market": {
              "title": "Market",
              "type": "string",
              "example": "JACKSONVILLE - 525"
            },
            "municipality": {
              "title": "Municipality",
              "type": "string",
              "example": "Worcester"
            },
            "region": {
              "title": "Region",
              "type": "string",
              "example": "South Atlantic"
            }
          }
        },
        "Company": {
          "title": "Company details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Company id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "name": {
              "title": "Company name",
              "type": "string",
              "example": "Bezeq int."
            },
            "code": {
              "title": "Company code",
              "type": "string",
              "example": "33221"
            },
            "phoneNumber": {
              "title": "Company phone number",
              "type": "string",
              "example": "*0144"
            },
            "type": {
              "title": "Company type",
              "type": "string",
              "description": "\n* Specifies the company type\n* UNKNOWN\n* INSTALLER\n* MANUFACTURER\n* STATION_HOST\n* PROPERTY_OWNER\n* UTILITY_COMPANY\n* RFID_CARD_SUPPLIER\n* WIRELESS_CARRIER\n* SERVICE_PROVIDER\n* SERVICE_COMPANY\n* OEM\n* PROPERTY_OWNER_FREEDOM_STATION\n* BUILDING_OWNER\n* BUILDING_OWNER_FREEDOM_STATION\n* CONTRACTOR\n* EV_DRIVER\n* RETAIL_PROPERTY\n* TENANT\n* AUTO_DEALERSHIP",
              "example": "INSTALLER"
            }
          }
        },
        "ContactPerson": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 111
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "mobilePhoneNumber": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "shippingAddress": {
              "$ref": "#/components/schemas/Address"
            },
            "billingAddress": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "CountryCurrency": {
          "title": "Country currency details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 5
            },
            "countryId": {
              "title": "Country id",
              "type": "integer",
              "format": "int64",
              "example": 234
            },
            "countryName": {
              "title": "Country name",
              "type": "string",
              "example": "Hungary"
            },
            "countryCode": {
              "title": "ISO3 country code",
              "type": "string",
              "example": "HUN"
            },
            "currency": {
              "title": "Currency type",
              "type": "string",
              "example": "HUF"
            }
          }
        },
        "UtilityTariff": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "name": {
              "title": "Name",
              "type": "string",
              "example": "Tariff name"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Tariff description"
            },
            "code": {
              "title": "Code",
              "type": "string",
              "example": "TA31"
            },
            "defaultEnergyCost": {
              "title": "Default energy cost",
              "type": "number",
              "example": 30.2
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "458328573"
            },
            "company": {
              "$ref": "#/components/schemas/Company"
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrency"
            }
          }
        },
        "UtilityTariffResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UtilityTariff"
              }
            }
          }
        },
        "AddressCreate": {
          "title": "Address details",
          "required": [
            "address1",
            "city",
            "countryCode",
            "zipCode",
            "zoneId"
          ],
          "type": "object",
          "properties": {
            "address1": {
              "title": "Address",
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "example": "Hacharash 4"
            },
            "address2": {
              "title": "Address 2",
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "example": "Bldg D Mail Drop: D303"
            },
            "city": {
              "title": "City",
              "maxLength": 45,
              "minLength": 1,
              "type": "string",
              "example": "Hod Hasharon"
            },
            "stateCode": {
              "title": "Usa state code",
              "maxLength": 2,
              "minLength": 2,
              "type": "string",
              "example": "NY"
            },
            "countryCode": {
              "title": "Country code",
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "example": "ISR"
            },
            "zoneId": {
              "title": "ZoneId",
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "example": "America/Los_Angeles"
            },
            "zipCode": {
              "title": "Zipcode",
              "maxLength": 10,
              "minLength": 1,
              "type": "string",
              "example": "1234567890"
            },
            "municipality": {
              "title": "Municipality",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "Worcester"
            },
            "region": {
              "title": "Region",
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "example": "South Atlantic"
            }
          }
        },
        "SiteCreate": {
          "required": [
            "chargerAccessLevel",
            "displayName",
            "latitude",
            "locationSetting",
            "locationType",
            "longitude",
            "name",
            "propertyId",
            "provisioningStatus",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Site name",
              "maxLength": 100,
              "minLength": 2,
              "type": "string",
              "example": "Raley's Gardnerville"
            },
            "displayName": {
              "title": "Site display name",
              "maxLength": 100,
              "minLength": 2,
              "type": "string",
              "example": "Raley's Gardnerville"
            },
            "legacyId": {
              "title": "Legacy id",
              "maxLength": 100,
              "minLength": 2,
              "type": "string",
              "example": "112233"
            },
            "type": {
              "title": "Site type",
              "pattern": "(STANDARD|FREEDOM_STATIONS|STANDALONE_STATIONS|READY_FOR_EV|READY_FOR_EV_MULTI_FAMILY|EQUIPMENT|TESTING)",
              "type": "string",
              "example": "STANDARD",
              "enum": [
                "STANDARD",
                "FREEDOM_STATIONS",
                "STANDALONE_STATIONS",
                "READY_FOR_EV",
                "READY_FOR_EV_MULTI_FAMILY",
                "EQUIPMENT",
                "TESTING"
              ]
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": -73.985425
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": 40.75801
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 208
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 200
            },
            "chargerAccessLevel": {
              "title": "Charger access level",
              "pattern": "(PUBLIC|PRIVATE|TAXI_ONLY)",
              "type": "string",
              "example": "PUBLIC",
              "enum": [
                "PUBLIC",
                "PRIVATE",
                "TAXI_ONLY"
              ]
            },
            "locationSetting": {
              "title": "Location setting",
              "pattern": "(INDOOR|OUTDOOR)",
              "type": "string",
              "example": "INDOOR",
              "enum": [
                "INDOOR",
                "OUTDOOR"
              ]
            },
            "utilityCompanyId": {
              "title": "Utility company id",
              "type": "integer",
              "format": "int64",
              "example": 266
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "meterNumber": {
              "title": "Meter number",
              "maxLength": 30,
              "minLength": 1,
              "type": "string",
              "example": "I92194213"
            },
            "comments": {
              "title": "Comments",
              "maxLength": 1000,
              "minLength": 1,
              "type": "string",
              "example": "Comments"
            },
            "directions": {
              "title": "Directions",
              "maxLength": 512,
              "minLength": 1,
              "type": "string",
              "example": "Directions"
            },
            "externalId": {
              "title": "External id",
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "example": "546789"
            },
            "hasGate": {
              "title": "Has gate",
              "type": "boolean",
              "example": false
            },
            "provisioningStatus": {
              "title": "Site provisioning status",
              "pattern": "(PLANNED|READY_FOR_PROVISIONING|PROVISIONED|SCHEDULED_FOR_DECOMMISSIONING|DECOMMISSIONED|DENETWORKED|CLOSED)",
              "type": "string",
              "example": "PLANNED",
              "enum": [
                "PLANNED",
                "READY_FOR_PROVISIONING",
                "PROVISIONED",
                "SCHEDULED_FOR_DECOMMISSIONING",
                "DECOMMISSIONED",
                "DENETWORKED",
                "CLOSED"
              ]
            },
            "locationType": {
              "title": "Location type",
              "pattern": "(HOME|HOTEL|PARKING_LOT|MALL|HIGHWAY|GAS_STATION|PUBLIC_PARKING|COMMERCIAL|DSO|GOVERNMENT|WORK)",
              "type": "string",
              "example": "MALL",
              "enum": [
                "HOME",
                "HOTEL",
                "PARKING_LOT",
                "MALL",
                "HIGHWAY",
                "GAS_STATION",
                "PUBLIC_PARKING",
                "COMMERCIAL",
                "DSO",
                "GOVERNMENT",
                "WORK"
              ]
            },
            "energyStorage": {
              "title": "Energy storage",
              "type": "boolean",
              "example": false
            },
            "renewableEnergyGeneration": {
              "title": "Renewable energy generation",
              "type": "boolean",
              "example": false
            },
            "lockCombination": {
              "title": "Lock combination",
              "maxLength": 10,
              "minLength": 1,
              "type": "string",
              "example": "1234"
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": false
            },
            "posId": {
              "title": "Pos id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "address": {
              "$ref": "#/components/schemas/AddressCreate"
            }
          },
          "description": "Site create object"
        },
        "Site": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "name": {
              "title": "Site name",
              "type": "string",
              "example": "Site 1 Center"
            },
            "displayName": {
              "title": "Display name",
              "type": "string",
              "example": "Center 1"
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "\n* Specifies the site type\n* STANDARD\n* FREEDOM_STATIONS\n* STANDALONE_STATIONS\n* READY_FOR_EV\n* READY_FOR_EV_MULTI_FAMILY\n* EQUIPMENT\n* TESTING",
              "example": "STANDARD"
            },
            "legacyId": {
              "title": "Legacy Id",
              "type": "string",
              "example": "123"
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": 44.213152
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": -72.576177
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 1252
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 480
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 200
            },
            "chargerAccessLevel": {
              "title": "Charger access level",
              "type": "string",
              "description": "\n* Specifies the charger access level\n* PUBLIC\n* PRIVATE\n* TAXI_ONLY",
              "example": "PUBLIC"
            },
            "locationSetting": {
              "title": "Location setting",
              "type": "string",
              "description": "\n* Specifies the location setting\n* INDOOR\n* OUTDOOR",
              "example": "INDOOR"
            },
            "utilityCompanyId": {
              "title": "Utility company id",
              "type": "integer",
              "format": "int64",
              "example": 259
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "meterNumber": {
              "title": "Meter number",
              "type": "string",
              "example": "32"
            },
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "MY COMMENTS"
            },
            "directions": {
              "title": "Directions",
              "type": "string",
              "example": "a"
            },
            "chargerIds": {
              "title": "Charger ids",
              "uniqueItems": true,
              "type": "array",
              "example": [
                1934,
                124423
              ],
              "items": {
                "title": "Charger ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "provisioningStatus": {
              "title": "Provisioning status",
              "type": "string",
              "description": "\n* Specifies the provisioning status\n* PLANNED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* CLOSED",
              "example": "READY_FOR_PROVISIONING"
            },
            "locationType": {
              "title": "Location type",
              "type": "string",
              "description": "\n* Specifies the location type\n* HOME\n* HOTEL\n* PARKING_LOT\n* MALL\n* HIGHWAY\n* GAS_STATION\n* PUBLIC_PARKING\n* COMMERCIAL\n* DSO\n* GOVERNMENT\n* WORK",
              "example": "WORKPLACE"
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 673234
            },
            "sourceType": {
              "title": "Source type",
              "type": "string",
              "description": "\n* Specifies the source type\n* INTERNAL\n* EXTERNAL",
              "example": "INTERNAL"
            },
            "energyStorage": {
              "title": "Energy storage",
              "type": "boolean",
              "example": true
            },
            "renewableEnergyGeneration": {
              "title": "Renewable energy generation",
              "type": "boolean",
              "example": true
            },
            "lockCombination": {
              "title": "Lock combination",
              "type": "string",
              "example": "abc"
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": true
            },
            "posId": {
              "title": "Pos id",
              "type": "integer",
              "format": "int64",
              "example": 11243
            },
            "hasGate": {
              "title": "Has gate",
              "type": "boolean",
              "example": true
            },
            "overrideAddress": {
              "title": "Override property address",
              "type": "boolean",
              "example": true
            },
            "energyPolicyId": {
              "title": "Energy policy id",
              "type": "integer",
              "format": "int64",
              "example": 25
            },
            "electricityTopologyId": {
              "title": "Electricity topology id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "resources": {
              "title": "Resources details",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SiteResources"
              }
            }
          }
        },
        "SiteResources": {
          "title": "Resources details",
          "type": "object",
          "properties": {
            "fileName": {
              "title": "File name",
              "type": "string",
              "example": "425414f4-aad1-45fd-a643-7346751407a7"
            },
            "type": {
              "title": "Type",
              "type": "string",
              "example": "PARKING_LOT_IMAGE"
            },
            "createdOn": {
              "title": "Created on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "updatedOn": {
              "title": "Updated on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534394
            }
          }
        },
        "SiteResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Site"
              }
            }
          }
        },
        "EnergyPlanningCalculationResult": {
          "type": "object",
          "properties": {
            "from": {
              "title": "Return result start date",
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00-01:00"
            },
            "to": {
              "title": "Return result end date",
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00-01:00"
            }
          }
        },
        "EnergyPlanningReservation": {
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32"
            },
            "arrival": {
              "title": "Arrival date/time",
              "type": "integer",
              "format": "int64"
            },
            "departure": {
              "title": "Departure date/time",
              "type": "integer",
              "format": "int64"
            },
            "requiredEnergyInKwh": {
              "title": "Required energy in kWh",
              "type": "number",
              "format": "double"
            },
            "suppliedEnergyInKwh": {
              "title": "Calculated supplied energy in kWh",
              "type": "number",
              "format": "double"
            }
          }
        },
        "EnergyPlanningResult": {
          "type": "object",
          "properties": {
            "successReservations": {
              "title": "Successful reservations data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnergyPlanningReservation"
              }
            },
            "failedReservations": {
              "title": "Failed reservations data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnergyPlanningReservation"
              }
            },
            "sitePowerUsage": {
              "title": "Overall site power usage",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          }
        },
        "EnergyPlanningResultResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnergyPlanningResult"
              }
            }
          }
        },
        "SiteResourceCreate": {
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "title": "Type",
              "pattern": "(SITE_IMAGE|PARKING_LOT_IMAGE|CONFIGURATION)",
              "type": "string",
              "example": "PARKING_LOT_IMAGE"
            }
          },
          "description": "Site resource create object"
        },
        "SiteResource": {
          "type": "object",
          "properties": {
            "siteId": {
              "title": "Site Id",
              "type": "integer",
              "format": "int64",
              "example": 1234
            },
            "fileName": {
              "title": "File name",
              "type": "string",
              "example": "425414f4-aad1-45fd-a643-7346751407a7"
            },
            "type": {
              "title": "Type",
              "type": "string",
              "example": "PARKING_LOT_IMAGE"
            },
            "createdOn": {
              "title": "Created on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "updatedOn": {
              "title": "Updated on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534394
            }
          }
        },
        "SiteResourceResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SiteResource"
              }
            }
          }
        },
        "SiteFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "name": {
              "title": "Site name",
              "type": "string",
              "example": "REI Seattle - Array 1"
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "xxxFS210"
            },
            "chargerHostIds": {
              "title": "Charger host ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                123,
                6435
              ],
              "items": {
                "title": "Charger host ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "siteTypes": {
              "title": "Site types",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies location type\n* STANDARD\n* FREEDOM_STATIONS\n* STANDALONE_STATIONS\n* READY_FOR_EV\n* READY_FOR_EV_MULTI_FAMILY\n* EQUIPMENT\n* TESTING",
              "example": [
                "STANDARD",
                "FREEDOM_STATIONS"
              ],
              "items": {
                "title": "Site types",
                "type": "string",
                "description": "Specifies location type\n* STANDARD\n* FREEDOM_STATIONS\n* STANDALONE_STATIONS\n* READY_FOR_EV\n* READY_FOR_EV_MULTI_FAMILY\n* EQUIPMENT\n* TESTING",
                "example": "[\"STANDARD\",\"FREEDOM_STATIONS\"]",
                "enum": [
                  "STANDARD",
                  "FREEDOM_STATIONS",
                  "STANDALONE_STATIONS",
                  "READY_FOR_EV",
                  "READY_FOR_EV_MULTI_FAMILY",
                  "EQUIPMENT",
                  "TESTING"
                ]
              },
              "enum": [
                "STANDARD",
                "FREEDOM_STATIONS",
                "STANDALONE_STATIONS",
                "READY_FOR_EV",
                "READY_FOR_EV_MULTI_FAMILY",
                "EQUIPMENT",
                "TESTING"
              ]
            },
            "locationTypes": {
              "title": "Location type",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies location type\n* HOME\n* HOTEL\n* PARKING_LOT\n* MALL\n* HIGHWAY\n* GAS_STATION\n* PUBLIC_PARKING\n* COMMERCIAL\n* DSO\n* GOVERNMENT\n* WORK",
              "example": [
                "PARKING_LOT",
                "MALL"
              ],
              "items": {
                "title": "Location type",
                "type": "string",
                "description": "Specifies location type\n* HOME\n* HOTEL\n* PARKING_LOT\n* MALL\n* HIGHWAY\n* GAS_STATION\n* PUBLIC_PARKING\n* COMMERCIAL\n* DSO\n* GOVERNMENT\n* WORK",
                "example": "[\"PARKING_LOT\",\"MALL\"]",
                "enum": [
                  "HOME",
                  "HOTEL",
                  "PARKING_LOT",
                  "MALL",
                  "HIGHWAY",
                  "GAS_STATION",
                  "PUBLIC_PARKING",
                  "COMMERCIAL",
                  "DSO",
                  "GOVERNMENT",
                  "WORK"
                ]
              },
              "enum": [
                "HOME",
                "HOTEL",
                "PARKING_LOT",
                "MALL",
                "HIGHWAY",
                "GAS_STATION",
                "PUBLIC_PARKING",
                "COMMERCIAL",
                "DSO",
                "GOVERNMENT",
                "WORK"
              ]
            },
            "statuses": {
              "title": "Set of site statuses",
              "maxItems": 10,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies property status\n* PLANNED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* CLOSED",
              "example": [
                "PLANNED",
                "PROVISIONED"
              ],
              "items": {
                "title": "Set of site statuses",
                "type": "string",
                "description": "Specifies property status\n* PLANNED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* CLOSED",
                "example": "[\"PLANNED\",\"PROVISIONED\"]",
                "enum": [
                  "PLANNED",
                  "READY_FOR_PROVISIONING",
                  "PROVISIONED",
                  "SCHEDULED_FOR_DECOMMISSIONING",
                  "DECOMMISSIONED",
                  "DENETWORKED",
                  "CLOSED"
                ]
              },
              "enum": [
                "PLANNED",
                "READY_FOR_PROVISIONING",
                "PROVISIONED",
                "SCHEDULED_FOR_DECOMMISSIONING",
                "DECOMMISSIONED",
                "DENETWORKED",
                "CLOSED"
              ]
            },
            "posId": {
              "title": "pos id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "sourceType": {
              "title": "Source type",
              "pattern": "(INTERNAL|OCPI|HUBJECT|GIREVE|SEMA|OCHP|FLEET|IAFC)",
              "type": "string",
              "description": "Specifies source type\n* INTERNAL\n* OCPI\n* HUBJECT\n* GIREVE\n* SEMA\n* OCHP\n* FLEET\n* IAFC",
              "example": "HUBJECT",
              "enum": [
                "INTERNAL",
                "OCPI",
                "HUBJECT",
                "GIREVE",
                "SEMA",
                "OCHP",
                "FLEET"
              ]
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Resource": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Resource id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "uploadedOn": {
              "title": "Uploaded on",
              "type": "integer",
              "format": "int64",
              "example": 34543646456
            },
            "fileName": {
              "title": "File name",
              "type": "string",
              "example": "e37e70ae-86ff-41b7-b47c-64eddde408bc"
            }
          }
        },
        "ResourceResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Resource"
              }
            }
          }
        },
        "ReservationFilter": {
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 123
            },
            "reservationStatuses": {
              "title": "Reservation statuses",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies the reservation status\n* ACTIVE\n* CANCELLED\n* EXPIRED\n* RESERVATION_DENIED\n* FULLFIED\n* FUTURE",
              "example": [
                "ACTIVE",
                "CANCELLED"
              ],
              "items": {
                "title": "Reservation statuses",
                "type": "string",
                "description": "Specifies the reservation status\n* ACTIVE\n* CANCELLED\n* EXPIRED\n* RESERVATION_DENIED\n* FULLFIED\n* FUTURE",
                "example": "[\"ACTIVE\",\"CANCELLED\"]",
                "enum": [
                  "ACTIVE",
                  "CANCELLED",
                  "EXPIRED",
                  "RESERVATION_DENIED",
                  "FULLFIED",
                  "FUTURE"
                ]
              },
              "enum": [
                "ACTIVE",
                "CANCELLED",
                "EXPIRED",
                "RESERVATION_DENIED",
                "FULLFIED",
                "FUTURE"
              ]
            },
            "propertyIds": {
              "title": "Property ids",
              "uniqueItems": true,
              "type": "array",
              "example": [
                100038,
                100019
              ],
              "items": {
                "title": "Property ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "siteIds": {
              "title": "Site ids",
              "uniqueItems": true,
              "type": "array",
              "example": [
                100078,
                100109
              ],
              "items": {
                "title": "Site ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "chargingSpeeds": {
              "title": "Charging speed",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies the charger speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
              "example": [
                "SEMI_FAST",
                "FAST"
              ],
              "items": {
                "title": "Charging speed",
                "type": "string",
                "description": "Specifies the charger speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
                "example": "[\"SEMI_FAST\",\"FAST\"]",
                "enum": [
                  "SLOW",
                  "SEMI_FAST",
                  "FAST",
                  "ULTRA_FAST"
                ]
              },
              "enum": [
                "SLOW",
                "SEMI_FAST",
                "FAST",
                "ULTRA_FAST"
              ]
            },
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 1238
            },
            "chargerId": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 1238
            },
            "fromDate": {
              "title": "From date",
              "type": "string",
              "format": "date-time"
            },
            "toDate": {
              "title": "To date",
              "type": "string",
              "format": "date-time"
            },
            "connectorStatuses": {
              "title": "Connector statuses",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies the connector status\n* AVAILABLE\n* CHARGING\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
              "example": [
                "AVAILABLE",
                "CHARGING"
              ],
              "items": {
                "title": "Connector statuses",
                "type": "string",
                "description": "Specifies the connector status\n* AVAILABLE\n* CHARGING\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
                "example": "[\"AVAILABLE\",\"CHARGING\"]",
                "enum": [
                  "AVAILABLE",
                  "CHARGING",
                  "FAULTED",
                  "UNAVAILABLE",
                  "NEW",
                  "UNKNOWN",
                  "RESERVED",
                  "DISCHARGING",
                  "PAUSED",
                  "PREPARING",
                  "FINISHING"
                ]
              },
              "enum": [
                "AVAILABLE",
                "CHARGING",
                "FAULTED",
                "UNAVAILABLE",
                "NEW",
                "UNKNOWN",
                "RESERVED",
                "DISCHARGING",
                "PAUSED",
                "PREPARING",
                "FINISHING"
              ]
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerReservation": {
          "title": "Charger details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 452
            },
            "caption": {
              "title": "Charger caption",
              "type": "string",
              "example": "Test charger"
            },
            "siteName": {
              "title": "Site name",
              "type": "string",
              "example": "NewSite"
            },
            "siteId": {
              "title": "Site Id",
              "type": "string",
              "example": "2324"
            },
            "property": {
              "title": "Property name",
              "type": "string",
              "example": "Property of LGM"
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "connector": {
              "$ref": "#/components/schemas/Connector"
            }
          }
        },
        "Connector": {
          "title": "Connectors details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "identityKey": {
              "title": "Identity key",
              "type": "string",
              "example": "GRDS0144"
            },
            "evseConnectorIdentityKey": {
              "title": "Evse connector identity key",
              "type": "string",
              "example": "1"
            },
            "name": {
              "title": "Name",
              "type": "string",
              "example": "CHADEMO"
            },
            "serialNumber": {
              "title": "Serial number",
              "type": "string",
              "example": "A-123"
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "BC*DSA*E2*1"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "ean": {
              "title": "Ean",
              "type": "string",
              "example": "1023 4566"
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 125.0
            },
            "maxPowerKw": {
              "title": "Max power in Kw",
              "type": "number",
              "example": 50.0
            },
            "meterSerialNumber": {
              "title": "Meter serial number",
              "type": "string",
              "example": "G-0762135"
            },
            "utilityMeterNumber": {
              "title": "Utility serial number",
              "type": "string",
              "example": "MN-8756"
            },
            "ignoreStatusNotification": {
              "title": "Ignore status notification",
              "type": "boolean",
              "example": false
            },
            "status": {
              "title": "Connector status",
              "type": "string",
              "description": "\n* Specifies the connector status options\n* AVAILABLE\n* CHARGING\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
              "example": "AVAILABLE"
            },
            "reservable": {
              "title": "Is reservable",
              "type": "boolean",
              "example": true
            },
            "revenueMargin": {
              "title": "Revenue margin",
              "type": "number",
              "format": "double"
            },
            "teslaConnectionType": {
              "title": "Tesla connection type",
              "type": "string",
              "description": "\n* Specifies the tesla connection type\n* NONE\n* ADAPTER\n* CONNECTOR",
              "example": "ADAPTER"
            },
            "teslaAdapterSerialNumber": {
              "title": "Tesla adapter serial number",
              "type": "string",
              "example": "TA-8675"
            },
            "teslaAdapterInstallationDate": {
              "title": "Tesla adapter installation date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1640995200
            },
            "teslaAdapterInMaintenance": {
              "title": "Is tesla adapter in maintenance",
              "type": "boolean",
              "example": false
            },
            "teslaHasAdapter": {
              "title": "Tesla has adapter",
              "type": "boolean",
              "example": false
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": false
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "wiredPhase": {
              "title": "Wired phase",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "errorCode": {
              "title": "Error code",
              "type": "string",
              "description": "\n* Specifies the error code\n* OTHER_ERROR\n* CONNECTOR_LOCK_FAILURE\n* HIGH_TEMPERATURE\n* MODE_3_ERROR\n* NO_ERROR\n* POWER_METER_FAILURE\n* POWER_SWITCH_FAILURE\n* READER_FAILURE\n* EV_COMMUNICATION_ERROR\n* GROUND_FAILURE\n* INTERNAL_ERROR\n* LOCAL_LIST_CONFLICT\n* OVER_CURRENT_FAILURE\n* OVER_VOLTAGE\n* RESET_FAILURE\n* UNDER_VOLTAGE\n* WEAK_SIGNAL",
              "example": "HIGH_TEMPERATURE"
            },
            "posChargingStatus": {
              "title": "Pos charging status",
              "type": "string",
              "description": "\n* Specifies pos charging status\n* NONE\n* STARTING\n* CHARGING\n* STOPPING",
              "example": "STARTING"
            },
            "errorMessage": {
              "title": "Error message",
              "type": "string",
              "example": "error message info"
            },
            "placement": {
              "title": "Placement",
              "type": "string",
              "description": "\n* Specifies the placement\n* NOT_SPECIFIED\n* LEFT\n* RIGHT\n* TOP\n* BOTTOM\n* CENTER\n* OTHER",
              "example": "LEFT"
            },
            "ratedFrequency": {
              "title": "Rated frequency",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 500
            },
            "qrCode": {
              "title": "QR code",
              "type": "string",
              "example": "https://account.driivz.com/sendCharger/?chargerIdentityKey=XXX-NRG-111625-0127&connectorIdentityKey=1"
            },
            "cableLength": {
              "title": "Cable length",
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "allowOverridePlan": {
              "title": "Allow override plan",
              "type": "boolean",
              "example": true
            },
            "notes": {
              "title": "Notes",
              "type": "string",
              "example": "Connector color is red"
            },
            "connectorType": {
              "title": "Connector type",
              "type": "string",
              "description": "\n* Specifies the connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_2_MENNEKES"
            }
          }
        },
        "Reservation": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Reservation id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "startDate": {
              "title": "Start date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "endDate": {
              "title": "End date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "createdOn": {
              "title": "Date created",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "Specifies the reservation status\n* ACTIVE\n* CANCELLED\n* EXPIRED\n* RESERVATION_DENIED\n* FULLFIED\n* FUTURE\n* PENDING_EXPIRATION",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "CANCELLED",
                "EXPIRED",
                "RESERVATION_DENIED",
                "FULLFIED",
                "FUTURE",
                "PENDING_EXPIRATION"
              ]
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32"
            },
            "charger": {
              "$ref": "#/components/schemas/ChargerReservation"
            },
            "terms": {
              "$ref": "#/components/schemas/Terms"
            }
          }
        },
        "ReservationResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Reservation"
              }
            }
          }
        },
        "Terms": {
          "title": "Terms details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Terms id",
              "type": "integer",
              "format": "int64",
              "example": 13454
            },
            "reservationType": {
              "title": "Reservation type",
              "type": "string",
              "example": "NOW",
              "enum": [
                "NOW",
                "FUTURE"
              ]
            },
            "reservationFee": {
              "title": "Reservation fee",
              "type": "number",
              "example": 1.2
            },
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 0.5
            },
            "noShowFee": {
              "title": "No-show fee",
              "type": "number",
              "example": 0.5
            },
            "duration": {
              "title": "Terms start date",
              "type": "number",
              "format": "float"
            }
          }
        },
        "PropertyCreate": {
          "required": [
            "address",
            "chargerHostId",
            "latitude",
            "locationType",
            "longitude",
            "name",
            "status"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Property name",
              "maxLength": 100,
              "minLength": 1,
              "type": "string",
              "example": "G-center"
            },
            "legacyId": {
              "title": "Legacy id",
              "maxLength": 100,
              "minLength": 1,
              "type": "string",
              "example": "112233"
            },
            "externalId": {
              "title": "External id",
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "example": "546789"
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 272
            },
            "description": {
              "title": "Description",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "Property description"
            },
            "locationType": {
              "title": "Location type",
              "pattern": "(DEALERSHIP|MULTI_FAMILY|WORKPLACE|RETAIL|GARAGE|HIGHWAY|BIG_TOWN|SMALL_TOWN|COMMUTER_TRANSIT|RURAL|NEIGHBORHOOD)",
              "type": "string",
              "example": "NEIGHBORHOOD",
              "enum": [
                "DEALERSHIP",
                "MULTI_FAMILY",
                "WORKPLACE",
                "RETAIL",
                "GARAGE",
                "HIGHWAY",
                "BIG_TOWN",
                "SMALL_TOWN",
                "COMMUTER_TRANSIT",
                "RURAL",
                "NEIGHBORHOOD"
              ]
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": -73.98558
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": 40.7580132
            },
            "status": {
              "title": "Status",
              "pattern": "(PLANNED|READY_FOR_PROVISIONING|PROVISIONED|SCHEDULED_FOR_DECOMMISSIONING|DECOMMISSIONED|DENETWORKED|CONTRACT_TERMINATED|CONTRACT_EXPIRED)",
              "type": "string",
              "example": "PLANNED",
              "enum": [
                "PLANNED",
                "READY_FOR_PROVISIONING",
                "PROVISIONED",
                "SCHEDULED_FOR_DECOMMISSIONING",
                "DECOMMISSIONED",
                "DENETWORKED",
                "CONTRACT_TERMINATED",
                "CONTRACT_EXPIRED"
              ]
            },
            "provisionedDate": {
              "title": "Provisioned date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "contactPersonId": {
              "title": "Contact person id",
              "type": "integer",
              "format": "int64",
              "example": 465
            },
            "showExternalCoupons": {
              "title": "Show external coupons",
              "type": "boolean",
              "example": false
            },
            "electricalTopologyId": {
              "title": "Electrical topology id",
              "type": "integer",
              "format": "int64",
              "example": 111
            },
            "address": {
              "$ref": "#/components/schemas/AddressCreate"
            }
          },
          "description": "Property create object"
        },
        "Property": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "123"
            },
            "name": {
              "title": "Name",
              "type": "string",
              "example": "Barre Welcome Center"
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": 44.213152
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": -72.57617
            },
            "locationType": {
              "title": "Location type",
              "type": "string",
              "example": "WORKPLACE"
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 673234
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Outside the lake"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "sourceType": {
              "title": "Source type",
              "type": "string",
              "example": "INTERNAL"
            },
            "status": {
              "title": "Status",
              "type": "string",
              "example": "READY_FOR_PROVISIONING"
            },
            "provisionedDate": {
              "title": "Provisioned date",
              "type": "integer",
              "format": "int64",
              "example": 1612102593
            },
            "siteIds": {
              "title": "Site ids",
              "uniqueItems": true,
              "type": "array",
              "example": [
                1934,
                124423
              ],
              "items": {
                "title": "Site ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "showExternalCoupons": {
              "title": "Show external coupons",
              "type": "boolean",
              "example": true
            },
            "electricalTopologyId": {
              "title": "Electrical topology id",
              "type": "integer",
              "format": "int64",
              "example": 54451
            },
            "contactPerson": {
              "$ref": "#/components/schemas/ContactPerson"
            },
            "energyPolicyId": {
              "title": "Energy policy id",
              "type": "integer",
              "format": "int64",
              "example": 25
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "PropertyResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            }
          }
        },
        "PropertyFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "chargerHostId": {
              "title": "Charges host id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "name": {
              "title": "Property name",
              "type": "string",
              "example": "City Center"
            },
            "chargerHostName": {
              "title": "Charger host name",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "Jarvis"
              ],
              "items": {
                "title": "Charger host name",
                "type": "string",
                "example": "[\"Jarvis\"]"
              }
            },
            "sourceType": {
              "title": "Source type",
              "pattern": "(INTERNAL|OCPI|HUBJECT|GIREVE|SEMA|OCHP|FLEET|IAFC)",
              "type": "string",
              "description": "Specifies source type\n* INTERNAL\n* OCPI\n* HUBJECT\n* GIREVE\n* SEMA\n* OCHP\n* FLEET\n* IAFC",
              "example": "INTERNAL",
              "enum": [
                "INTERNAL",
                "OCPI",
                "HUBJECT",
                "GIREVE",
                "SEMA",
                "OCHP",
                "FLEET"
              ]
            },
            "statuses": {
              "title": "Set of properties statuses",
              "maxItems": 10,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies property status\n* PLANNED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* CONTRACT_TERMINATED\n* CONTRACT_EXPIRED",
              "example": [
                "PLANNED",
                "PROVISIONED"
              ],
              "items": {
                "title": "Set of properties statuses",
                "type": "string",
                "description": "Specifies property status\n* PLANNED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* CONTRACT_TERMINATED\n* CONTRACT_EXPIRED",
                "example": "[\"PLANNED\",\"PROVISIONED\"]",
                "enum": [
                  "PLANNED",
                  "READY_FOR_PROVISIONING",
                  "PROVISIONED",
                  "SCHEDULED_FOR_DECOMMISSIONING",
                  "DECOMMISSIONED",
                  "DENETWORKED",
                  "CONTRACT_TERMINATED",
                  "CONTRACT_EXPIRED"
                ]
              },
              "enum": [
                "PLANNED",
                "READY_FOR_PROVISIONING",
                "PROVISIONED",
                "SCHEDULED_FOR_DECOMMISSIONING",
                "DECOMMISSIONED",
                "DENETWORKED",
                "CONTRACT_TERMINATED",
                "CONTRACT_EXPIRED"
              ]
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "so-mc-5-Property"
            },
            "dateProvisioned": {
              "title": "Date provisioned in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "locationTypes": {
              "title": "Location type",
              "maxItems": 10,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies location type\n* DEALERSHIP\n* MULTI_FAMILY\n* WORKPLACE\n* RETAIL\n* GARAGE\n* HIGHWAY\n* BIG_TOWN\n* SMALL_TOWN\n* COMMUTER_TRANSIT\n* RURAL\n* NEIGHBORHOOD",
              "example": [
                "DEALERSHIP",
                "WORKPLACE"
              ],
              "items": {
                "title": "Location type",
                "type": "string",
                "description": "Specifies location type\n* DEALERSHIP\n* MULTI_FAMILY\n* WORKPLACE\n* RETAIL\n* GARAGE\n* HIGHWAY\n* BIG_TOWN\n* SMALL_TOWN\n* COMMUTER_TRANSIT\n* RURAL\n* NEIGHBORHOOD",
                "example": "[\"DEALERSHIP\",\"WORKPLACE\"]",
                "enum": [
                  "DEALERSHIP",
                  "MULTI_FAMILY",
                  "WORKPLACE",
                  "RETAIL",
                  "GARAGE",
                  "HIGHWAY",
                  "BIG_TOWN",
                  "SMALL_TOWN",
                  "COMMUTER_TRANSIT",
                  "RURAL",
                  "NEIGHBORHOOD"
                ]
              },
              "enum": [
                "DEALERSHIP",
                "MULTI_FAMILY",
                "WORKPLACE",
                "RETAIL",
                "GARAGE",
                "HIGHWAY",
                "BIG_TOWN",
                "SMALL_TOWN",
                "COMMUTER_TRANSIT",
                "RURAL",
                "NEIGHBORHOOD"
              ]
            }
          },
          "description": "Filter object to be used for searching"
        },
        "OperatorCreate": {
          "required": [
            "companyId",
            "confirmPassword",
            "email",
            "firstName",
            "lastName",
            "password",
            "role"
          ],
          "type": "object",
          "properties": {
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "role": {
              "title": "Primary role",
              "type": "string",
              "example": "Business_Sales"
            },
            "subRoles": {
              "title": "Collection of roles",
              "uniqueItems": true,
              "type": "array",
              "example": [
                "All_Advanced_Reports",
                "Advanced_Reports_(Basic)"
              ],
              "items": {
                "title": "Collection of roles",
                "type": "string",
                "example": "[\"All_Advanced_Reports\",\"Advanced_Reports_(Basic)\"]"
              }
            },
            "password": {
              "title": "User's password",
              "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!]).{8,}$",
              "type": "string",
              "description": "Password must contain:\n* at least 8 characters\n* at least one digit\n* at least one lower case letter\n* at least one upper case letter\n* at least one special character",
              "example": "Ax1B3sc!"
            },
            "confirmPassword": {
              "title": "User's confirmation password",
              "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!]).{8,}$",
              "type": "string",
              "description": "Confirmation password must be equal to password and contain:\n* at least 8 characters\n* at least one digit\n* at least one lower case letter\n* at least one upper case letter\n* at least one special character",
              "example": "Ax1B3sc!"
            },
            "companyId": {
              "title": "Company id",
              "type": "integer",
              "format": "int64",
              "example": 154
            },
            "locale": {
              "title": "Operator locale",
              "type": "string",
              "example": "en_US"
            },
            "chargerGroupId": {
              "title": "Charger group id",
              "type": "integer",
              "format": "int64",
              "example": 1402
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 272
            }
          },
          "description": "Add operator object"
        },
        "CompanyResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Company"
              }
            }
          }
        },
        "ExtendedOperator": {
          "required": [
            "accountIsBlocked",
            "chargerGroupMandatory",
            "creationDate",
            "email",
            "firstName",
            "id",
            "lastModificationDate",
            "lastName",
            "primaryRole",
            "status"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Operator Id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "primaryRole": {
              "title": "Primary role",
              "type": "string",
              "example": "Business_Sales"
            },
            "subRoles": {
              "title": "Collection of roles",
              "uniqueItems": true,
              "type": "array",
              "example": [
                "Troubleshooter",
                "Reports_Admin"
              ],
              "items": {
                "title": "Collection of roles",
                "type": "string",
                "example": "[\"Troubleshooter\",\"Reports_Admin\"]"
              }
            },
            "chargerGroupMandatory": {
              "title": "Is charger group mandatory",
              "type": "boolean",
              "example": false
            },
            "status": {
              "title": "User status",
              "type": "string",
              "example": "ACTIVE"
            },
            "accountIsBlocked": {
              "title": "Is operator blocked",
              "type": "boolean",
              "example": false
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "creationDate": {
              "title": "Date created",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "lastModificationDate": {
              "title": "Last modified",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "company": {
              "$ref": "#/components/schemas/CompanyResponse"
            },
            "chargerGroupId": {
              "title": "Charger group id",
              "type": "integer",
              "format": "int64",
              "example": 1402
            },
            "chargerHost": {
              "$ref": "#/components/schemas/OperatorChargerHost"
            },
            "userNotificationPreference": {
              "title": "User's notification preferences",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserNotificationPreference"
              }
            },
            "generatedPassword": {
              "type": "string"
            }
          }
        },
        "ExtendedOperatorResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtendedOperator"
              }
            }
          }
        },
        "OperatorChargerHost": {
          "title": "Charger host",
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "name": {
              "title": "Charger name",
              "type": "string",
              "example": "Antwerpen chargers"
            }
          }
        },
        "UserNotificationPreference": {
          "title": "User's notification preferences",
          "required": [
            "id",
            "stationEventType",
            "userId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "User notification preference id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "userId": {
              "title": "User id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "stationEventType": {
              "title": "Event type name",
              "type": "string",
              "example": "START_CHARGE_FROM_STATION"
            },
            "cellApp": {
              "type": "boolean"
            },
            "email": {
              "type": "boolean"
            },
            "sms": {
              "type": "boolean"
            }
          }
        },
        "OperatorFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "email": {
              "title": "Email Address",
              "type": "string",
              "example": "john.doe@driivz.com"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Operator": {
          "required": [
            "accountIsBlocked",
            "chargerGroupMandatory",
            "creationDate",
            "email",
            "firstName",
            "id",
            "lastModificationDate",
            "lastName",
            "primaryRole",
            "status"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Operator Id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "primaryRole": {
              "title": "Primary role",
              "type": "string",
              "example": "Business_Sales"
            },
            "subRoles": {
              "title": "Collection of roles",
              "uniqueItems": true,
              "type": "array",
              "example": [
                "Troubleshooter",
                "Reports_Admin"
              ],
              "items": {
                "title": "Collection of roles",
                "type": "string",
                "example": "[\"Troubleshooter\",\"Reports_Admin\"]"
              }
            },
            "chargerGroupMandatory": {
              "title": "Is charger group mandatory",
              "type": "boolean",
              "example": false
            },
            "status": {
              "title": "User status",
              "type": "string",
              "example": "ACTIVE"
            },
            "accountIsBlocked": {
              "title": "Is operator blocked",
              "type": "boolean",
              "example": false
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "creationDate": {
              "title": "Date created",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "lastModificationDate": {
              "title": "Last modified",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "company": {
              "$ref": "#/components/schemas/CompanyResponse"
            },
            "chargerGroupId": {
              "title": "Charger group id",
              "type": "integer",
              "format": "int64",
              "example": 1402
            },
            "chargerHost": {
              "$ref": "#/components/schemas/OperatorChargerHost"
            },
            "userNotificationPreference": {
              "title": "User's notification preferences",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserNotificationPreference"
              }
            }
          }
        },
        "OperatorResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Operator"
              }
            }
          }
        },
        "GuestDriverDetailsFilter": {
          "required": [
            "transactionsIds"
          ],
          "type": "object",
          "properties": {
            "transactionsIds": {
              "title": "Transaction ids",
              "maxItems": 20,
              "minItems": 0,
              "uniqueItems": true,
              "type": "array",
              "example": [
                89547,
                147587
              ],
              "items": {
                "title": "Transaction ids",
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "description": "Filter object to be used for searching"
        },
        "GuestDriverDetails": {
          "type": "object",
          "properties": {
            "billingTransactionId": {
              "title": "Billing transaction id",
              "type": "integer",
              "format": "int64",
              "example": 789453
            },
            "firstLastName": {
              "title": "First and last name",
              "type": "string",
              "example": "Harry Potter"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "hpotter@driivz.com"
            }
          }
        },
        "GuestDriverDetailsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GuestDriverDetails"
              }
            }
          }
        },
        "EvTransactionFilter": {
          "required": [
            "transactionBillingStatus"
          ],
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                61035,
                61038
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "fromDate": {
              "title": "EV Transaction from date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "toDate": {
              "title": "EV Transaction to date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "chargerIds": {
              "title": "Collection of charger ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                12,
                58
              ],
              "items": {
                "title": "Collection of charger ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "connectorIds": {
              "title": "Collection of connector ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                25462,
                25490
              ],
              "items": {
                "title": "Collection of connector ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "evseId": {
              "title": "EVSE id",
              "type": "string",
              "example": "US*EVG*E9*9"
            },
            "transactionBillingStatus": {
              "title": "Transaction billing status",
              "pattern": "(FINAL_COST)",
              "type": "string",
              "example": "FINAL_COST",
              "enum": [
                "FINAL_COST"
              ]
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerHost": {
          "title": "Charger host",
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "name": {
              "title": "Charger name",
              "type": "string",
              "example": "Antwerpen chargers"
            }
          }
        },
        "Cost": {
          "title": "Cost details",
          "type": "object",
          "properties": {
            "estimated": {
              "title": "Estimated amount",
              "type": "number",
              "example": 6.1
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "example": "USD"
            },
            "totalTax": {
              "title": "Total Tax",
              "type": "number",
              "example": 2.25
            },
            "total": {
              "title": "Total amount",
              "type": "number",
              "example": 8.75
            }
          }
        },
        "ErrorInfo": {
          "title": "Error details",
          "type": "object",
          "properties": {
            "errorCode": {
              "title": "Error code",
              "type": "string",
              "example": "NO_ERROR"
            },
            "vendorErrorCode": {
              "title": "Vendor error code",
              "type": "string",
              "example": "E-20"
            },
            "errorMessage": {
              "title": "Error message",
              "type": "string",
              "example": "Error message"
            }
          }
        },
        "EvTransaction": {
          "type": "object",
          "properties": {
            "id": {
              "title": "EV transaction id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "connectorStatus": {
              "title": "ConnectorStatus",
              "type": "string",
              "description": "Specifies EV transaction connector status\n* AVAILABLE\n* CHARGING\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
              "example": "AVAILABLE"
            },
            "connectorType": {
              "title": "Connector type",
              "type": "string",
              "description": "Specifies EV transaction connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_2_MENNEKES"
            },
            "transactionStatus": {
              "title": "Transaction status",
              "type": "string",
              "description": "Specifies EV transaction status\n* STARTED\n* UPDATED\n* STOPPED\n* BILLED",
              "example": "STARTED"
            },
            "transactionBillingStatus": {
              "title": "Transaction billing status",
              "type": "string",
              "description": "Specifies EV transaction billing status\n* NOT_BILLABLE\n* TEMP_COST\n* FINAL_COST\n* DICTATED_COST\n* EXCEEDED_BILLING_CALC_TIME_RANGE\n* FREE_CHARGE",
              "example": "NOT_BILLABLE"
            },
            "stopReason": {
              "title": "Stop reason",
              "type": "string",
              "description": "Specifies EV transaction stop reason\n* EMERGENCY_STOP\n* EV_DISCONNECTED\n* HARD_RESET\n* LOCAL\n* OTHER\n* POWER_LOSS\n* REBOOT\n* REMOTE\n* SOFT_RESET\n* UNLOCK_COMMAND\n* DE_AUTHORIZED\n* ENERGY_LIMIT_REACHED\n* GROUND_FAULT\n* IMMEDIATE_RESET\n* MASTER_PASS\n* LOCAL_OUT_OF_CREDIT\n* OVERCURRENT_FAULT\n* POWER_QUALITY\n* SOC_LIMIT_REACHED\n* STOPPED_BY_EV\n* TIME_LIMIT_REACHED\n* TIMEOUT\n* MANUAL_STOP_CHARGE_BY_OPERATOR\n* CONCURRENT_CHARGING\n* BEFORE_RESERVATION",
              "example": "EMERGENCY_STOP"
            },
            "corruptedReasons": {
              "title": "Corrupted reasons",
              "uniqueItems": true,
              "type": "array",
              "example": "[CORRUPTED_BY_NEGATIVE_TRANSACTIONS]",
              "items": {
                "title": "Corrupted reasons",
                "type": "string",
                "example": "[CORRUPTED_BY_NEGATIVE_TRANSACTIONS]"
              }
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 156798
            },
            "planId": {
              "title": "Plan id",
              "type": "integer",
              "format": "int64",
              "example": 16
            },
            "chargePower": {
              "title": "Charge power in kW",
              "type": "number",
              "format": "double",
              "example": 50
            },
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 25
            },
            "meterReadOnStart": {
              "title": "Meter read on start",
              "type": "integer",
              "format": "int64",
              "example": 2190
            },
            "meterReadOnStop": {
              "title": "Meter read on stop",
              "type": "integer",
              "format": "int64",
              "example": 6470
            },
            "smart": {
              "title": "Smart",
              "type": "boolean",
              "example": false
            },
            "startedOn": {
              "title": "Started on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1500652138
            },
            "stoppedOn": {
              "title": "Stopped on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1500653279
            },
            "chargeTime": {
              "title": "Charge time in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1500653279
            },
            "chargerId": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 42
            },
            "vehicleSoc": {
              "title": "Vehicle soc",
              "type": "number",
              "format": "double",
              "example": 35.0
            },
            "planCode": {
              "title": "Plan code",
              "type": "string",
              "example": "70154"
            },
            "billingTransactionId": {
              "title": "Billing transaction id",
              "type": "integer",
              "format": "int64",
              "example": 654620
            },
            "cardId": {
              "title": "Card id",
              "type": "integer",
              "format": "int64",
              "example": 245431
            },
            "cardNumber": {
              "title": "Card number",
              "type": "string",
              "example": "043D0752674F80"
            },
            "billedTime": {
              "title": "Billed time in seconds",
              "type": "integer",
              "format": "int64",
              "example": 1141
            },
            "totalEnergy": {
              "title": "Total energy",
              "type": "number",
              "format": "double",
              "example": 6.47
            },
            "tariffId": {
              "title": "Tariff id",
              "type": "integer",
              "format": "int64",
              "example": 2854
            },
            "chargerPublicKey": {
              "title": "Charger public key",
              "type": "string",
              "example": "MjM0MzI0"
            },
            "startMeterSignedData": {
              "title": "Start meter signed data",
              "type": "string"
            },
            "stopMeterSignedData": {
              "title": "Stop meter signed data",
              "type": "string"
            },
            "reservationId": {
              "title": "Reservation id",
              "type": "integer",
              "format": "int64",
              "example": 64955
            },
            "evseId": {
              "title": "EVSE Id",
              "type": "string",
              "example": "US*EVG*E9*9"
            },
            "authorizationFailureReason": {
              "title": "Authorization status",
              "type": "string",
              "example": "NOT_ACTIVATED_CARD"
            },
            "accepted": {
              "title": "Accepted",
              "type": "boolean",
              "example": true
            },
            "errorInfo": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "cost": {
              "$ref": "#/components/schemas/Cost"
            },
            "chargerHost": {
              "$ref": "#/components/schemas/ChargerHost"
            }
          }
        },
        "EvTransactionResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EvTransaction"
              }
            }
          }
        },
        "PolicyCreate": {
          "required": [
            "strategy"
          ],
          "type": "object",
          "properties": {
            "strategy": {
              "title": "Strategy",
              "pattern": "(EVEN_SPREAD|FIFO)",
              "type": "string",
              "example": "EVEN_SPREAD",
              "enum": [
                "EVEN_SPREAD, FIFO"
              ]
            },
            "prioritizeByBillingPlan": {
              "title": "Prioritize by billing plan",
              "type": "boolean",
              "example": true
            },
            "prioritizeBySoc": {
              "title": "Prioritize by state of charge",
              "type": "boolean",
              "example": true
            },
            "targetSoc": {
              "title": "Target state of charge",
              "type": "integer",
              "format": "int32",
              "example": 50
            },
            "currentAfterSocTarget": {
              "title": "Current after reach soc target",
              "type": "number",
              "example": 44.2
            },
            "prioritizeByDriverProfile": {
              "title": "Prioritize by driver profile",
              "type": "boolean",
              "example": true
            },
            "prioritizeByExternalIntegration": {
              "title": "Prioritize by external integration",
              "type": "boolean",
              "example": true
            },
            "releaseUnusedAllocatedCurrentIfCurrentStableDuring": {
              "title": "Release unused allocated current if current stable during",
              "type": "integer",
              "format": "int32",
              "example": 50
            },
            "prioritizeByEnergyRequirement": {
              "title": "Prioritize by energy requirement",
              "type": "boolean",
              "example": true
            },
            "slowChargeDepartureTimeFromStart": {
              "title": "Slow charge departure time from start in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "fastChargeDepartureTimeFromStart": {
              "title": "Fast charge departure time from start in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "departureTimeAbsolute": {
              "title": "Departure time absolute in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "defaultVehicleEnergyRequirement": {
              "title": "Default vehicle energy requirement",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "defaultMinChargeCurrent": {
              "title": "Default min charge current",
              "type": "integer",
              "format": "int32",
              "example": 6
            },
            "dropChargePriceThreshold": {
              "title": "Drop charge price threshold",
              "type": "number",
              "example": 44.2
            },
            "dropChargePercentage": {
              "title": "Drop charge percentage",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "stopChargePriceThreshold": {
              "title": "Stop charge price threshold",
              "type": "number",
              "description": "The price at which to stop the power a charger receives",
              "example": 44.2
            },
            "utilityDataSource": {
              "title": "Utility data source",
              "pattern": "(INTERNAL|OPEN_ADR|OSCP)",
              "type": "string",
              "example": "OPEN_ADR",
              "enum": [
                "INTERNAL, OPEN_ADR, OSCP"
              ]
            },
            "mainInputCircuitResourceId": {
              "title": "Main input circuit resource id",
              "type": "string",
              "example": "3250"
            },
            "peakShavingRate": {
              "title": "Peak shaving rate",
              "type": "number",
              "description": "Energy use limit when peak shaving is applied, in kW",
              "example": 44.2
            },
            "renewableEnergyGeneration": {
              "title": "Renewable energy generation",
              "type": "boolean",
              "example": true
            }
          },
          "description": "Policy create object"
        },
        "DepartureTime": {
          "title": "Departure time details",
          "type": "object",
          "properties": {
            "slowChargeDepartureTimeFromStart": {
              "title": "Slow charge departure time from start",
              "type": "integer",
              "description": "Set the start time of slow departure as a fixed time",
              "format": "int64",
              "example": 300
            },
            "fastChargeDepartureTimeFromStart": {
              "title": "Fast charge departure time from start",
              "type": "integer",
              "description": "Set the start time of fast departure as a fixed time",
              "format": "int64",
              "example": 300
            },
            "departureTimeAbsolute": {
              "title": "Departure time absolute",
              "type": "integer",
              "description": "Set the default time of departure as a fixed time",
              "format": "int64",
              "example": 300
            }
          }
        },
        "Policy": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Policy id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "strategy": {
              "title": "Strategy",
              "type": "string",
              "description": "Defines how chargers are prioritized when there is not enough energy to meet demand\n Specifies strategy type\n* EVEN_SPREAD\n* FIFO",
              "example": "EVEN_SPREAD"
            },
            "prioritizeByBillingPlan": {
              "title": "Prioritize by billing plan",
              "type": "boolean",
              "description": "Priority defined in the Energy management priority field of the driver plan",
              "example": true
            },
            "prioritizeBySoc": {
              "title": "Prioritize by state of charge",
              "type": "boolean",
              "description": "Use the state of charge of a vehicle to define the charging priority",
              "example": true
            },
            "targetSoc": {
              "title": "Target state of charge",
              "type": "integer",
              "description": "Target charge amount",
              "format": "int32",
              "example": 50
            },
            "currentAfterSocTarget": {
              "title": "Current after reach soc target",
              "type": "number",
              "description": "The target charge amount (x) to use after a specific state of charge (y) or the departure time is reached.",
              "example": 44.2
            },
            "prioritizeByDriverProfile": {
              "title": "Prioritize by driver profile",
              "type": "boolean",
              "description": "Take the driver’s energy management profile into consideration when calculating the charging priority",
              "example": true
            },
            "prioritizeByExternalIntegration": {
              "title": "Prioritize by external integration",
              "type": "boolean",
              "description": "Use the priority that is supplied via an API from an external system",
              "example": true
            },
            "timeToReleaseUnusedCurrent": {
              "title": "Release unused allocated current if current stable during",
              "type": "integer",
              "description": "The number of minutes that the charging current must remain stable at a charger before it is assumed that the vehicle charging doesnt need to be charged anymore",
              "format": "int32",
              "example": 50
            },
            "prioritizeByEnergyReqAndTod": {
              "title": "Prioritize by energy requirement",
              "type": "boolean",
              "description": "Use the priority that energy required by a vehicle when a driver doesnt enter the value in the mobile app",
              "example": true
            },
            "defaultVehicleEnergyReq": {
              "title": "Default vehicle energy requirement",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "defaultMinChargeCurrent": {
              "title": "Default min charge current",
              "type": "integer",
              "description": "The minimum current that is required for energy management strategies to work",
              "format": "int32",
              "example": 6
            },
            "dropChargePriceThreshold": {
              "title": "Drop charge price threshold",
              "type": "number",
              "description": "The price at which to reduce the power a charger receives",
              "example": 44.2
            },
            "dropChargePercentage": {
              "title": "Drop charge percentage",
              "type": "integer",
              "description": "The percentage amount to reduce the power by when the price reaches the Drop charge price threshold",
              "format": "int32",
              "example": 60
            },
            "stopChargePriceThreshold": {
              "title": "Stop charge price threshold",
              "type": "number",
              "description": "The price at which to stop the power a charger receives",
              "example": 44.2
            },
            "utilityDataSource": {
              "title": "Utility data source",
              "type": "string",
              "description": "The connection used to send demand/response events between distribution system operators (DSOs), utilities, and the energy management system\n Specifies utility data source type\n* INTERNAL\n* OPEN_ADR\n* OSCP",
              "example": "OPEN_ADR"
            },
            "mainInputCircuitResourceId": {
              "title": "Main input circuit resource id",
              "type": "string",
              "example": "3250"
            },
            "applyPeakShaving": {
              "title": "Apply peak shaving",
              "type": "boolean",
              "description": "Apply peak shaving, where the power supply is reduced during peak energy consumption",
              "example": true
            },
            "peakShavingCurrent": {
              "title": "Peak shaving current",
              "type": "number",
              "description": "Energy use limit when peak shaving is applied, in kW",
              "format": "double",
              "example": 44.2
            },
            "meterNumber": {
              "title": "Meter number",
              "type": "string",
              "example": "12354A"
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "integer",
              "format": "int32",
              "example": 220
            },
            "energyStorage": {
              "title": "Energy storage",
              "type": "boolean",
              "example": true
            },
            "electricityTopologyId": {
              "title": "Electricity topology id",
              "type": "integer",
              "format": "int64",
              "example": 45
            },
            "renewableEnergyGeneration": {
              "title": "Renewable energy generation",
              "type": "boolean",
              "example": true
            },
            "departureTime": {
              "$ref": "#/components/schemas/DepartureTime"
            }
          }
        },
        "PolicyResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          }
        },
        "PolicyFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 12
            }
          },
          "description": "Filter object to be used for searching"
        },
        "CustomerTariffCreate": {
          "required": [
            "name",
            "overtimeChargeBehaviour",
            "tariffCode"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "Maven"
            },
            "tariffCode": {
              "title": "Tariff code",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "\"78789\""
            },
            "externalId": {
              "title": "External id",
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "example": "a04f031c-1941-4a7f-a7f4-296749b53a18"
            },
            "description": {
              "title": "Description",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "This is a description"
            },
            "displayDescription": {
              "title": "Display description",
              "maxLength": 512,
              "minLength": 1,
              "type": "string",
              "example": "This is a description"
            },
            "externalTariffId": {
              "title": "External tariff id",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "External tariff id"
            },
            "fixedPrice": {
              "title": "Fixed price",
              "type": "number",
              "example": 11.11
            },
            "minFee": {
              "title": "Minimum fee",
              "type": "number",
              "example": 2.32
            },
            "transactionFee": {
              "title": "Transaction fee",
              "type": "number",
              "example": 0.32
            },
            "maxChargeTimeInMinutes": {
              "title": "Max charge time in minutes",
              "type": "number",
              "format": "float",
              "example": 1.5
            },
            "maxChargeAmount": {
              "title": "Max charge amount",
              "type": "number",
              "example": 80.5
            },
            "maxChargeKwh": {
              "title": "Max charge Kwh",
              "type": "number",
              "example": 50.1
            },
            "fixedParkingFee": {
              "title": "Fixed parking fee",
              "type": "number",
              "example": 21.5
            },
            "hourlyParkingRate": {
              "title": "Hourly parking rate",
              "type": "number",
              "example": 212.2
            },
            "overtimePenalty": {
              "title": "Overtime penalty",
              "type": "number",
              "example": 86.74
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 432
            },
            "addedCostToUtilityRate": {
              "title": "Added cost to utility rate",
              "type": "number",
              "example": 15.2
            },
            "overtimeChargeBehaviour": {
              "title": "Overtime charge behaviour",
              "pattern": "(STOP_CHARGE|APPLY_PENALTY|NO_BEHAVIOUR)",
              "type": "string",
              "example": "APPLY_PENALTY",
              "enum": [
                "STOP_CHARGE",
                "APPLY_PENALTY",
                "NO_BEHAVIOUR"
              ]
            },
            "firstLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriodCreate"
            },
            "secondLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriodCreate"
            },
            "thirdLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriodCreate"
            }
          },
          "description": "Customer tariff create object"
        },
        "LevelPeriodCreate": {
          "title": "Third level period details",
          "type": "object",
          "properties": {
            "durationInHours": {
              "title": "Duration in hours",
              "type": "number",
              "example": 2.5
            },
            "kwhRate": {
              "title": "Kwh rate",
              "type": "number",
              "example": 99.99
            },
            "plugInMinuteRate": {
              "title": "Plug in minute rate",
              "type": "number",
              "example": 1.2
            },
            "plugInHourlyRate": {
              "title": "Plug in hourly rate",
              "type": "number",
              "example": 0.4
            },
            "minuteRate": {
              "title": "Minute rate",
              "type": "number",
              "example": 1.1
            },
            "hourlyRate": {
              "title": "Hourly rate",
              "type": "number",
              "example": 2.1
            }
          }
        },
        "CustomerTariff": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 78789
            },
            "name": {
              "title": "Name",
              "type": "string",
              "example": "Maven"
            },
            "tariffCode": {
              "title": "Tariff code",
              "type": "string",
              "example": "78789"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a04f031c-1941-4a7f-a7f4-296749b53a18"
            },
            "sourceType": {
              "title": "Source type",
              "type": "string",
              "description": "Specifies source type\n* INTERNAL\n* OCPI\n* HUBJECT\n* GIREVE\n* SEMA\n* OCHP\n* FLEET\n* IAFC",
              "example": "INTERNAL"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "This is a description"
            },
            "displayDescription": {
              "title": "Display description",
              "type": "string",
              "example": "This is a description"
            },
            "externalTariffId": {
              "title": "External tariff id",
              "type": "string",
              "example": "External tariff id"
            },
            "fixedPrice": {
              "title": "Fixed price",
              "type": "number",
              "example": 11.11
            },
            "minFee": {
              "title": "Minimum fee",
              "type": "number",
              "example": 2.32
            },
            "transactionFee": {
              "title": "Transaction fee",
              "type": "number",
              "example": 0.32
            },
            "maxChargeTimeInMinutes": {
              "title": "Max charge time in minutes",
              "type": "number",
              "format": "float",
              "example": 1.5
            },
            "maxChargeAmount": {
              "title": "Max charge amount",
              "type": "number",
              "example": 80.5
            },
            "maxChargeKwh": {
              "title": "Max charge Kwh",
              "type": "number",
              "example": 50.1
            },
            "fixedParkingFee": {
              "title": "Fixed parking fee",
              "type": "number",
              "example": 21.5
            },
            "hourlyParkingRate": {
              "title": "Hourly parking rate",
              "type": "number",
              "example": 212.2
            },
            "overtimePenalty": {
              "title": "Overtime penalty",
              "type": "number"
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 432
            },
            "addedCostToUtilityRate": {
              "title": "Added cost to utility rate",
              "type": "number",
              "example": 15.2
            },
            "overtimeChargeBehaviour": {
              "title": "Overtime charge behaviour",
              "type": "string",
              "description": "Specifies overtime charge behaviour\n* NO_BEHAVIOUR\n* STOP_CHARGE\n* APPLY_PENALTY",
              "example": "APPLY_PENALTY",
              "enum": [
                "STOP_CHARGE, APPLY_PENALTY, NO_BEHAVIOUR"
              ]
            },
            "firstLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriod"
            },
            "secondLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriod"
            },
            "thirdLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriod"
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrency"
            }
          }
        },
        "CustomerTariffResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerTariff"
              }
            }
          }
        },
        "LevelPeriod": {
          "title": "Third level period details",
          "type": "object",
          "properties": {
            "durationInHours": {
              "title": "Duration in Hours",
              "type": "number",
              "example": 21.43
            },
            "kwhRate": {
              "title": "Kwh rate",
              "type": "number",
              "example": 99.99
            },
            "plugInMinuteRate": {
              "title": "Plug in minute rate",
              "type": "number",
              "example": 1.2
            },
            "plugInHourlyRate": {
              "title": "Plug in hourly rate",
              "type": "number",
              "example": 0.4
            },
            "minuteRate": {
              "title": "Minute rate",
              "type": "number",
              "example": 1.1
            },
            "hourlyRate": {
              "title": "Hourly rate",
              "type": "number",
              "example": 2.1
            }
          }
        },
        "ReserveNowTermCreate": {
          "required": [
            "length"
          ],
          "type": "object",
          "properties": {
            "length": {
              "title": "Reservation Length",
              "type": "number",
              "format": "float",
              "example": 35.5
            },
            "fee": {
              "title": "Reservation Fee",
              "type": "number",
              "example": 45.5
            },
            "noShowFee": {
              "title": "No Show Fee",
              "type": "number",
              "example": 67.7
            }
          },
          "description": "Reservation tariff term create object"
        },
        "CustomerReservationTariffNow": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Tariff id",
              "type": "integer",
              "format": "int64",
              "example": 789
            },
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 11.1
            },
            "chargePerMinute": {
              "title": "Charge now per minute",
              "type": "boolean",
              "example": false
            },
            "sameFeeForNoShow": {
              "title": "Same fee for no show",
              "type": "boolean",
              "example": false
            },
            "reservationTerms": {
              "title": "Reservation terms details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservationTerm"
              }
            }
          }
        },
        "CustomerReservationTariffNowResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerReservationTariffNow"
              }
            }
          }
        },
        "ReservationTerm": {
          "title": "Reservation terms details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 78789
            },
            "length": {
              "title": "Reservation length",
              "type": "number",
              "format": "float",
              "example": 1.2
            },
            "fee": {
              "title": "Reservation Fee",
              "type": "number",
              "example": 8.4
            },
            "noShowFee": {
              "title": "No show fee",
              "type": "number",
              "example": 25.9
            }
          }
        },
        "CountryCurrencyPair": {
          "title": "Country currency",
          "required": [
            "countryCode",
            "currency"
          ],
          "type": "object",
          "properties": {
            "countryCode": {
              "title": "Country code",
              "type": "string",
              "example": "HUN"
            },
            "currency": {
              "title": "Currency type",
              "type": "string",
              "example": "HUF"
            }
          }
        },
        "CustomerTariffFilter": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "example": "Maven"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": " A description"
            },
            "tariffCode": {
              "title": "Tariff code",
              "type": "string",
              "example": "Tariff code"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "sourceType": {
              "title": "Source type",
              "pattern": "(INTERNAL|OCPI|HUBJECT|GIREVE|SEMA|OCHP|FLEET|IAFC)",
              "type": "string",
              "example": "HUBJECT",
              "enum": [
                "INTERNAL",
                "OCPI",
                "HUBJECT",
                "GIREVE",
                "SEMA",
                "OCHP",
                "FLEET",
                "IAFC"
              ]
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrencyPair"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "PlanCreate": {
          "required": [
            "appearanceOrder",
            "balanceType",
            "category",
            "code",
            "codeForExternalInterfaces",
            "costFactor",
            "description",
            "displayCode",
            "financialCode",
            "minCommitmentInMonths",
            "name",
            "tariffCode",
            "terminationBehavior"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "description"
            },
            "code": {
              "title": "Plan code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "FREE"
            },
            "subscriptionName": {
              "title": "Subscription name",
              "type": "string",
              "example": "comp name"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "balanceType": {
              "title": "Balance type",
              "pattern": "(PRE_PAID|POST_PAID|NON_PAYING|PAYMENT_IMMEDIATELY|POST_PAID_IMMEDIATELY)",
              "type": "string",
              "example": "POST_PAID",
              "enum": [
                "PRE_PAID",
                "POST_PAID",
                "NON_PAYING",
                "PAYMENT_IMMEDIATELY",
                "POST_PAID_IMMEDIATELY"
              ]
            },
            "category": {
              "title": "Billing plan category",
              "pattern": "(SINGLE_TARIFF_FOR_ALL_DRIVERS|MEMBERSHIP|ROAMING|OTP)",
              "type": "string",
              "example": "MEMBERSHIP",
              "enum": [
                "SINGLE_TARIFF_FOR_ALL_DRIVERS",
                "MEMBERSHIP",
                "ROAMING",
                "OTP"
              ]
            },
            "discountRate": {
              "title": "Discount rate",
              "type": "number",
              "example": 12
            },
            "costFactor": {
              "title": "Cost factor",
              "type": "number",
              "example": 10
            },
            "appearanceOrder": {
              "title": "Appearance order",
              "type": "integer",
              "format": "int32",
              "example": 34
            },
            "minCommitmentInMonths": {
              "title": "Minimum commitment months",
              "type": "integer",
              "format": "int32",
              "example": 6
            },
            "terminationBehavior": {
              "title": "Termination behavior",
              "pattern": "(TERMINATE|EVERGREEN|ROLLOVER)",
              "type": "string",
              "example": "ROLLOVER",
              "enum": [
                "TERMINATE",
                "EVERGREEN",
                "ROLLOVER"
              ]
            },
            "customerRolloverPlanCode": {
              "title": "Customer rollover plan code",
              "type": "string",
              "example": "OTG DC"
            },
            "waiveRolloverPlanSetupFee": {
              "title": "Waive rollover plan setup fee",
              "type": "boolean",
              "example": false
            },
            "rolloverSwitchDate": {
              "title": "Rollover date (when the setting Plan will be switch to rollover plan) in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2022-10-15T12:21:06-07:00"
            },
            "etf": {
              "title": "Early termination fee",
              "type": "number",
              "example": 10
            },
            "resetEtfOnRollover": {
              "title": "Reset early termination fee on rollover",
              "type": "boolean",
              "example": false
            },
            "showOnRegistration": {
              "title": "Show on registration",
              "type": "boolean",
              "example": false
            },
            "displayOnly": {
              "title": "Display only",
              "type": "boolean",
              "example": false
            },
            "showExistingCardInputOnRegistration": {
              "title": "Show existing card input on registration",
              "type": "boolean",
              "example": false
            },
            "requireCardNumber": {
              "title": "Require card number",
              "type": "boolean",
              "example": false
            },
            "showExistingVehicleInputOnRegistration": {
              "title": "Show existing vehicle input on registration",
              "type": "boolean",
              "example": false
            },
            "requireVehicleInformation": {
              "title": "Require vehicle information",
              "type": "boolean",
              "example": false
            },
            "licenseNumberLabelKeySuffix": {
              "title": "License number label key suffix",
              "pattern": "(taxiLicenseNumber|registrationNumber)",
              "type": "string",
              "example": "taxiLicenseNumber"
            },
            "showInFilterList": {
              "title": "Show in filter list",
              "type": "boolean",
              "example": false
            },
            "excludeFromDefaultPlanFilter": {
              "title": "Exclude from default plan filter",
              "type": "boolean",
              "example": false
            },
            "hiddenFromDriver": {
              "title": "Hidden from driver",
              "type": "boolean",
              "example": false
            },
            "includeInQaReport": {
              "title": "Include in qa report",
              "type": "boolean",
              "example": false
            },
            "disableSmartCharging": {
              "title": "Disable smart charging",
              "type": "boolean",
              "example": false
            },
            "allowDisableSmartCharging": {
              "title": "Allow disable smart charging",
              "type": "boolean",
              "example": false
            },
            "trackAnalytics": {
              "title": "Track analytics",
              "type": "boolean",
              "example": false
            },
            "allowRoaming": {
              "title": "Allow roaming",
              "type": "boolean",
              "example": false
            },
            "requireVin": {
              "title": "Require VIN",
              "type": "boolean",
              "example": false
            },
            "vinOemId": {
              "title": "VIN OEM id",
              "type": "integer",
              "format": "int64",
              "example": 48
            },
            "showVinInputToDriver": {
              "title": "Show VIN input to driver",
              "type": "boolean",
              "example": false
            },
            "useVinSalesDateForContractEndDate": {
              "title": "Use VIN sales date for contract end date",
              "type": "boolean",
              "example": false
            },
            "cardBrandId": {
              "title": "Card brand id",
              "type": "integer",
              "format": "int64",
              "example": 44
            },
            "cardExternalOemId": {
              "title": "Card external OEM id",
              "type": "integer",
              "format": "int64",
              "example": 24
            },
            "requireChargeLocationAssignment": {
              "title": "Require charge location assignment",
              "type": "boolean",
              "example": false
            },
            "financialCode": {
              "title": "Financial plan code",
              "type": "string",
              "example": "SUB_OTG"
            },
            "codeForExternalInterfaces": {
              "title": "Code for external interfaces",
              "type": "string",
              "example": "code"
            },
            "energyManagementPriority": {
              "title": "Energy management priority",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "fixedInitialPaymentAmount": {
              "title": "Fixed initial payment amount",
              "type": "number",
              "example": 85
            },
            "allowReserveNow": {
              "title": "Allow reserve now",
              "type": "boolean",
              "example": false
            },
            "allowReserveByDate": {
              "title": "Allow reserve by date",
              "type": "boolean",
              "example": false
            },
            "excludeFromHostPayment": {
              "title": "Exclude from host payment",
              "type": "boolean",
              "example": false
            },
            "planDuration": {
              "title": "Plan duration",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "displayCode": {
              "title": "Display code",
              "type": "string",
              "example": "EV123 Charge"
            },
            "filterDisplayCode": {
              "title": "Filter display code",
              "type": "string",
              "example": "0"
            },
            "tariffCode": {
              "title": "Tariff code",
              "type": "string",
              "example": "OTG DC"
            }
          },
          "description": "Customer plan create object"
        },
        "CustomerPlanProfile": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 452
            },
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "description"
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "subscriptionName": {
              "title": "Subscription name",
              "type": "string",
              "example": "comp name"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "balanceType": {
              "title": "Balance type",
              "type": "string",
              "description": "\n* Specifies the balance type\n* PRE_PAID\n* POST_PAID\n* NON_PAYING\n* PAYMENT_IMMEDIATELY\n* POST_PAID_IMMEDIATELY",
              "example": "POST_PAID"
            },
            "category": {
              "title": "Billing plan category",
              "type": "string",
              "description": "\n* Specifies the category\n* SINGLE_TARIFF_FOR_ALL_DRIVERS\n* MEMBERSHIP\n* ROAMING\n* OTP",
              "example": "MEMBERSHIP"
            },
            "discountRate": {
              "title": "Discount rate",
              "type": "number",
              "example": 12
            },
            "costFactor": {
              "title": "Cost factor",
              "type": "number",
              "example": 10
            },
            "appearanceOrder": {
              "title": "Appearance order",
              "type": "integer",
              "format": "int32",
              "example": 34
            },
            "minCommitmentInMonths": {
              "title": "Minimum commitment months",
              "type": "integer",
              "format": "int32",
              "example": 6
            },
            "etf": {
              "title": "Early termination fee",
              "type": "number",
              "example": 10
            },
            "terminationBehavior": {
              "title": "Termination behavior",
              "type": "string",
              "description": "\n* Specifies the termination behaviour\n* TERMINATE\n* EVERGREEN\n* ROLLOVER",
              "example": "ROLLOVER"
            },
            "rolloverPlanId": {
              "title": "Rollover plan id",
              "type": "integer",
              "format": "int64",
              "example": 21
            },
            "waiveRolloverPlanSetupFee": {
              "title": "Waive rollover plan setup fee",
              "type": "boolean",
              "example": false
            },
            "rolloverSwitchDate": {
              "title": "Rollover date (when the setting Plan will be switch to rollover plan) in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2022-10-15T12:21:06-07:00"
            },
            "resetEtfOnRollover": {
              "title": "Reset early termination fee on rollover",
              "type": "boolean",
              "example": false
            },
            "active": {
              "title": "Active",
              "type": "boolean",
              "example": false
            },
            "showOnRegistration": {
              "title": "Show on registration",
              "type": "boolean",
              "example": false
            },
            "displayOnly": {
              "title": "Display only",
              "type": "boolean",
              "example": false
            },
            "showExistingCardInputOnRegistration": {
              "title": "Show existing card input on registration",
              "type": "boolean",
              "example": false
            },
            "requireExistingCardInput": {
              "title": "Require existing card input",
              "type": "boolean",
              "example": false
            },
            "showExistingVehicleInputOnRegistration": {
              "title": "Show existing vehicle input on registration",
              "type": "boolean",
              "example": false
            },
            "requireExistingVehicleInput": {
              "title": "Require existing vehicle input",
              "type": "boolean",
              "example": false
            },
            "licenseNumberLabelKeySuffix": {
              "title": "License number labelKeySuffix",
              "type": "string",
              "example": "label key"
            },
            "showInFilterList": {
              "title": "Show in filter list",
              "type": "boolean",
              "example": false
            },
            "excludeFromDefaultPlanFilter": {
              "title": "Exclude from default plan filter",
              "type": "boolean",
              "example": false
            },
            "hiddenFromDriver": {
              "title": "Hidden from driver",
              "type": "boolean",
              "example": false
            },
            "includeInQaReport": {
              "title": "Include in qa report",
              "type": "boolean",
              "example": false
            },
            "allowSelectionWithoutPaymentMethod": {
              "title": "Allow selection without payment method",
              "type": "boolean",
              "example": false
            },
            "disableSmartCharging": {
              "title": "Disable smart charging",
              "type": "boolean",
              "example": false
            },
            "allowDisableSmartCharging": {
              "title": "Allow disable smart charging",
              "type": "boolean",
              "example": false
            },
            "trackAnalytics": {
              "title": "Track analytics",
              "type": "boolean",
              "example": false
            },
            "allowRoaming": {
              "title": "Allow roaming",
              "type": "boolean",
              "example": false
            },
            "requireVin": {
              "title": "Require VIN",
              "type": "boolean",
              "example": false
            },
            "vinOemId": {
              "title": "VIN OEM ID",
              "type": "integer",
              "format": "int64",
              "example": 48
            },
            "showVinInputToDriver": {
              "title": "Show VIN input to driver",
              "type": "boolean",
              "example": false
            },
            "useVinSalesDateForContractEndDate": {
              "title": "Use VIN sales date for contract end date",
              "type": "boolean",
              "example": false
            },
            "cardBrandId": {
              "title": "Card brand id",
              "type": "integer",
              "format": "int64",
              "example": 44
            },
            "cardBrandName": {
              "title": "Card brand name",
              "type": "string",
              "example": "Meir Ron"
            },
            "cardExternalOemId": {
              "title": "Card external OEM id",
              "type": "integer",
              "format": "int64",
              "example": 24
            },
            "cardExternalOemName": {
              "title": "Card external OEM name",
              "type": "string",
              "example": "John Smith"
            },
            "requireChargeLocationAssignment": {
              "title": "Require charge location assignment",
              "type": "boolean",
              "example": false
            },
            "financialCode": {
              "title": "Financial plan code",
              "type": "string",
              "example": "SUB_OTG"
            },
            "codeForExternalInterfaces": {
              "title": "Code for external interfaces",
              "type": "string",
              "example": "code"
            },
            "energyManagementPriority": {
              "title": "Energy management priority",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "fixedInitialPaymentAmount": {
              "title": "Fixed initial payment amount",
              "type": "number",
              "example": 85
            },
            "allowReserveNow": {
              "title": "Allow reserve now",
              "type": "boolean",
              "example": false
            },
            "allowReserveByDate": {
              "title": "Allow reserve by date",
              "type": "boolean",
              "example": false
            },
            "excludeFromHostPayment": {
              "title": "Exclude from host payment",
              "type": "boolean",
              "example": false
            },
            "planDuration": {
              "title": "Plan duration",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrency"
            }
          }
        },
        "PlanProfileResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerPlanProfile"
              }
            }
          }
        },
        "PlanProductCreate": {
          "required": [
            "creditRecurrence",
            "freeUnits",
            "price",
            "productType"
          ],
          "type": "object",
          "properties": {
            "productType": {
              "title": "Product type",
              "pattern": "(RFID_CARD_PURCHASE|SETUP_FEE|SUBSCRIPTION_FEE|MONTHLY_USAGE_CREDIT)",
              "type": "string",
              "description": "Specifies product type\n* RFID_CARD_PURCHASE\n* SETUP_FEE\n* SUBSCRIPTION_FEE\n* MONTHLY_USAGE_CREDIT",
              "example": "RFID_CARD_PURCHASE"
            },
            "price": {
              "title": "Price",
              "type": "number",
              "example": 30
            },
            "creditRecurrence": {
              "title": "Credit recurrence",
              "pattern": "(ONE_TIME|MONTHLY|ANNUALLY|EVERY_USAGE|ROLLOVER|EXPIRED)",
              "type": "string",
              "description": "Specifies credit recurrence\n* ONE_TIME\n* MONTHLY\n* ANNUALLY\n* EVERY_USAGE\n* ROLLOVER\n* EXPIRED",
              "example": "MONTHLY"
            },
            "freeUnits": {
              "title": "Free units",
              "type": "number",
              "example": 10
            }
          },
          "description": "Plan product create object"
        },
        "CustomerPlanProduct": {
          "title": "Products details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Product id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "productType": {
              "title": "Product type",
              "type": "string",
              "description": "Specifies product type\n* RFID_CARD_PURCHASE\n* SETUP_FEE\n* PAYMENT_RECEIVED\n* REFUND_PAID\n* TRANSACTION_FEE\n* ENERGY_FEE\n* HOURLY_FEE\n* RESERVATION_FEE\n* RESERVATION_PENALTY_FEE\n* CURRENCY_CONVERSION_FEE\n* STANDARD_SOCKET_CHARGE_TRANSACTION_FEE\n* FAST_SOCKET_CHARGE_TRANSACTION_FEE\n* STANDARD_SOCKET_MONTHLY_SERVICE_FEE\n* FAST_SOCKET_MONTHLY_SERVICE_FEE\n* PAYOUT\n* ANNUAL_STATION_HOST_FEE\n* MONTHLY_STATION_HOST_FEE\n* SUBSCRIPTION_FEE\n* AUTHORIZATION_FEE\n* OVERTIME_PENALTY_FEE\n* EARLY_TERMINATION_FEE\n* ENERGY_REIMBURSEMENT_PER_KWH\n* NOT_IN_USE_STATION_OWNER_PLUG_HOUR_FEE\n* DISCONNECTION_FEE\n* LATE_PAYMENT_FEE\n* NOT_IN_USE_DEBIT\n* DEBIT_PAYMENT\n* LATE_FEE_ADJUSTMENT\n* MINUTE_FEE\n* CREDIT_ON_ACCOUNT\n* DEBIT_ON_ACCOUNT\n* NOT_IN_USE_PAYMENT\n* LICENSE_FEE\n* POWER_PAYMENT\n* ENERGY_PAYMENT\n* SERVICE_FEE\n* DISCONNECT_FEE_ADJUSTMENT\n* STANDARD_SOCKET_CHARGE_TRANSACTION_KWH_FEE\n* FAST_SOCKET_CHARGE_TRANSACTION_KWH_FEE\n* ACH_PAYMENT_TO_CUSTOMER\n* CHECK_PAYMENT_TO_CUSTOMER\n* CHECK_PAYMENT_TO_HOST\n* ACH_PAYMENT_TO_HOST\n* CARD_PAYMENT_TO_CUSTOMER\n* CARD_PAYMENT_TO_HOST\n* ACH_PAYMENT\n* CHECK_PAYMENT\n* CARD_PAYMENT\n* PLUG_TIME_HOURLY_FEE\n* PLUG_TIME_MINUTE_FEE\n* REVERSE_TRANSACTION_FEE\n* REVERSE_ENERGY_FEE\n* REVERSE_HOURLY_FEE\n* REVERSE_STANDARD_SOCKET_CHARGE_TRANSACTION_FEE\n* REVERSE_FAST_SOCKET_CHARGE_TRANSACTION_FEE\n* REVERSE_AUTHORIZATION_FEE\n* REVERSE_MINUTE_FEE\n* REVERSE_STANDARD_SOCKET_CHARGE_TRANSACTION_KWH_FEE\n* REVERSE_FAST_SOCKET_CHARGE_TRANSACTION_KWH_FEE\n* REVERSE_PLUG_TIME_HOURLY_FEE\n* REVERSE_PLUG_TIME_MINUTE_FEE\n* CREDIT_ON_ACCOUNT_WITH_TAX\n* DEBIT_ON_ACCOUNT_WITH_TAX\n* OUTSTANDING_ACCOUNT_ACTIVITY\n* REVERSE_RFID_CARD_PURCHASE\n* REVERSE_SETUP_FEE\n* REVERSE_PAYMENT_RECEIVED\n* REVERSE_REFUND_PAID\n* REVERSE_RESERVATION_FEE\n* REVERSE_RESERVATION_PENALTY_FEE\n* REVERSE_CURRENCY_CONVERSION_FEE\n* REVERSE_STANDARD_SOCKET_MONTHLY_SERVICE_FEE\n* REVERSE_FAST_SOCKET_MONTHLY_SERVICE_FEE\n* REVERSE_PAYOUT\n* REVERSE_ANNUAL_STATION_HOST_FEE\n* REVERSE_MONTHLY_STATION_HOST_FEE\n* REVERSE_SUBSCRIPTION_FEE\n* REVERSE_OVERTIME_PENALTY_FEE\n* REVERSE_EARLY_TERMINATION_FEE\n* REVERSE_ENERGY_REIMBURSEMENT_PER_KWH\n* REVERSE_DISCONNECTION_FEE\n* REVERSE_LATE_PAYMENT_FEE\n* REVERSE_DEBIT_PAYMENT\n* REVERSE_LATE_FEE_ADJUSTMENT\n* REVERSE_CREDIT_ON_ACCOUNT\n* REVERSE_DEBIT_ON_ACCOUNT\n* REVERSE_LICENSE_FEE\n* REVERSE_POWER_PAYMENT\n* REVERSE_ENERGY_PAYMENT\n* REVERSE_SERVICE_FEE\n* REVERSE_DISCONNECT_FEE_ADJUSTMENT\n* REVERSE_ACH_PAYMENT_TO_CUSTOMER\n* REVERSE_CHECK_PAYMENT_TO_CUSTOMER\n* REVERSE_CHECK_PAYMENT_TO_HOST\n* REVERSE_ACH_PAYMENT_TO_HOST\n* REVERSE_CARD_PAYMENT_TO_CUSTOMER\n* REVERSE_CARD_PAYMENT_TO_HOST\n* REVERSE_ACH_PAYMENT\n* REVERSE_CHECK_PAYMENT\n* REVERSE_CARD_PAYMENT\n* REVERSE_CREDIT_ON_ACCOUNT_WITH_TAX\n* REVERSE_DEBIT_ON_ACCOUNT_WITH_TAX\n* REVERSE_OUTSTANDING_ACCOUNT_ACTIVITY\n* SUBSCRIPTION_REV_SHARE\n* REVERSE_SUBSCRIPTION_REV_SHARE\n* MONTHLY_USAGE_CREDIT\n* NON_ACCOUNT_TRANSACTION_FEE\n* NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_FEE\n* NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_FEE\n* NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_KWH_FEE\n* NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_KWH_FEE\n* RESERVATION_CHANGE_FEE\n* REVERSE_MONTHLY_USAGE_CREDIT\n* REVERSE_NON_ACCOUNT_TRANSACTION_FEE\n* REVERSE_NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_FEE\n* REVERSE_NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_FEE\n* REVERSE_NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_KWH_FEE\n* REVERSE_NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_KWH_FEE\n* REVERSE_RESERVATION_CHANGE_FEE\n* AD_HOC_USAGE_CREDIT\n* RESERVATION_CANCELLATION_FEE\n* REVERSE_RESERVATION_CANCELLATION_FEE\n* FUTURE_RESERVATION_FEE\n* FUTURE_RESERVATION_CANCELLATION_FEE\n* REVERSE_FUTURE_RESERVATION_FEE\n* REVERSE_FUTURE_RESERVATION_CANCELLATION_FEE\n* FUTURE_RESERVATION_PENALTY_FEE\n* REVERSE_FUTURE_RESERVATION_PENALTY_FEE\n* DEBIT_CHARGING_TRANSACTION\n* REVERSE_DEBIT_CHARGING_TRANSACTION\n* CREDIT_CHARGING_TRANSACTION\n* REVERSE_CREDIT_CHARGING_TRANSACTION\n* PENALTY\n* REVERSE_PENALTY\n* TRANSACTION_FEE_DISCOUNT\n* REVERSE_TRANSACTION_FEE_DISCOUNT\n* RESERVATION_FEE_DISCOUNT\n* REVERSE_RESERVATION_FEE_DISCOUNT\n* SETUP_FEE_DISCOUNT\n* REVERSE_SETUP_FEE_DISCOUNT\n* SUBSCRIPTION_FEE_DISCOUNT\n* REVERSE_SUBSCRIPTION_FEE_DISCOUNT\n* RFID_CARD_PURCHASE_DISCOUNT\n* REVERSE_RFID_CARD_PURCHASE_DISCOUNT\n* OVERTIME_PENALTY_FEE_DISCOUNT\n* REVERSE_OVERTIME_PENALTY_FEE_DISCOUNT\n* FUTURE_RESERVATION_FEE_DISCOUNT\n* REVERSE_FUTURE_RESERVATION_FEE_DISCOUNT\n* RESERVATION_CANCELLATION_FEE_DISCOUNT\n* REVERSE_RESERVATION_CANCELLATION_FEE_DISCOUNT\n* FUTURE_RESERVATION_CANCELLATION_FEE_DISCOUNT\n* REVERSE_FUTURE_RESERVATION_CANCELLATION_FEE_DISCOUNT\n* RESERVATION_PENALTY_FEE_DISCOUNT\n* REVERSE_RESERVATION_PENALTY_FEE_DISCOUNT\n* FUTURE_RESERVATION_PENALTY_FEE_DISCOUNT\n* REVERSE_FUTURE_RESERVATION_PENALTY_FEE_DISCOUNT",
              "example": "ENERGY_FEE"
            },
            "price": {
              "title": "Price",
              "type": "number",
              "example": 30
            },
            "creditRecurrence": {
              "title": "Credit recurrence",
              "type": "string",
              "description": "Specifies payment terms\n* ONE_TIME\n* MONTHLY\n* ANNUALLY\n* EVERY_USAGE\n* ROLLOVER\n* EXPIRED",
              "example": "MONTHLY"
            },
            "freeUnits": {
              "title": "Free units",
              "type": "number",
              "example": 10
            },
            "monthlyUsageCredit": {
              "title": "Monthly usage credit",
              "type": "number",
              "example": 50
            }
          }
        },
        "CustomerPlanProducts": {
          "required": [
            "code"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 452
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrency"
            },
            "products": {
              "title": "Products details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerPlanProduct"
              }
            }
          }
        },
        "PlanProductsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerPlanProducts"
              }
            }
          }
        },
        "PlanProfileFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "codes": {
              "title": "Collection of codes",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "Free",
                "Immediate"
              ],
              "items": {
                "title": "Collection of codes",
                "type": "string",
                "example": "[\"Free\",\"Immediate\"]"
              }
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrencyPair"
            },
            "balanceType": {
              "title": "Balance type",
              "pattern": "(PRE_PAID|POST_PAID|NON_PAYING|PAYMENT_IMMEDIATELY|POST_PAID_IMMEDIATELY)",
              "type": "string",
              "description": "\n* Specifies the balance type\n* PRE_PAID\n* POST_PAID\n* NON_PAYING\n* PAYMENT_IMMEDIATELY\n* POST_PAID_IMMEDIATELY",
              "example": "POST_PAID",
              "enum": [
                "PRE_PAID",
                "POST_PAID",
                "NON_PAYING",
                "POST_PAID_IMMEDIATELY"
              ]
            },
            "active": {
              "title": "Active",
              "type": "boolean",
              "example": true
            },
            "showOnRegistration": {
              "title": "Show on registration",
              "type": "boolean",
              "example": true
            },
            "hiddenFromDriver": {
              "title": "Hidden from driver",
              "type": "boolean",
              "example": true
            }
          },
          "description": "Filter object to be used for searching"
        },
        "CustomerCreate": {
          "required": [
            "accountType",
            "activationMode",
            "billingAddress",
            "countryCurrencyId",
            "email",
            "firstName",
            "lastName",
            "password",
            "shippingAddress",
            "termsAndConditionsConsent"
          ],
          "type": "object",
          "properties": {
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 36
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "password": {
              "title": "User's password",
              "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!]).{8,}$",
              "type": "string",
              "description": "Password must contain:\n* at least 8 characters\n* at least one digit\n* at least one lower case letter\n* at least one upper case letter\n* at least one special character",
              "example": "Ax1B3sc!"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "mobile": {
              "title": "Mobile phone number",
              "pattern": "^.*[0-9].*$",
              "type": "string",
              "example": "+972541234568"
            },
            "accountType": {
              "title": "Account type",
              "pattern": "(CORPORATE|PRIVATE|FLEET)",
              "type": "string",
              "description": "\n* Specifies the account type\n* CORPORATE\n* PRIVATE\n* FLEET",
              "example": "PRIVATE",
              "enum": [
                "CORPORATE",
                "PRIVATE",
                "FLEET"
              ]
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "scope": {
              "title": "Scope",
              "type": "string",
              "example": "Scope"
            },
            "gender": {
              "title": "Gender",
              "pattern": "(MALE|FEMALE|OTHER|NOT_SPECIFIED)",
              "type": "string",
              "example": "FEMALE",
              "enum": [
                "MALE",
                "FEMALE",
                "OTHER",
                "NOT_SPECIFIED"
              ]
            },
            "billingAddress": {
              "$ref": "#/components/schemas/AddressCreate"
            },
            "shippingAddress": {
              "$ref": "#/components/schemas/AddressCreate"
            },
            "termsAndConditionsConsent": {
              "title": "Consent of terms, conditions, and privacy policy",
              "type": "boolean",
              "example": true
            },
            "profilingConsent": {
              "title": "Profiling consent",
              "type": "boolean",
              "example": true
            },
            "activationMode": {
              "title": "Activation mode",
              "pattern": "(REGISTERED|ACTIVE)",
              "type": "string",
              "example": "ACTIVE",
              "enum": [
                "REGISTERED",
                "ACTIVE"
              ]
            },
            "countryCurrencyId": {
              "title": "Country currency Id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "anniversaryDay": {
              "title": "Anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 10
            }
          },
          "description": "Customer create object"
        },
        "B2B": {
          "title": "B2B details",
          "type": "object",
          "properties": {
            "taxNumber": {
              "title": "Tax number",
              "type": "string",
              "example": "24"
            },
            "vatNumber": {
              "title": "VAT number",
              "type": "string",
              "example": "24"
            },
            "identificationNumber": {
              "title": "Identification number",
              "type": "string",
              "example": "24"
            },
            "taxOffice": {
              "title": "Tax office",
              "type": "string"
            },
            "profession": {
              "title": "Profession",
              "type": "string",
              "example": "Doctor"
            },
            "customerName": {
              "title": "Customer name",
              "type": "string",
              "example": "John Doe"
            }
          }
        },
        "CustomerAccount": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 45671
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "gender": {
              "title": "Gender",
              "type": "string",
              "description": "\n* Specifies the gender\n* FEMALE\n* MALE\n* OTHER",
              "example": "FEMALE"
            },
            "accountType": {
              "title": "Account type",
              "type": "string",
              "description": "\n* Specifies the account type\n* CORPORATE\n* PRIVATE\n* FLEET\n* TEST\n* EXTERNAL_PAYMENT_USER\n* EMSP",
              "example": "PRIVATE"
            },
            "status": {
              "title": "User status",
              "type": "string",
              "description": "\n* Specifies the user's status\n* REGISTERED\n* ACTIVE\n* SUSPENDED\n* INVITED\n* CLOSED_DELINQUENCY\n* SUSPENDED_DELINQUENCY\n* CLOSED\n* CLOSED_CUSTOMER_REQUEST",
              "example": "ACTIVE"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "John.doe@mail.com"
            },
            "mobilePhone": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "groupName": {
              "title": "Group name",
              "type": "string",
              "example": "my group"
            },
            "shippingAddress": {
              "$ref": "#/components/schemas/Address"
            },
            "billingAddress": {
              "$ref": "#/components/schemas/Address"
            },
            "b2b": {
              "$ref": "#/components/schemas/B2B"
            }
          }
        },
        "CustomerAccountResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerAccount"
              }
            }
          }
        },
        "MemberCreate": {
          "required": [
            "activationMode",
            "email",
            "firstName",
            "lastName",
            "password",
            "role"
          ],
          "type": "object",
          "properties": {
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "password": {
              "title": "User's password",
              "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=!]).{8,}$",
              "type": "string",
              "description": "Password must contain:\n* at least 8 characters\n* at least one digit\n* at least one lower case letter\n* at least one upper case letter\n* at least one special character",
              "example": "Ax1B3sc!"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "role": {
              "title": "Role",
              "pattern": "(MEMBER|FLEET_MANAGER)",
              "type": "string",
              "example": "MEMBER",
              "enum": [
                "MEMBER",
                "FLEET_MANAGER"
              ]
            },
            "groupName": {
              "title": "Group name",
              "type": "string",
              "example": "group alpha"
            },
            "activationMode": {
              "title": "Activation mode",
              "pattern": "(AUTO_ACTIVATE|INVITE|INHERIT)",
              "type": "string",
              "example": "INVITE",
              "enum": [
                "AUTO_ACTIVATE",
                "INVITE",
                "INHERIT"
              ]
            }
          },
          "description": "Member create object"
        },
        "Member": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "accountType": {
              "title": "Account type",
              "type": "string",
              "description": "\n* Specifies the account type\n* CORPORATE\n* PRIVATE\n* FLEET\n* TEST\n* EXTERNAL_PAYMENT_USER\n* EMSP",
              "example": "PRIVATE"
            },
            "memberRole": {
              "title": "Member role",
              "type": "string",
              "description": "\n* Specifies the member role\n* MEMBER",
              "example": "MEMBER"
            },
            "status": {
              "title": "User status",
              "type": "string",
              "description": "\n* Specifies the user's status\n* REGISTERED\n* ACTIVE\n* SUSPENDED\n* INVITED\n* CLOSED_DELINQUENCY\n* SUSPENDED_DELINQUENCY\n* CLOSED\n* CLOSED_CUSTOMER_REQUEST",
              "example": "ACTIVE"
            },
            "payingCustomerId": {
              "title": "Paying customer id",
              "type": "integer",
              "format": "int64",
              "example": 87912
            },
            "payingAccountNumber": {
              "title": "Paying customer account number",
              "type": "integer",
              "format": "int32",
              "example": 219435
            },
            "profilePicture": {
              "title": "Profile picture",
              "type": "string",
              "example": "13876149.png"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "John.doe@mail.com"
            },
            "mobilePhone": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "phoneNumber": {
              "title": "Phone number",
              "type": "string",
              "example": "+97239220847"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 45671
            },
            "userAcceptedTermsAndConditions": {
              "title": "User accepted terms and conditions",
              "type": "boolean",
              "example": true
            },
            "userAcceptedProfiling": {
              "title": "User accepted profiling",
              "type": "boolean",
              "example": true
            },
            "subscribeToEmailUpdates": {
              "title": "Subscribe to email updates",
              "type": "boolean",
              "example": true
            },
            "groupName": {
              "title": "Group name",
              "type": "string",
              "example": "my group"
            },
            "b2bAccountType": {
              "title": "B2b account type",
              "type": "boolean",
              "example": false
            },
            "shippingAddress": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "MemberResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Member"
              }
            }
          }
        },
        "MemberFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                61035,
                61038
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "payingAccountNumber": {
              "title": "Paying account number",
              "type": "integer",
              "format": "int32",
              "example": 146639
            }
          },
          "description": "Filter object to be used for searching"
        },
        "CustomerFilter": {
          "type": "object",
          "properties": {
            "payingAccountNumbers": {
              "title": "Paying account numbers",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                146639,
                123445
              ],
              "items": {
                "title": "Paying account numbers",
                "type": "integer",
                "format": "int32"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "customer-external-id"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "CountryCurrencyFilter": {
          "type": "object",
          "properties": {
            "countryCode": {
              "title": "Country code",
              "type": "string",
              "example": "HUN"
            },
            "currency": {
              "title": "Currency type",
              "type": "string",
              "example": "HUF"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "CountryCurrencyResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CountryCurrency"
              }
            }
          }
        },
        "ContactPersonCreate": {
          "required": [
            "billingAddress",
            "email",
            "firstName",
            "lastName",
            "shippingAddress"
          ],
          "type": "object",
          "properties": {
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "mobilePhoneNumber": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "shippingAddress": {
              "$ref": "#/components/schemas/AddressCreate"
            },
            "billingAddress": {
              "$ref": "#/components/schemas/AddressCreate"
            }
          },
          "description": "Contact person create object"
        },
        "ContactPersonResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactPerson"
              }
            }
          }
        },
        "ContactPersonFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "email": {
              "title": "Email address",
              "type": "string",
              "example": "john.doe@driivz.com"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ConfigurationFilter": {
          "type": "object",
          "properties": {
            "names": {
              "title": "Collection of param names",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "paramName1",
                "paramName2"
              ],
              "items": {
                "title": "Collection of param names",
                "type": "string",
                "example": "[\"paramName1\",\"paramName2\"]"
              }
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Configuration": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 2426
            },
            "name": {
              "title": "Name",
              "type": "string",
              "example": "exampleConfiguration"
            },
            "value": {
              "title": "Value",
              "type": "string",
              "example": "true"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Example description"
            },
            "allowedUserOperation": {
              "title": "Allowed user operations",
              "type": "string",
              "description": "Specifies allowed user operations\n* READ\n* WRITE",
              "example": "READ"
            }
          }
        },
        "ConfigurationResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Configuration"
              }
            }
          }
        },
        "CompanyFilter": {
          "type": "object",
          "properties": {
            "types": {
              "title": "Collection of company types",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "INSTALLER",
                "MANUFACTURER"
              ],
              "items": {
                "title": "Collection of company types",
                "type": "string",
                "example": "[\"INSTALLER\",\"MANUFACTURER\"]",
                "enum": [
                  "UNKNOWN",
                  "INSTALLER",
                  "MANUFACTURER",
                  "STATION_HOST",
                  "PROPERTY_OWNER",
                  "UTILITY_COMPANY",
                  "RFID_CARD_SUPPLIER",
                  "WIRELESS_CARRIER",
                  "SERVICE_PROVIDER",
                  "SERVICE_COMPANY",
                  "OEM",
                  "PROPERTY_OWNER_FREEDOM_STATION",
                  "BUILDING_OWNER",
                  "BUILDING_OWNER_FREEDOM_STATION",
                  "CONTRACTOR",
                  "EV_DRIVER",
                  "RETAIL_PROPERTY",
                  "TENANT",
                  "AUTO_DEALERSHIP"
                ]
              },
              "enum": [
                "UNKNOWN",
                "INSTALLER",
                "MANUFACTURER",
                "STATION_HOST",
                "PROPERTY_OWNER",
                "UTILITY_COMPANY",
                "RFID_CARD_SUPPLIER",
                "WIRELESS_CARRIER",
                "SERVICE_PROVIDER",
                "SERVICE_COMPANY",
                "OEM",
                "PROPERTY_OWNER_FREEDOM_STATION",
                "BUILDING_OWNER",
                "BUILDING_OWNER_FREEDOM_STATION",
                "CONTRACTOR",
                "EV_DRIVER",
                "RETAIL_PROPERTY",
                "TENANT",
                "AUTO_DEALERSHIP"
              ]
            },
            "countryCode": {
              "title": "Country code",
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "example": "ISR"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerCreate": {
          "required": [
            "accessLevel",
            "caption",
            "chargerHostId",
            "identityKey",
            "infrastructureCompanyId",
            "modelId",
            "serialNumber",
            "siteId"
          ],
          "type": "object",
          "properties": {
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 299
            },
            "identityKey": {
              "title": "Identity key",
              "maxLength": 255,
              "minLength": 2,
              "type": "string",
              "example": "XACABBT53-HU1-0716-023"
            },
            "externalId": {
              "title": "External id",
              "maxLength": 50,
              "minLength": 2,
              "type": "string",
              "example": "a1d2f"
            },
            "description": {
              "title": "Description",
              "maxLength": 2000,
              "minLength": 1,
              "type": "string",
              "example": "description"
            },
            "caption": {
              "title": "Caption",
              "maxLength": 255,
              "minLength": 2,
              "type": "string",
              "example": "GMPT5116DC1"
            },
            "infrastructureCompanyId": {
              "title": "Infrastructure company id",
              "type": "integer",
              "format": "int64",
              "example": 237
            },
            "accessLevel": {
              "title": "Access level",
              "pattern": "(USE_SITE|PUBLIC|PRIVATE|TAXI_ONLY)",
              "type": "string",
              "example": "PUBLIC",
              "enum": [
                "USE_SITE",
                "PUBLIC",
                "PRIVATE",
                "TAXI_ONLY"
              ]
            },
            "modelId": {
              "title": "Model id",
              "type": "integer",
              "format": "int64",
              "example": 4
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 36
            },
            "serialNumber": {
              "title": "Serial number",
              "maxLength": 45,
              "minLength": 0,
              "type": "string",
              "example": "NSQC442E-002077"
            }
          },
          "description": "Charger create object"
        },
        "Charger": {
          "required": [
            "modelId"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "identityKey": {
              "title": "Identity key",
              "type": "string",
              "example": "S0000000009"
            },
            "caption": {
              "title": "Caption",
              "type": "string",
              "example": "NCAN177DC1"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Charger description"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 673234
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "infrastructureCompanyId": {
              "title": "Infrastructure company id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "accessLevel": {
              "title": "Access level",
              "type": "string",
              "description": "\n* Specifies the access type\n* USE_SITE\n* PUBLIC\n* PRIVATE\n* TAXI_ONLY",
              "example": "PUBLIC"
            },
            "modelId": {
              "title": "Model id",
              "type": "integer",
              "format": "int64",
              "example": 4
            },
            "protocolId": {
              "title": "Charger model protocol id",
              "type": "integer",
              "format": "int64",
              "example": 5
            },
            "provisionStatus": {
              "title": "Provision status",
              "type": "string",
              "description": "\n* Specifies the provision process status\n* ORDERED\n* IN_STOCK\n* READY_FOR_INSTALLATION\n* INSTALLED\n* CONNECTED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* IN_CONSTRUCTION\n* IN_INSTALLATION",
              "example": "ORDERED"
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": 44.213152
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": -72.576177
            },
            "status": {
              "title": "Status",
              "type": "string",
              "example": "UNKNOWN"
            },
            "utilityCompanyId": {
              "title": "Utility company id",
              "type": "integer",
              "format": "int64",
              "example": 259
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "authenticationMethods": {
              "title": "Authentication methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies the authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": "SMS",
              "items": {
                "title": "Authentication methods",
                "type": "string",
                "description": "\n* Specifies the authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                "example": "SMS"
              }
            },
            "paymentMethods": {
              "title": "Payment methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies the payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
              "example": "PARK_AND_CHARGE",
              "items": {
                "title": "Payment methods",
                "type": "string",
                "description": "\n* Specifies the payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                "example": "PARK_AND_CHARGE"
              }
            },
            "chargingSpeed": {
              "title": "Charge speed",
              "type": "string",
              "description": "\n* Specifies the charge speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
              "example": "FAST"
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "evses": {
              "title": "Evses details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Evse"
              }
            }
          }
        },
        "ChargerResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Charger"
              }
            }
          }
        },
        "Evse": {
          "title": "Evses",
          "type": "object",
          "properties": {
            "identityKey": {
              "title": "Identity key",
              "type": "string",
              "example": "2"
            },
            "id": {
              "title": "Id",
              "type": "string",
              "example": "US*XDC*E10*10"
            },
            "connectors": {
              "title": "Connectors details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Connector"
              }
            }
          }
        },
        "RawOperation": {
          "type": "object",
          "properties": {
            "response": {
              "title": "Response message",
              "type": "string",
              "example": "{\"status\":\"Accepted\"}"
            }
          }
        },
        "RawOperationResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RawOperation"
              }
            }
          }
        },
        "ChargerStatusFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "siteIds": {
              "title": "Collection of site ids",
              "maxItems": 10,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of site ids",
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerStatus": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "chargerStatus": {
              "title": "Charger status type",
              "type": "string",
              "description": "\n* Specifies the charger status types\n* AVAILABLE\n* OCCUPIED\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* IN_PROVISION\n* CHARGING\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
              "example": "AVAILABLE"
            },
            "temperatureScale": {
              "title": "Temperature scale",
              "type": "string",
              "description": "\n* Specifies the temperature scale types\n* CELSIUS\n* FAHRENHEIT",
              "example": "CELSIUS"
            },
            "errorCode": {
              "title": "Error code",
              "type": "string",
              "description": "\n* Specifies the error code\n* OTHER_ERROR\n* CONNECTOR_LOCK_FAILURE\n* HIGH_TEMPERATURE\n* MODE_3_ERROR\n* NO_ERROR\n* POWER_METER_FAILURE\n* POWER_SWITCH_FAILURE\n* READER_FAILURE\n* EV_COMMUNICATION_ERROR\n* GROUND_FAILURE\n* INTERNAL_ERROR\n* LOCAL_LIST_CONFLICT\n* OVER_CURRENT_FAILURE\n* OVER_VOLTAGE\n* RESET_FAILURE\n* UNDER_VOLTAGE\n* WEAK_SIGNAL",
              "example": "HIGH_TEMPERATURE"
            },
            "provisionStatus": {
              "title": "Provision status",
              "type": "string",
              "description": "\n* Specifies the provision process status\n* ORDERED\n* IN_STOCK\n* READY_FOR_INSTALLATION\n* INSTALLED\n* CONNECTED\n* READY_FOR_PROVISIONING\n* PROVISIONED\n* SCHEDULED_FOR_DECOMMISSIONING\n* DECOMMISSIONED\n* DENETWORKED\n* IN_CONSTRUCTION\n* IN_INSTALLATION",
              "example": "ORDERED"
            },
            "firmwareVersion": {
              "title": "Firmware version",
              "type": "string",
              "example": "1.2.2 (Production)"
            },
            "versionCpu2": {
              "title": "Version cpu 2",
              "type": "string",
              "example": "13"
            },
            "currentTemperature": {
              "title": "Current temperature",
              "type": "number",
              "example": 36.7
            },
            "installationDate": {
              "title": "Installation date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617010000
            },
            "updateStatus": {
              "title": "Update status",
              "type": "string",
              "description": "\n* Specifies the firmware update status\n* INACTIVE\n* PLANNED\n* PENDING\n* DOWNLOADED\n* DOWNLOAD_FAILED\n* INSTALLED\n* INSTALLATION_FAILED\n* REQUEST_TIMED_OUT\n* DOWNLOADING\n* INSTALLING\n* DOWNLOAD_SCHEDULED\n* DOWNLOAD_PAUSED\n* INSTALL_REBOOTING\n* INSTALL_SCHEDULED\n* INSTALL_VERIFICATION_FAILED\n* INVALID_SIGNATURE\n* SIGNATURE_VERIFIED\n* PUBLISH_FAILED",
              "example": "INACTIVE"
            },
            "provisioningDate": {
              "title": "Provisioning date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617010000
            },
            "decommissionDate": {
              "title": "Decommission date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617010000
            },
            "groupIds": {
              "title": "Group ids",
              "uniqueItems": true,
              "type": "array",
              "description": "List of group ids that contains this charger",
              "example": [
                1,
                3,
                5
              ],
              "items": {
                "title": "Group ids",
                "type": "integer",
                "description": "List of group ids that contains this charger",
                "format": "int64"
              }
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 1842
            },
            "evses": {
              "title": "Evses",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Evse"
              }
            }
          }
        },
        "ChargerStatusResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerStatus"
              }
            }
          }
        },
        "ChargerProfileFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerProfile": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "identityKey": {
              "title": "Identity key",
              "type": "string",
              "example": "S0000000009"
            },
            "caption": {
              "title": "Caption",
              "type": "string",
              "example": "NCAN177DC1"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Charger description"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 673234
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "modelId": {
              "title": "Model id",
              "type": "integer",
              "format": "int64",
              "example": 13
            },
            "additionalSerialNumber": {
              "title": "Additional serial number",
              "type": "string",
              "example": "A-12345"
            },
            "contactPersonId": {
              "title": "Contact person id",
              "type": "integer",
              "format": "int64",
              "example": 361345
            },
            "accessLevel": {
              "title": "Access level",
              "type": "string",
              "description": "\n* Specifies the access types\n* USE_SITE\n* PUBLIC\n* PRIVATE\n* TAXI_ONLY",
              "example": "PUBLIC"
            },
            "showIn3rdPartyFilter": {
              "title": "Show in 3rdParty filter",
              "type": "boolean",
              "example": true
            },
            "hidden": {
              "title": "Hidden",
              "type": "boolean",
              "example": true
            },
            "excluded": {
              "title": "Excluded",
              "type": "boolean",
              "example": false
            },
            "disabled": {
              "title": "Disabled",
              "type": "boolean",
              "example": true
            },
            "managed": {
              "title": "Managed",
              "type": "boolean",
              "example": false
            },
            "authenticationMode": {
              "title": "Authentication mode",
              "type": "string",
              "description": "\n* Specifies authentication mode options\n* SERVER_AUTHENTICATION\n* FREE_VEND",
              "example": "SERVER_AUTHENTICATION"
            },
            "authenticationMethods": {
              "title": "Authentication methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies the authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": "SMS",
              "items": {
                "title": "Authentication methods",
                "type": "string",
                "description": "\n* Specifies the authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                "example": "SMS"
              }
            },
            "fundingSource": {
              "title": "Funding source",
              "type": "string",
              "description": "\n* Specifies the funding source options\n* BAAQMD\n* CA_SETTLEMENT\n* CA_SETTLEMENT_RND\n* CEC_2014\n* CEC_2015\n* CEC_2016\n* GREEN_MOUNTAIN_POWER\n* HOST_FUNDED\n* MBARD\n* NEDO\n* NNA_EVA\n* NNA_JMA\n* EVGO_FUNDED\n* SANBAG_2016\n* SCAQMD\n* VW_EA\n* TBD",
              "example": "HOST_FUNDED"
            },
            "paymentMethods": {
              "title": "Payment methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies the payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
              "example": "PARK_AND_CHARGE",
              "items": {
                "title": "Payment methods",
                "type": "string",
                "description": "\n* Specifies the payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                "example": "PARK_AND_CHARGE"
              }
            },
            "ignoreStatusNotifications": {
              "title": "Ignore status notifications",
              "type": "boolean",
              "example": true
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": true
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "\n* Specifies the charger current status\n* AVAILABLE\n* OCCUPIED\n* FAULTED\n* UNAVAILABLE\n* NEW\n* UNKNOWN\n* RESERVED\n* IN_PROVISION\n* CHARGING\n* DISCHARGING\n* PAUSED\n* PREPARING\n* FINISHING",
              "example": "UNAVAILABLE"
            },
            "serialNumber": {
              "title": "Serial number",
              "type": "string",
              "example": "NSQC442E-002077"
            },
            "controllerId": {
              "title": "Controller id",
              "type": "string",
              "example": "S0000000009"
            },
            "erpId": {
              "title": "Erp id",
              "type": "string",
              "example": "12"
            },
            "equipmentId": {
              "title": "Equipment id",
              "type": "string",
              "example": "223"
            },
            "costCenter": {
              "title": "Cost center",
              "type": "string",
              "example": "B-CH"
            },
            "chargingSpeed": {
              "title": "Charge speed",
              "type": "string",
              "description": "\n* Specifies the charge speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
              "example": "FAST"
            },
            "usageStartDate": {
              "title": "Usage start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617010000
            },
            "lastFirmwareUpdateDate": {
              "title": "Last firmware update date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1217010000
            },
            "evses": {
              "title": "Evses",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Evse"
              }
            },
            "infrastructureCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "utilityCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "groupIds": {
              "title": "Group ids",
              "uniqueItems": true,
              "type": "array",
              "description": "List of group ids that contains this charger",
              "example": [
                1,
                3,
                5
              ],
              "items": {
                "title": "Group ids",
                "type": "integer",
                "description": "List of group ids that contains this charger",
                "format": "int64"
              }
            }
          }
        },
        "ChargerProfileResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerProfile"
              }
            }
          }
        },
        "ChargerNetworkFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerNetwork": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "communicationType": {
              "title": "Communication type",
              "type": "string",
              "description": "\n* Specifies the charger communication types\n* THREE_G\n* ADSL\n* WIFI\n* ZIGBEE\n* SECOND_G\n* NONE\n* FOUR_G\n* HSPA\n* LTE\n* EVDO\n* HSPA_PLUS\n* ONE_XRTT\n* UMTS",
              "example": "HOME"
            },
            "macAddress": {
              "title": "Mac address",
              "type": "string",
              "example": "00304426624F"
            },
            "modemSerialNumber": {
              "title": "Modem serial number",
              "type": "string",
              "example": "A-123456"
            },
            "doesNotCommunicate": {
              "title": "Does not communicate",
              "type": "boolean",
              "example": false
            },
            "lastReceivedHeartBeat": {
              "title": "Last received heartbeat signal in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "connectionUri": {
              "title": "Connection URI",
              "type": "string",
              "example": "URI"
            },
            "ipAddress": {
              "title": "IP address",
              "type": "string",
              "example": "147387"
            },
            "dynamicIp": {
              "title": "Dynamic ip",
              "type": "boolean",
              "example": true
            },
            "msisdn": {
              "title": "MSISDN",
              "type": "string",
              "example": "MM160295401275"
            },
            "iccid": {
              "title": "ICCID",
              "type": "string",
              "example": "A-12301275"
            },
            "imsi": {
              "title": "IMSI",
              "type": "string",
              "example": "B-875412"
            },
            "wirelessConnectionCarrierCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "groupIds": {
              "title": "Group ids",
              "uniqueItems": true,
              "type": "array",
              "description": "List of group ids that contains this charger",
              "example": [
                1,
                3,
                5
              ],
              "items": {
                "title": "Group ids",
                "type": "integer",
                "description": "List of group ids that contains this charger",
                "format": "int64"
              }
            }
          }
        },
        "ChargerNetworkResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerNetwork"
              }
            }
          }
        },
        "ChargerMaintenanceFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerMaintenance": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "warrantyType": {
              "title": "Warranty type",
              "type": "string",
              "description": "\n* Specifies the charger warranty types\n* ONE_YEAR\n* TWO_YEAR\n* THREE_YEAR\n* EXTENDED\n* NONE",
              "example": "ONE_YEAR"
            },
            "warrantyStatus": {
              "title": "Warranty status",
              "type": "string",
              "description": "\n* Specifies the charger warranty status\n* ACTIVE\n* EXPIRED\n* EXTENDED",
              "example": "ACTIVE"
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": true
            },
            "inStorage": {
              "title": "In storage",
              "type": "boolean",
              "example": true
            },
            "warrantyNumber": {
              "title": "Warranty number",
              "type": "string",
              "example": "1A"
            },
            "warrantyInvoiceNumber": {
              "title": "Warranty invoice number",
              "type": "string",
              "example": "12"
            },
            "warrantyStartDate": {
              "title": "Warranty start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "warrantyExpirationDate": {
              "title": "Warranty expiration  date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "nextMaintenanceDate": {
              "title": "Next maintenance date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "lastMaintenanceDate": {
              "title": "Last maintenance date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "connectorsInMaintenance": {
              "title": "Amount of connectors in maintenance",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "maintenanceCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "installerCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "comments"
            },
            "markForReplacement": {
              "title": "Mark for replacement",
              "type": "boolean",
              "example": true
            },
            "sla": {
              "title": "Sla",
              "type": "string",
              "description": "\n* Specifies amount of hours\n* UNDEFINED\n* FORTY_EIGHT_HOURS_U\n* TWENTY_FOUR_HOURS_U\n* SEVENTY_TWO_HOURS_U\n* TWO_HOURS_U\n* FOUR_HOURS_U\n* EIGHT_HOURS_U\n* NINETY_SIX_HOURS_U",
              "example": "FORTY_EIGHT_HOURS_U"
            },
            "whitelistUpdateExpiresOn": {
              "title": "White list update expires on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "temperatureScale": {
              "title": "Temperature scale",
              "type": "string",
              "description": "\n* Specifies the temperature scale types\n* CELSIUS\n* FAHRENHEIT",
              "example": "CELSIUS"
            },
            "groupIds": {
              "title": "Group ids",
              "uniqueItems": true,
              "type": "array",
              "description": "List of group ids that contains this charger",
              "example": [
                1,
                3,
                5
              ],
              "items": {
                "title": "Group ids",
                "type": "integer",
                "description": "List of group ids that contains this charger",
                "format": "int64"
              }
            }
          }
        },
        "ChargerMaintenanceResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerMaintenance"
              }
            }
          }
        },
        "ChargerLocationFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerLocation": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "name": {
              "title": "Charger name",
              "type": "string",
              "example": "NCAN176DC1"
            },
            "floor": {
              "title": "Floor level",
              "type": "string",
              "example": "Surface Parking Lot"
            },
            "chargerLocationType": {
              "title": "Location type",
              "type": "string",
              "description": "\n* Specifies the charger location types\n* HOME\n* HOTEL\n* PARKING_LOT\n* MALL\n* HIGHWAY\n* GAS_STATION\n* PUBLIC_PARKING\n* COMMERCIAL\n* DSO\n* GOVERNMENT\n* WORK",
              "example": "HOME"
            },
            "accessDoorStatus": {
              "title": "Access door status",
              "type": "string",
              "description": "\n* Specifies the door status options\n* UNKNOWN\n* OPEN\n* CLOSED",
              "example": "OPEN"
            },
            "imagesUrls": {
              "title": "Images urls",
              "type": "array",
              "example": [
                "pic1",
                "pic2"
              ],
              "items": {
                "title": "Images urls",
                "type": "string",
                "example": "[\"pic1\",\"pic2\"]"
              }
            },
            "restaurantsNearby": {
              "title": "Restaurants nearby",
              "type": "boolean",
              "example": true
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": 44.213152
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": -72.576177
            },
            "vehicleDimensions": {
              "$ref": "#/components/schemas/VehicleDimensions"
            },
            "openingTimes": {
              "title": "Charger time range",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerTimeRange"
              }
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "numberOfPaintedParkingLots": {
              "title": "Number of painted parking lots",
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "poiDetails": {
              "title": "Poi details",
              "type": "string",
              "example": "Point of interest (Shopping mall)"
            },
            "accessData": {
              "title": "Access data",
              "type": "string",
              "example": "24 HOURS"
            },
            "notesForDriver": {
              "title": "Notes for driver",
              "type": "string",
              "example": "Please pay attention to the signs"
            },
            "groupIds": {
              "title": "Group ids",
              "uniqueItems": true,
              "type": "array",
              "description": "List of group ids that contains this charger",
              "example": [
                1,
                3,
                5
              ],
              "items": {
                "title": "Group ids",
                "type": "integer",
                "description": "List of group ids that contains this charger",
                "format": "int64"
              }
            }
          }
        },
        "ChargerLocationResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerLocation"
              }
            }
          }
        },
        "ChargerTimeRange": {
          "title": "Charger time range",
          "type": "object",
          "properties": {
            "dayOfWeek": {
              "title": "Day of week",
              "type": "string",
              "example": "WEDNESDAY"
            },
            "startHour": {
              "title": "Start hour",
              "type": "integer",
              "format": "int32",
              "example": 13
            },
            "startMinute": {
              "title": "Start minute",
              "type": "integer",
              "format": "int32",
              "example": 13
            },
            "endHour": {
              "title": "End hour",
              "type": "integer",
              "format": "int32",
              "example": 16
            },
            "endMinute": {
              "title": "End minute",
              "type": "integer",
              "format": "int32",
              "example": 16
            }
          }
        },
        "VehicleDimensions": {
          "title": "Vehicle dimensions details",
          "type": "object",
          "properties": {
            "maxVehicleHeight": {
              "title": "Max vehicle height",
              "type": "number",
              "example": 2.5
            },
            "maxVehicleWidth": {
              "title": "Max vehicle width",
              "type": "number",
              "example": 1.8
            },
            "maxVehicleLength": {
              "title": "Max vehicle length",
              "type": "number",
              "example": 3.2
            }
          }
        },
        "ChargerElectricalFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerElectrical": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "energySupplierCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "inputPower": {
              "title": "Input power",
              "type": "number",
              "example": 50
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 20
            },
            "meterSigningSupported": {
              "title": "Meter signing supported",
              "type": "boolean",
              "example": true
            },
            "validateMeterSignature": {
              "title": "Validate meter signature",
              "type": "boolean",
              "example": true
            },
            "gridConnectionDescription": {
              "title": "Grid connection description",
              "type": "string",
              "example": "description"
            },
            "serverSideLocalLoadBalancingEnabled": {
              "title": "Is server side local load balancing enabled",
              "type": "boolean",
              "example": true
            },
            "maxBalancePowerKw": {
              "title": "Server side local load balancing max power",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "nextElectricalTestDate": {
              "title": "Next electrical test date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "lastElectricalTestDate": {
              "title": "Last electrical test date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617198326
            },
            "utilityMeterType": {
              "title": "Utility meter type",
              "type": "string",
              "example": "SOFTWARE"
            },
            "assetId": {
              "title": "Asset id",
              "type": "string",
              "example": "LAXN359DC1"
            },
            "groupIds": {
              "title": "Group ids",
              "uniqueItems": true,
              "type": "array",
              "description": "List of group ids that contains this charger",
              "example": [
                1,
                3,
                5
              ],
              "items": {
                "title": "Group ids",
                "type": "integer",
                "description": "List of group ids that contains this charger",
                "format": "int64"
              }
            }
          }
        },
        "ChargerElectricalResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerElectrical"
              }
            }
          }
        },
        "ChargerModelConnectorCreate": {
          "title": "Connector details",
          "required": [
            "chargingMode",
            "connectorNumber",
            "connectorType",
            "evseNumber",
            "maxPowerKw",
            "name",
            "numberOfPhases",
            "ratedVoltage",
            "voltageType"
          ],
          "type": "object",
          "properties": {
            "connectorNumber": {
              "title": "Connector number",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "evseNumber": {
              "title": "EVSE number",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "name": {
              "title": "Generic name",
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "example": "BTC L2"
            },
            "maxPowerKw": {
              "title": "Max power",
              "type": "number",
              "example": 54.2
            },
            "numberOfPhases": {
              "title": "Number of phases",
              "type": "integer",
              "format": "int32",
              "example": 3
            },
            "ratedVoltage": {
              "title": "Connector rated voltage",
              "type": "number",
              "example": 110
            },
            "connectorType": {
              "title": "Connector type",
              "pattern": "(TYPE_2_MENNEKES|TYPE_4_CHADEMO|TYPE_F_SCHUKO_CEE_7_4_GER|TYPE_E_AND_F_CEE_7_5_FRA|TYPE_3_SCAME|TYPE_COMBO_GERMANY|TYPE_K_SECTION_107_2_D1_DEN|TYPE_C_CEE7_16_EU|TYPE_E_CEE_7_5_FRA|TYPE_C_CEE_7_17_GER_FRA|TYPE_L_CEI_23_16_VII_ITA|TYPE_J_SEV_1011_CH|TYPE_D_BS_546_2_PIN_UK|TYPE_D_BS_546_3_PIN_UK|TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK|TYPE_1_J1772_YAZAKI|SAE_J1772_COMBO_US|SAE_J1772_AVCON|TESLA_UNIVERSAL_MOBILE_CONNECTOR|NEMA_1_15P|TYPE_B_NEMA_5_15|TYPE_B_NEMA_5_20|TESLA_R|TESLA_S|TYPE_2_TETHERED)",
              "type": "string",
              "description": "\n* Specifies connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_4_CHADEMO"
            },
            "chargingMode": {
              "title": "Charging mode",
              "pattern": "(LEVEL1|LEVEL2|LEVEL3|MODE1|MODE2|MODE3|MODE4)",
              "type": "string",
              "description": "\n* Specifies charging mode\n* LEVEL1\n* LEVEL2\n* LEVEL3\n* MODE1\n* MODE2\n* MODE3\n* MODE4",
              "example": "LEVEL1"
            },
            "voltageType": {
              "title": "Voltage type",
              "pattern": "(AC|DC)",
              "type": "string",
              "description": "\n* Specifies voltage type\n* AC\n* DC",
              "example": "AC"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "placement": {
              "title": "Placement",
              "pattern": "(NOT_SPECIFIED|LEFT|RIGHT|TOP|BOTTOM|CENTER|OTHER)",
              "type": "string",
              "description": "NOT_SPECIFIED,\nLEFT,\nRIGHT,\nTOP,\nBOTTOM,\nCENTER,\nOTHER",
              "example": "LEFT"
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "hasBuiltInCable": {
              "title": "Has built in cable",
              "type": "boolean",
              "example": true
            },
            "chargingInstructions": {
              "title": "Charging instructions",
              "type": "string",
              "example": "fill in charging instruction"
            },
            "normalCurrentRating": {
              "title": "Normal current rating",
              "type": "number",
              "example": 30.0
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 10.0
            },
            "ratedFrequency": {
              "title": "Rated frequency",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "cableLength": {
              "title": "Cable length",
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "v2gEnabled": {
              "title": "Is V2G enabled",
              "type": "boolean",
              "example": false
            }
          },
          "description": "Charger model connector object"
        },
        "ChargerModelCreate": {
          "required": [
            "connectorCreate",
            "genericName",
            "manufacturerId",
            "maxPowerKw",
            "mountingType",
            "name",
            "protocolCreate",
            "ratedVoltage",
            "sku",
            "temperatureScale"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Charger model name",
              "maxLength": 45,
              "minLength": 0,
              "type": "string",
              "example": "BTC Dual L2"
            },
            "ratedVoltage": {
              "title": "Rated voltage (V)",
              "type": "number",
              "example": 110
            },
            "sku": {
              "title": "Sku",
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "example": "BTC EVC-30 Dual"
            },
            "genericName": {
              "title": "Generic name",
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "example": "BTC L2"
            },
            "maxPowerKw": {
              "title": "Max power (Kw)",
              "type": "number",
              "example": 54.2
            },
            "temperatureScale": {
              "title": "Temperature scale",
              "pattern": "(CELSIUS|FAHRENHEIT)",
              "type": "string",
              "description": "\n* Specifies temperature scale\n* CELSIUS\n* FAHRENHEIT",
              "example": "CELSIUS",
              "enum": [
                "CELSIUS, FAHRENHEIT"
              ]
            },
            "manufacturerId": {
              "title": "Manufacturer Id",
              "type": "integer",
              "format": "int64",
              "example": 24
            },
            "mountingType": {
              "title": "Mounting type",
              "pattern": "(WALL|POLE|BOTH|STAND_ALONE)",
              "type": "string",
              "description": "\n* Specifies mounting type\n* WALL\n* POLE\n* BOTH\n* STAND_ALONE",
              "example": "WALL"
            },
            "authenticationMethods": {
              "title": "Authentication methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": [
                "SMS",
                "CALL"
              ],
              "items": {
                "title": "Authentication methods",
                "type": "string",
                "description": "\n* Specifies authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                "example": "[\"SMS\",\"CALL\"]"
              }
            },
            "paymentMethods": {
              "title": "Payment methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies Payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
              "example": [
                "PARK_AND_CHARGE",
                "FREE"
              ],
              "items": {
                "title": "Payment methods",
                "type": "string",
                "description": "\n* Specifies Payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                "example": "[\"PARK_AND_CHARGE\",\"FREE\"]"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "connectorCreate": {
              "$ref": "#/components/schemas/ChargerModelConnectorCreate"
            },
            "protocolCreate": {
              "$ref": "#/components/schemas/ChargerModelProtocolCreate"
            }
          },
          "description": "Charger model object"
        },
        "ChargerModelProtocolCreate": {
          "title": "Protocol type details",
          "required": [
            "protocolType",
            "softwareConnectorType"
          ],
          "type": "object",
          "properties": {
            "protocolType": {
              "title": "Protocol type",
              "pattern": "(OCPP1_2|OCPP1_5S|NOT_USED_1|SEMA_CONNECT|NOT_USED_3|BCP1_5_1|OCPP1_5J|OCPP1_5PlusS|OCPP1_5PlusJ|OCPP1_6S|OCPP1_6J|OCPP2_0_1J|NOT_USED_4|OCHP_DIRECT|HUBJECT|IAFC)",
              "type": "string",
              "description": "\n* Specifies the protocol type\n* OCPP1_2\n* OCPP1_5S\n* NOT_USED_1\n* SEMA_CONNECT\n* NOT_USED_3\n* BCP1_5_1\n* OCPP1_5J\n* OCPP1_5PlusS\n* OCPP1_5PlusJ\n* OCPP1_6S\n* OCPP1_6J\n* OCPP2_0_1J\n* NOT_USED_4\n* OCHP_DIRECT\n* HUBJECT\n* IAFC",
              "example": "\"SEMA_CONNECT\""
            },
            "softwareConnectorType": {
              "title": "Software connector type",
              "pattern": "(EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4|ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115|ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115|MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123|CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT|NON_MANAGED|EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123|OCPP_12_DEFAULT|MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912|BCP_151_DEFAULT|SEMA_CONNECT_API|DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT|LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT|OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT|EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|OCPP_15_JSON_DEFAULT|OCPP_15_SOAP_SMART_CHARGING_DEFAULT|OCPP_15_JSON_SMART_CHARGING_DEFAULT|CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT|OCPP_16_SOAP_DEFAULT|OCPP_16_JSON_DEFAULT|ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT|OCPP_15_SOAP_METER_SIGN_DEFAULT|OCPP_12_DEFAULT_REVERSE_CARD_NUMBER|CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT|CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT|NISSAN_OCPP15_SOAP_DEFAULT|OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET|OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS|EFACEC_OCPP_15_SOAP_CUSTOMIZED|OCPP_201_JSON_DEFAULT|OCPI|ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT|EFACEC_OCPP_16_JSON_CUSTOMIZED|ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT|OCHP_DIRECT|HUBJECT|IAFC)",
              "type": "string",
              "description": "\n* Specifies the connector type\n* EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4\n* ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115\n* ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115\n* MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123\n* CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT\n* NON_MANAGED\n* EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123\n* OCPP_12_DEFAULT\n* OCPP_15_DEFAULT\n* MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912\n* BCP_151_DEFAULT\n* SEMA_CONNECT_API\n* DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT\n* LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT\n* OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT\n* EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* OCPP_15_JSON_DEFAULT\n* OCPP_15_SOAP_SMART_CHARGING_DEFAULT\n* OCPP_15_JSON_SMART_CHARGING_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT\n* OCPP_16_SOAP_DEFAULT\n* OCPP_16_JSON_DEFAULT\n* ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT\n* OCPP_15_SOAP_METER_SIGN_DEFAULT\n* OCPP_12_DEFAULT_REVERSE_CARD_NUMBER\n* CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT\n* NISSAN_OCPP15_SOAP_DEFAULT\n* OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET\n* OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS\n* EFACEC_OCPP_15_SOAP_CUSTOMIZED\n* OCPP_201_JSON_DEFAULT\n* OCPI\n* ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT\n* EFACEC_OCPP_16_JSON_CUSTOMIZED\n* ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT\n* OCHP_DIRECT\n* HUBJECT\n* IAFC",
              "example": "\"ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115\""
            },
            "firmwareVersion": {
              "title": "Firmware version",
              "maxLength": 45,
              "minLength": 0,
              "type": "string",
              "example": "1.2.5 (Production)"
            }
          },
          "description": "Charger model protocol object"
        },
        "ChargerModel": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger model id",
              "type": "integer",
              "format": "int64",
              "example": 125
            },
            "name": {
              "title": "Charger model name",
              "type": "string",
              "example": "BTC Dual L2"
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "\n* A group of the below types\n* LCC\n* STATION",
              "example": "STATION"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-123"
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 110
            },
            "displayType": {
              "title": "Display type",
              "type": "string",
              "description": "\n* A group of the below authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": "LCD"
            },
            "minTemperature": {
              "title": "Min temperature",
              "type": "number",
              "example": 20
            },
            "maxTemperature": {
              "title": "Max temperature",
              "type": "number",
              "example": 65
            },
            "ratedFrequency": {
              "title": "Rated frequency (in Hz)",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "instructionalVideoUrl": {
              "title": "Instructional video url",
              "type": "string",
              "example": "https://john-smith.driivz.com/album/222222"
            },
            "sku": {
              "title": "Sku",
              "type": "string",
              "example": "BTC EVC-30 Dual"
            },
            "genericName": {
              "title": "Generic name",
              "type": "string",
              "example": "BTC L2"
            },
            "maxCurrent": {
              "title": "Max current (A)",
              "type": "number",
              "example": 10
            },
            "maxPowerKw": {
              "title": "Max power Kw",
              "type": "number",
              "example": 54.2
            },
            "maxChargeTime": {
              "title": "Max charge time",
              "type": "number",
              "example": 120
            },
            "useHeartbeatToDetermineOffline": {
              "title": "Use heartbeat to determine offline",
              "type": "boolean",
              "example": true
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "localLoadBalancingSupported": {
              "title": "Local load balancing supported",
              "type": "boolean",
              "example": true
            },
            "reservable": {
              "title": "Reservable",
              "type": "boolean",
              "example": true
            },
            "reserveAllEvseConnectors": {
              "title": "Reserve all EVSE connectors",
              "type": "boolean",
              "example": true
            },
            "autoChargeEnabled": {
              "title": "Auto charge enabled",
              "type": "boolean",
              "example": true
            },
            "changeStatusToAvailableOnStopTx": {
              "title": "Change status to available on stop tx",
              "type": "boolean",
              "example": true
            },
            "smsResetSupported": {
              "title": "Sms reset supported",
              "type": "boolean",
              "example": true
            },
            "supportsDischarge": {
              "title": "Supports discharge",
              "type": "boolean",
              "example": true
            },
            "heaterInstalled": {
              "title": "Heater installed",
              "type": "boolean",
              "example": true
            },
            "temperatureScale": {
              "title": "Temperature scale",
              "type": "string",
              "description": "\n* A group of the temperature scale options\n* CELSIUS\n* FAHRENHEIT",
              "example": "CELSIUS"
            },
            "managesLocalWhitelist": {
              "title": "Manages local white list",
              "type": "boolean",
              "example": true
            },
            "ocpp16Iso15118PncSupported": {
              "title": "Ocpp16 iso15118 pnc supported",
              "type": "boolean",
              "example": true
            },
            "ocpp16ImprovedSecuritySupported": {
              "title": "Ocpp16 improved security supported",
              "type": "boolean",
              "example": true
            },
            "instructionsVideoUrl": {
              "title": "Instructions video url",
              "type": "string",
              "example": "https://leah-katamin.bandcamp.com/album/222222"
            },
            "readerTypes": {
              "title": "Reader types",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* A group of the Reader types options\n* RFID\n* MAGNETIC_READER\n* RFID_AND_MAGNETIC_READER\n* NFC",
              "example": [
                "RFID"
              ],
              "items": {
                "title": "Reader types",
                "type": "string",
                "description": "\n* A group of the Reader types options\n* RFID\n* MAGNETIC_READER\n* RFID_AND_MAGNETIC_READER\n* NFC",
                "example": "[\"RFID\"]"
              }
            },
            "connectors": {
              "title": "Charger model connectors",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerModelConnector"
              }
            },
            "protocols": {
              "title": "Charger model protocols",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerModelProtocol"
              }
            },
            "manufacturerCompany": {
              "$ref": "#/components/schemas/Company"
            },
            "maxCurrentSpec": {
              "title": "Maximum current spec",
              "type": "string",
              "example": "40"
            },
            "mountingType": {
              "title": "Mounting type",
              "type": "string",
              "description": "\n* A group of the mounting type options\n* WALL\n* POLE\n* BOTH\n* STAND_ALONE",
              "example": "wall"
            },
            "chargingScheduleRateUnit": {
              "title": "Charging schedule rate unit",
              "type": "string",
              "description": "\n* A group of the charging schedule rate unit options\n* A\n* W",
              "example": "A"
            },
            "instructionalPDFs": {
              "title": "Instructional Pdf",
              "uniqueItems": true,
              "type": "array",
              "description": "List of pdf file names",
              "example": [
                "spec1.pdf",
                "spec2.pdf"
              ],
              "items": {
                "title": "Instructional Pdf",
                "type": "string",
                "description": "List of pdf file names",
                "example": "[\"spec1.pdf\",\"spec2.pdf\"]"
              }
            },
            "rebootTime": {
              "title": "Reboot time in minutes",
              "type": "integer",
              "format": "int64",
              "example": 30
            },
            "authenticationMethods": {
              "title": "Authentication methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* A group of the below authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": "SMS",
              "items": {
                "title": "Authentication methods",
                "type": "string",
                "description": "\n* A group of the below authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                "example": "SMS"
              }
            },
            "paymentMethods": {
              "title": "Payment methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* A group of the below Payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
              "example": "PARK_AND_CHARGE",
              "items": {
                "title": "Payment methods",
                "type": "string",
                "description": "\n* A group of the below Payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                "example": "PARK_AND_CHARGE"
              }
            }
          }
        },
        "ChargerModelConnector": {
          "title": "Charger model connectors",
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger model id",
              "type": "integer",
              "format": "int64",
              "example": 122345
            },
            "name": {
              "title": "Charger connector model name",
              "type": "string",
              "example": "charger name"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "external id"
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 110
            },
            "placement": {
              "title": "placement",
              "type": "string",
              "description": "\n* Specifies the placement options\n* NOT_SPECIFIED\n* LEFT\n* RIGHT\n* TOP\n* BOTTOM\n* CENTER\n* OTHER",
              "example": "LEFT"
            },
            "connectorNumber": {
              "title": "Connector number",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "connectorType": {
              "title": "Connector type",
              "type": "string",
              "description": "\n* A group of connector type options\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_2_MENNEKES"
            },
            "chargingMode": {
              "title": "Charging mode",
              "type": "string",
              "description": "\n* A group of charging mode options\n* LEVEL1\n* LEVEL2\n* LEVEL3\n* MODE1\n* MODE2\n* MODE3\n* MODE4",
              "example": "LEVEL1"
            },
            "smartCharging": {
              "title": "Smart charging",
              "type": "boolean",
              "example": true
            },
            "hasBuiltInCable": {
              "title": "Has built in cable",
              "type": "boolean",
              "example": true
            },
            "chargingInstructions": {
              "title": "Charging instructions",
              "type": "string",
              "example": "instructions"
            },
            "voltageType": {
              "title": "Voltage type",
              "type": "string",
              "description": "\n* A group of voltage type options\n* AC\n* DC",
              "example": "AC"
            },
            "normalCurrentRating": {
              "title": "Normal current rating",
              "type": "number",
              "example": 8.5
            },
            "numberOfPhases": {
              "title": "Number of phases",
              "type": "integer",
              "format": "int32",
              "example": 3
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "maxPower": {
              "title": "Max power",
              "type": "number",
              "example": 54.2
            },
            "ratedFrequency": {
              "title": "Rated frequency",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "evseNumber": {
              "title": "EVSE number",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "cableLength": {
              "title": "Cable length",
              "type": "integer",
              "format": "int32",
              "example": 5
            }
          }
        },
        "ChargerModelProtocol": {
          "title": "Charger model protocols",
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger model protocol id",
              "type": "integer",
              "format": "int64",
              "example": 36
            },
            "protocolType": {
              "title": "Protocol type",
              "type": "string",
              "description": "\n* Specifies the charger protocol type\n* OCPP1_2\n* OCPP1_5S\n* NOT_USED_1\n* SEMA_CONNECT\n* NOT_USED_3\n* BCP1_5_1\n* OCPP1_5J\n* OCPP1_5PlusS\n* OCPP1_5PlusJ\n* OCPP1_6S\n* OCPP1_6J\n* OCPP2_0_1J\n* NOT_USED_4\n* XXXOCHP_DIRECTXX\n* HUBJECT",
              "example": "OCPP1_2"
            },
            "softwareConnectorType": {
              "title": "Company type",
              "type": "string",
              "description": "\n* Specifies the software connector type\n* EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4\n* ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115\n* ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115\n* MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123\n* CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT\n* NON_MANAGED\n* EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123\n* OCPP_12_DEFAULT\n* OCPP_15_DEFAULT\n* MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912\n* BCP_151_DEFAULT\n* SEMA_CONNECT_API\n* DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT\n* LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT\n* OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT\n* EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* OCPP_15_JSON_DEFAULT\n* OCPP_15_SOAP_SMART_CHARGING_DEFAULT\n* OCPP_15_JSON_SMART_CHARGING_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT\n* OCPP_16_SOAP_DEFAULT\n* OCPP_16_JSON_DEFAULT\n* ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT\n* OCPP_15_SOAP_METER_SIGN_DEFAULT\n* OCPP_12_DEFAULT_REVERSE_CARD_NUMBER\n* CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT\n* NISSAN_OCPP15_SOAP_DEFAULT\n* OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET\n* OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS\n* EFACEC_OCPP_15_SOAP_CUSTOMIZED\n* OCPP_201_JSON_DEFAULT\n* OCPI\n* ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT\n* EFACEC_OCPP_16_JSON_CUSTOMIZED\n* ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT\n* OCHP_DIRECT\n* HUBJECT\n* AUTO_DEALERSHIP",
              "example": "ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115"
            },
            "firmwareVersion": {
              "title": "Firmware version",
              "type": "string",
              "example": "1.2.5 (Production)"
            }
          }
        },
        "ChargerModelResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerModel"
              }
            }
          }
        },
        "ChargerModelProtocolResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerModelProtocol"
              }
            }
          }
        },
        "ChargerModelConnectorResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerModelConnector"
              }
            }
          }
        },
        "ChargerModelFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 50,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerHostCreate": {
          "required": [
            "address",
            "anniversaryDay",
            "chargerGroupParentId",
            "companyId",
            "contactPersonId",
            "customerDetailGroupParentId",
            "defaultBillingTariffCode",
            "defaultHostServicePlanCode",
            "name",
            "paymentTermsInDays",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Host name",
              "maxLength": 100,
              "minLength": 1,
              "pattern": "^((?![<>{}~$+:;=`\"\\\\]).)*$",
              "type": "string",
              "example": "A-15"
            },
            "externalId": {
              "title": "External id",
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "example": "546789"
            },
            "type": {
              "title": "Charger host type",
              "pattern": "(STANDARD|FLEET|MDU|WORKPLACE)",
              "type": "string",
              "description": "\n* Specifies the charger host type\n* STANDARD\n* FLEET\n* MDU\n* WORKPLACE",
              "example": "FLEET",
              "enum": [
                "STANDARD",
                "FLEET",
                "MDU",
                "WORKPLACE"
              ]
            },
            "companyId": {
              "title": "Company id",
              "type": "integer",
              "format": "int64",
              "example": 102
            },
            "contactPersonId": {
              "title": "Contact person id",
              "type": "integer",
              "format": "int64",
              "example": 465
            },
            "defaultHostServicePlanCode": {
              "title": "Default host service plan code",
              "type": "string",
              "example": "OCPIEMSP"
            },
            "defaultBillingTariffCode": {
              "title": "Default billing tariff plan code",
              "type": "string",
              "example": "OTG DC"
            },
            "address": {
              "$ref": "#/components/schemas/AddressCreate"
            },
            "anniversaryDay": {
              "title": "Anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "paymentTermsInDays": {
              "title": "Payment terms in days",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "chargerGroupParentId": {
              "title": "Charger group parent id",
              "type": "integer",
              "format": "int64",
              "example": 32
            },
            "customerDetailGroupParentId": {
              "title": "Customer detail group parent id",
              "type": "integer",
              "format": "int64",
              "example": 45
            }
          },
          "description": "Charger host create object"
        },
        "ChargerHostProfile": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 2343521
            },
            "name": {
              "title": "Name",
              "type": "string",
              "example": "Host1"
            },
            "accountStatus": {
              "title": "Account status",
              "type": "string",
              "description": "Specifies account status\n* REGISTERED\n* ACTIVE\n* SUSPEND\n* CLOSED_DELINQUENCY\n* SUSPENDED_DELINQUENCY\n* CLOSED\n* CLOSED_CUSTOMER_REQUEST",
              "example": "ACTIVE"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "svxc-sv2"
            },
            "registrationNumber": {
              "title": "Registration number",
              "type": "string",
              "example": "123"
            },
            "onBoardingStatus": {
              "title": "On boarding status",
              "type": "string",
              "description": "Specifies on boarding status\n* ACTIVE\n* NEW\n* IN_PROCESS",
              "example": "Active"
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "Specifies the type\n* STANDARD\n* FLEET\n* MDU\n* WORKPLACE",
              "example": "STANDARD"
            },
            "accountClosureDate": {
              "title": "Account closure date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1617010000
            },
            "payingCustomerAccountNumber": {
              "title": "Paying customer account number",
              "type": "integer",
              "format": "int32",
              "example": 900125
            },
            "chargerGroupId": {
              "title": "Charger group Id",
              "type": "integer",
              "format": "int64",
              "example": 28
            },
            "customerDetailsGroupId": {
              "title": "Customer details group Id",
              "type": "integer",
              "format": "int64",
              "example": 30
            },
            "departmentGroupId": {
              "title": "Department group Id",
              "type": "integer",
              "format": "int64",
              "example": 32
            },
            "allowedEmailDomains": {
              "title": "Allowed email domains",
              "type": "string",
              "example": "yahoo.com;google.com"
            },
            "chargerIssueDefaultAssigneeId": {
              "title": "Charger issue default assignee id",
              "type": "integer",
              "format": "int64",
              "example": 200
            },
            "cardIssueDefaultAssigneeId": {
              "title": "Card issue default assignee id",
              "type": "integer",
              "format": "int64",
              "example": 120
            },
            "customerIssueDefaultAssigneeId": {
              "title": "Customer issue default assignee id",
              "type": "integer",
              "format": "int64",
              "example": 45
            },
            "invoiceProcessingInstructions": {
              "title": "Invoice processing instructions",
              "type": "string",
              "example": "<instructions text>"
            },
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "company": {
              "$ref": "#/components/schemas/Company"
            },
            "contactPerson": {
              "$ref": "#/components/schemas/Person"
            }
          }
        },
        "ChargerHostProfileResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerHostProfile"
              }
            }
          }
        },
        "Person": {
          "title": "Contact person",
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 111
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            }
          }
        },
        "StatementFilter": {
          "type": "object",
          "properties": {
            "fromDate": {
              "title": "From date in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2020-11-14T00:00:06Z"
            },
            "toDate": {
              "title": "To date in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2020-11-21T00:00:06Z"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Statement": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Statement id",
              "type": "integer",
              "format": "int64",
              "example": 45
            },
            "invoiceNumber": {
              "title": "Invoice number",
              "type": "integer",
              "format": "int64",
              "example": 412757
            },
            "invoiceId": {
              "title": "Invoice id",
              "type": "integer",
              "format": "int64",
              "example": 1343246
            },
            "startDate": {
              "title": "Start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "endDate": {
              "title": "End date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610544354
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "description": "Specifies the currency\n* USD\n* EUR\n* GBP\n* NIS\n* HUF\n* CZK\n* RON\n* HRK\n* SEK\n* NOK\n* SKK\n* CLP\n* COP\n* JPY\n* ISK\n* INR\n* NZD\n* DKK\n* CAD\n* AED\n* CHF\n* PLN\n* RUB",
              "example": "EUR"
            },
            "amount": {
              "title": "Total amount paid",
              "type": "number"
            }
          }
        },
        "StatementResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Statement"
              }
            }
          }
        },
        "InvoiceFilter": {
          "type": "object",
          "properties": {
            "fromDate": {
              "title": "From date in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2020-11-14T00:00:06Z"
            },
            "toDate": {
              "title": "To date in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2020-11-21T00:00:06Z"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "Invoice": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Invoice Id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "number": {
              "title": "Invoice number",
              "type": "integer",
              "format": "int64",
              "example": 13556
            },
            "type": {
              "title": "Type of the invoice",
              "type": "string",
              "description": "\n* Specifies the type of the invoice\n* BILLING_PERIOD\n* FUNDS_RECEIVED\n* FUNDS_REFUNDED",
              "example": "BILLING_PERIOD"
            },
            "successfulPayment": {
              "title": "Payment succeeded",
              "type": "boolean",
              "example": true
            },
            "dueDate": {
              "title": "Due date of the payment",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingDate": {
              "title": "Date transaction linked to a statement",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "paidDate": {
              "title": "Date the invoice was paid",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingCardType": {
              "title": "Card type used for billing",
              "type": "string",
              "example": "VISA"
            },
            "cardNumber": {
              "title": "Card number",
              "type": "string",
              "example": "**********1119"
            },
            "confirmationNumber": {
              "title": "Confirmation number",
              "type": "string",
              "example": "591::1577879298421"
            },
            "paymentGatewayBillingErrorCode": {
              "title": "Error code from payment gateway ",
              "type": "string",
              "example": "NO_ERROR"
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "example": "USD"
            },
            "tax": {
              "title": "Tax amount",
              "type": "number",
              "example": 23.4
            },
            "amount": {
              "title": "Total invoice amount",
              "type": "number",
              "example": 234
            },
            "totalkWh": {
              "title": "Total kWh consumed",
              "type": "number",
              "example": 15.0
            },
            "createdOn": {
              "title": "Created on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingExternalInvoiceId": {
              "title": "External provider invoice id",
              "type": "integer",
              "format": "int64",
              "example": 123
            }
          }
        },
        "InvoiceResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Invoice"
              }
            }
          }
        },
        "CurrentStatement": {
          "type": "object",
          "properties": {
            "currency": {
              "title": "Currency",
              "pattern": "(USD|EUR|GBP|NIS|HUF|CZK|RON|HRK|SEK|NOK|SKK|CLP|COP|JPY|ISK|INR|NZD|DKK|CAD|AED|CHF|PLN|RUB)",
              "type": "string",
              "description": "Specifies the currency\n* USD\n* EUR\n* GBP\n* NIS\n* HUF\n* CZK\n* RON\n* HRK\n* SEK\n* NOK\n* SKK\n* CLP\n* COP\n* JPY\n* ISK\n* INR\n* NZD\n* DKK\n* CAD\n* AED\n* CHF\n* PLN\n* RUB",
              "example": "EUR"
            }
          }
        },
        "ChargerHostTransactionFilter": {
          "type": "object",
          "properties": {
            "invoicesNumber": {
              "title": "Invoices number",
              "maxItems": 20,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                4435,
                14523
              ],
              "items": {
                "title": "Invoices number",
                "type": "integer",
                "format": "int64"
              }
            },
            "fromDate": {
              "title": "From date in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2020-11-14T00:00:06Z"
            },
            "toDate": {
              "title": "To date in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2020-11-18T00:00:06Z"
            },
            "categoryType": {
              "title": "Category type",
              "pattern": "(ADJUSTMENTS|CHARGING_ACTIVITY|MEMBERSHIP_ACTIVITY|PAYMENTS)",
              "type": "string",
              "description": "\n* Specifies the category of the product\n* ADJUSTMENTS\n* CHARGING_ACTIVITY\n* MEMBERSHIP_ACTIVITY\n* PAYMENTS",
              "example": "ADJUSTMENTS",
              "enum": [
                "ADJUSTMENTS",
                "CHARGING_ACTIVITY",
                "MEMBERSHIP_ACTIVITY",
                "PAYMENTS"
              ]
            },
            "customerPlanCode": {
              "title": "Plan code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "FREE"
            },
            "chargerHostPlanCode": {
              "title": "Charger host plan code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "FREE"
            },
            "chargerId": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 12312
            }
          }
        },
        "BillingTransactionInvoice": {
          "title": "Transaction invoice details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Invoice Id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "number": {
              "title": "Invoice number",
              "type": "integer",
              "format": "int64",
              "example": 13556
            },
            "type": {
              "title": "Type of the invoice",
              "type": "string",
              "description": "\n* Specifies the type of the invoice\n* BILLING_PERIOD\n* FUNDS_RECEIVED\n* FUNDS_REFUNDED",
              "example": "BILLING_PERIOD"
            },
            "successfulPayment": {
              "title": "Payment succeeded",
              "type": "boolean",
              "example": true
            },
            "dueDate": {
              "title": "Due date of the payment",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingDate": {
              "title": "Date transaction linked to a statement",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "paidDate": {
              "title": "Date the invoice was paid",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingCardType": {
              "title": "Card type used for billing",
              "type": "string",
              "example": "VISA"
            },
            "cardNumber": {
              "title": "Card number",
              "type": "string",
              "example": "**********1119"
            },
            "confirmationNumber": {
              "title": "Confirmation number",
              "type": "string",
              "example": "591::1577879298421"
            },
            "paymentGatewayBillingErrorCode": {
              "title": "Error code from payment gateway ",
              "type": "string",
              "example": "NO_ERROR"
            },
            "createdOn": {
              "title": "Created on in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingExternalInvoiceId": {
              "title": "External provider invoice id",
              "type": "integer",
              "format": "int64",
              "example": 123
            }
          }
        },
        "BillingTransactionResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "ContractPlan": {
          "title": "Plan details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Plan id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "displayCode": {
              "title": "Plan display code",
              "type": "string",
              "example": "Pay As You Go"
            }
          }
        },
        "Transaction": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Billing transaction Id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "Billing transaction comment"
            },
            "createdOn": {
              "title": "Date created",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingStartDate": {
              "title": "Billing period start date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "billingEndDate": {
              "title": "Billing period end date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "amount": {
              "title": "Total billing amount",
              "type": "number",
              "example": 234
            },
            "billingErrorCode": {
              "title": "The error occurred when creating a transaction",
              "type": "string",
              "example": "NO_ERROR"
            },
            "isDebit": {
              "title": "Debit payment",
              "type": "boolean",
              "example": false
            },
            "balance": {
              "title": "Balance after deducting amount",
              "type": "number",
              "example": 153
            },
            "affectedBalance": {
              "title": "True if balance was affected",
              "type": "boolean",
              "example": true
            },
            "tax": {
              "title": "Tax calculation for transaction",
              "type": "number",
              "example": 23.4
            },
            "refundBillingTransactionId": {
              "title": "Counter transaction in case of refund",
              "type": "integer",
              "format": "int64",
              "example": 345
            },
            "retractTransactionId": {
              "title": "Original transaction id of the counter transaction",
              "type": "integer",
              "format": "int64",
              "example": 321
            },
            "productCategory": {
              "title": "Product category",
              "type": "string",
              "description": "Specifies the category of the product\n* ADJUSTMENTS\n* CHARGING_ACTIVITY\n* MEMBERSHIP_ACTIVITY\n* PAYMENTS",
              "example": "CHARGING_ACTIVITY"
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "example": "USD"
            },
            "amountBeforeDiscount": {
              "title": "Amount before discount",
              "type": "number",
              "example": 123
            },
            "totalkWh": {
              "title": "Total kWh consumed",
              "type": "number",
              "example": 15.0
            },
            "evChargerTransactionId": {
              "title": "Charger transaction id",
              "type": "integer",
              "format": "int64",
              "example": 5
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "utilityCompanyId": {
              "title": "Company id",
              "type": "integer",
              "format": "int64",
              "example": 52
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 512
            },
            "tariffDate": {
              "title": "Date that was used to calculate the transaction",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "chargerId": {
              "title": "Charger id",
              "type": "integer",
              "format": "int64",
              "example": 82
            },
            "transactionDuration": {
              "title": "Transaction duration",
              "type": "string",
              "example": "00:34:22"
            },
            "reservationId": {
              "title": "Reservation id",
              "type": "integer",
              "format": "int64",
              "example": 75
            },
            "statementId": {
              "title": "Statement id",
              "type": "integer",
              "format": "int64",
              "example": 7554
            },
            "memberAccountNumber": {
              "title": "Customer that created the transaction",
              "type": "integer",
              "format": "int32",
              "example": 67
            },
            "payingAccountNumber": {
              "title": "Customer that paid the for the transaction",
              "type": "integer",
              "format": "int32",
              "example": 45
            },
            "externalPaymentDetailsId": {
              "title": "External payment details id",
              "type": "integer",
              "format": "int64",
              "example": 343
            },
            "externalRegistrationId": {
              "title": "External registration id",
              "type": "string",
              "example": "4563"
            },
            "billingRecordType": {
              "title": "Billing record type",
              "type": "string",
              "example": "CUSTOMER"
            },
            "contractPlan": {
              "$ref": "#/components/schemas/ContractPlan"
            },
            "invoice": {
              "$ref": "#/components/schemas/BillingTransactionInvoice"
            }
          }
        },
        "ChargerHostFilter": {
          "type": "object",
          "properties": {
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "ch-s-1"
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 100042
            },
            "accountStatuses": {
              "title": "Account status",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies account status\n* REGISTERED\n* ACTIVE\n* SUSPENDED\n* CLOSED_DELINQUENCY\n* SUSPENDED_DELINQUENCY\n* CLOSED\n* CLOSED_CUSTOMER_REQUEST",
              "example": [
                "ACTIVE",
                "SUSPENDED"
              ],
              "items": {
                "type": "string"
              },
              "enum": [
                "REGISTERED",
                "ACTIVE",
                "SUSPENDED",
                "CLOSED_DELINQUENCY",
                "SUSPENDED_DELINQUENCY",
                "CLOSED",
                "CLOSED_CUSTOMER_REQUEST"
              ]
            },
            "onBoardingStatuses": {
              "title": "On boarding status",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies on boarding status\n* ACTIVE\n* NEW\n* IN_PROCESS",
              "example": [
                "ACTIVE",
                "IN_PROCESS"
              ],
              "items": {
                "type": "string"
              },
              "enum": [
                "ACTIVE",
                "NEW",
                "IN_PROCESS"
              ]
            },
            "paidManually": {
              "title": "Paid manually",
              "type": "boolean",
              "example": true
            }
          },
          "description": "Filter object to be used for searching"
        },
        "ChargerGroupCreate": {
          "required": [
            "caption"
          ],
          "type": "object",
          "properties": {
            "caption": {
              "title": "Caption",
              "maxLength": 300,
              "minLength": 1,
              "type": "string",
              "example": "Massachusetts Department of Transportation"
            },
            "description": {
              "title": "Description",
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "example": "Group description"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "dynamicContentQuery": {
              "title": "Dynamic content query",
              "type": "string",
              "description": "If dynamic content query is passed the group will be defined as dynamic, otherwise static",
              "example": "StationHostID = 219"
            }
          },
          "description": "Charger group create object"
        },
        "ChargerGroup": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "caption": {
              "title": "Caption",
              "type": "string",
              "example": "Group a"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "This is a description"
            },
            "isFolder": {
              "title": "Is folder",
              "type": "boolean",
              "example": true
            },
            "category": {
              "title": "Category",
              "type": "string",
              "description": "Specifies category\n* CHARGER",
              "example": "CHARGER"
            },
            "cardAuthorizationSchema": {
              "title": "Card authorization schema",
              "type": "string",
              "description": "Specifies card authorization schema\n* DEFAULT\n* APPROVE_ALL\n* SPECIFIC_PROVIDERS",
              "example": "DEFAULT"
            },
            "relatedToChargerHost": {
              "title": "Is root for charger host",
              "type": "boolean",
              "example": true
            },
            "dynamicContentQuery": {
              "title": "Dynamic content query",
              "type": "string",
              "example": "AccessDoorStatus=CLOSED"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "af2212"
            },
            "enabledForAccessibilityVisibility": {
              "title": "Enabled for accessibility visibility",
              "type": "boolean",
              "example": true
            },
            "externalCardAuthenticationProviderNames": {
              "title": "External card authentication provider names",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "title": "External card authentication provider names",
                "type": "string"
              }
            },
            "plans": {
              "title": "Plans details",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerGroupPlan"
              }
            },
            "subGroups": {
              "title": "Sub groups details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupDetails"
              }
            }
          }
        },
        "ChargerGroupPlan": {
          "title": "Plans details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Plan id",
              "type": "integer",
              "format": "int64",
              "example": 5489
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            }
          }
        },
        "ChargerGroupResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerGroup"
              }
            }
          }
        },
        "GroupDetails": {
          "title": "Sub groups details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "caption": {
              "title": "Caption",
              "type": "string",
              "example": "Group a"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "This is a description"
            },
            "isFolder": {
              "title": "Is folder",
              "type": "boolean",
              "example": true
            },
            "category": {
              "title": "Category",
              "type": "string",
              "description": "Specifies category\n* CHARGER",
              "example": "CHARGER"
            },
            "cardAuthorizationSchema": {
              "title": "Card authorization schema",
              "type": "string",
              "description": "Specifies card authorization schema\n* DEFAULT\n* APPROVE_ALL\n* SPECIFIC_PROVIDERS",
              "example": "DEFAULT"
            },
            "relatedToChargerHost": {
              "title": "Is root for charger host",
              "type": "boolean",
              "example": true
            },
            "dynamicContentQuery": {
              "title": "Dynamic content query",
              "type": "string",
              "example": "AccessDoorStatus=CLOSED"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "af2212"
            },
            "enabledForAccessibilityVisibility": {
              "title": "Enabled for accessibility visibility",
              "type": "boolean",
              "example": true
            },
            "ancestorGroupId": {
              "title": "Ancestor group",
              "type": "integer",
              "format": "int64",
              "example": 123451
            },
            "externalCardAuthenticationProviderNames": {
              "title": "External card authentication provider names",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "title": "External card authentication provider names",
                "type": "string"
              }
            },
            "plans": {
              "title": "Plans details",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerGroupPlan"
              }
            }
          }
        },
        "FolderCreate": {
          "required": [
            "caption"
          ],
          "type": "object",
          "properties": {
            "caption": {
              "title": "Caption",
              "maxLength": 300,
              "minLength": 1,
              "type": "string",
              "example": "Massachusetts Department of Transportation"
            },
            "description": {
              "title": "Description",
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "example": "Group description"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            }
          },
          "description": "Charger group folder create object"
        },
        "ReassignCard": {
          "required": [
            "accountNumber"
          ],
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 100042
            }
          },
          "description": "Reassign card object"
        },
        "Card": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Card id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "cardNumber": {
              "title": "Card number",
              "type": "string",
              "example": "966958AB"
            },
            "visibleNumber": {
              "title": "Visible number",
              "type": "string",
              "example": "EE9CB4514E44EC"
            },
            "formFactor": {
              "title": "Form factor",
              "type": "string",
              "description": "Specifies form factor\n* WALLET_SIZE\n* KEY_RING\n* NONE",
              "example": "WALLET_SIZE"
            },
            "type": {
              "title": "Card type",
              "type": "string",
              "description": "Specifies card type\n* RFID\n* VIRTUAL\n* VEHICLE_ID\n* EMAID\n* PIN_CODE",
              "example": "RFID"
            },
            "status": {
              "title": "Card status",
              "type": "string",
              "description": "Specifies card status\n* ORDERED\n* ACTIVE\n* NOT_ASSIGNED\n* SUSPENDED\n* CANCELLED\n* BLOCKED\n* EXPIRED\n* BLACKLISTED\n* SENT\n* LOST\n* STOLEN\n* INACTIVE\n* DESTROYED",
              "example": "ORDERED"
            },
            "brandId": {
              "title": "Card brand id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 153
            },
            "modifiedOn": {
              "title": "Last date modified",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "customerDetailId": {
              "title": "Customer detail id",
              "type": "integer",
              "format": "int64",
              "example": 124
            },
            "expirationDate": {
              "title": "Expiration date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "batchImportId": {
              "title": "Batch import id",
              "type": "integer",
              "format": "int64",
              "example": 111
            }
          }
        },
        "CardResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Card"
              }
            }
          }
        },
        "ActivateCard": {
          "type": "object",
          "properties": {
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "This is a comment"
            }
          },
          "description": "Activate card object"
        },
        "CardFilter": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Collection of ids",
              "maxItems": 100,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Collection of ids",
                "type": "integer",
                "format": "int64"
              }
            },
            "types": {
              "title": "Set of card types",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies card type\n* RFID\n* VIRTUAL\n* VEHICLE_ID\n* EMAID\n* PIN_CODE",
              "example": [
                "RFID",
                "EMAID"
              ],
              "items": {
                "title": "Set of card types",
                "type": "string",
                "description": "Specifies card type\n* RFID\n* VIRTUAL\n* VEHICLE_ID\n* EMAID\n* PIN_CODE",
                "example": "[\"RFID\",\"EMAID\"]",
                "enum": [
                  "RFID",
                  "VIRTUAL",
                  "VEHICLE_ID",
                  "EMAID",
                  "PIN_CODE"
                ]
              },
              "enum": [
                "RFID",
                "VIRTUAL",
                "VEHICLE_ID",
                "EMAID",
                "PIN_CODE"
              ]
            },
            "statuses": {
              "title": "Set of cards statuses",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies card status\n* ORDERED\n* ACTIVE\n* SUSPENDED\n* NOT_ASSIGNED\n* CANCELLED\n* BLOCKED\n* EXPIRED\n* BLACKLISTED\n* SENT\n* LOST\n* STOLEN\n* INACTIVE\n* DESTROYED",
              "example": [
                "ORDERED",
                "ACTIVE"
              ],
              "items": {
                "title": "Set of cards statuses",
                "type": "string",
                "description": "Specifies card status\n* ORDERED\n* ACTIVE\n* SUSPENDED\n* NOT_ASSIGNED\n* CANCELLED\n* BLOCKED\n* EXPIRED\n* BLACKLISTED\n* SENT\n* LOST\n* STOLEN\n* INACTIVE\n* DESTROYED",
                "example": "[\"ORDERED\",\"ACTIVE\"]",
                "enum": [
                  "ORDERED",
                  "ACTIVE",
                  "SUSPENDED",
                  "NOT_ASSIGNED",
                  "CANCELLED",
                  "BLOCKED",
                  "EXPIRED",
                  "BLACKLISTED",
                  "SENT",
                  "LOST",
                  "STOLEN",
                  "INACTIVE",
                  "DESTROYED"
                ]
              },
              "enum": [
                "ORDERED",
                "ACTIVE",
                "SUSPENDED",
                "NOT_ASSIGNED",
                "CANCELLED",
                "BLOCKED",
                "EXPIRED",
                "BLACKLISTED",
                "SENT",
                "LOST",
                "STOLEN",
                "INACTIVE",
                "DESTROYED"
              ]
            },
            "formFactors": {
              "title": "Set of form factors",
              "uniqueItems": true,
              "type": "array",
              "description": "Specifies form factor\n* WALLET_SIZE\n* KEY_RING\n* NONE",
              "example": [
                "WALLET_SIZE",
                "KEY_RING"
              ],
              "items": {
                "title": "Set of form factors",
                "type": "string",
                "description": "Specifies form factor\n* WALLET_SIZE\n* KEY_RING\n* NONE",
                "example": "[\"WALLET_SIZE\",\"KEY_RING\"]",
                "enum": [
                  "WALLET_SIZE",
                  "KEY_RING",
                  "NONE"
                ]
              },
              "enum": [
                "WALLET_SIZE",
                "KEY_RING",
                "NONE"
              ]
            },
            "chargerHostId": {
              "title": "Charges host id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 100042
            }
          },
          "description": "Filter object to be used for searching"
        },
        "BatchCard": {
          "title": "Card's details",
          "required": [
            "cardNumber",
            "visibleNumber"
          ],
          "type": "object",
          "properties": {
            "cardNumber": {
              "title": "Card number",
              "type": "string",
              "example": "966958AB"
            },
            "visibleNumber": {
              "title": "Visible number",
              "type": "string",
              "example": "EE9CB4514E44EC"
            }
          }
        },
        "BatchCardImport": {
          "required": [
            "batchImportName",
            "brandId",
            "cards",
            "formFactor",
            "type"
          ],
          "type": "object",
          "properties": {
            "batchImportName": {
              "title": "Batch import name",
              "type": "string",
              "example": "imported_by_John"
            },
            "brandId": {
              "title": "Brand id",
              "type": "integer",
              "format": "int64",
              "example": 11
            },
            "formFactor": {
              "title": "Form factor",
              "pattern": "(WALLET_SIZE|KEY_RING|NONE)",
              "type": "string",
              "description": "Specifies form factor\n* WALLET_SIZE\n* KEY_RING\n* NONE",
              "example": "WALLET_SIZE",
              "enum": [
                "WALLET_SIZE",
                "KEY_RING",
                "NONE"
              ]
            },
            "type": {
              "title": "Card type",
              "pattern": "(RFID|VEHICLE_ID|EMAID|PIN_CODE)",
              "type": "string",
              "description": "Specifies card type\n* RFID\n* VEHICLE_ID\n* EMAID\n* PIN_CODE",
              "example": "RFID",
              "enum": [
                "RFID",
                "VEHICLE_ID",
                "EMAID",
                "PIN_CODE"
              ]
            },
            "cards": {
              "title": "Card's details",
              "maxItems": 100,
              "minItems": 0,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BatchCard"
              }
            },
            "expirationDate": {
              "title": "Expiration date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 272
            }
          },
          "description": "Batch card import object"
        },
        "BillingTransactionFilter": {
          "type": "object",
          "properties": {
            "invoicesNumber": {
              "title": "Invoices number",
              "maxItems": 20,
              "minItems": 0,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "4435",
                "14523"
              ],
              "items": {
                "title": "Invoices number",
                "type": "integer",
                "format": "int64"
              }
            },
            "fromDate": {
              "title": "From date",
              "type": "integer",
              "format": "int64",
              "example": 1192224433587
            },
            "toDate": {
              "title": "To date",
              "type": "integer",
              "format": "int64",
              "example": 1992224433587
            },
            "categoryType": {
              "title": "Category type",
              "pattern": "(ADJUSTMENTS|CHARGING_ACTIVITY|MEMBERSHIP_ACTIVITY|PAYMENTS)",
              "type": "string",
              "example": "ADJUSTMENTS",
              "enum": [
                "ADJUSTMENTS",
                "CHARGING_ACTIVITY",
                "MEMBERSHIP_ACTIVITY",
                "PAYMENTS"
              ]
            },
            "payerInfo": {
              "title": "A free text field, searches for: name, name on card, card number and tax number",
              "type": "string",
              "example": "4580"
            },
            "billingRecordTypes": {
              "title": "Billing record types",
              "maxItems": 8,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "description": "For customer related transactions filter by CUSTOMER and ONE_TIME_PAYMENT_DRIVER",
              "example": [
                "CUSTOMER",
                "ONE_TIME_PAYMENT_DRIVER"
              ],
              "items": {
                "title": "Billing record types",
                "type": "string",
                "description": "For customer related transactions filter by CUSTOMER and ONE_TIME_PAYMENT_DRIVER",
                "example": "[\"CUSTOMER\",\"ONE_TIME_PAYMENT_DRIVER\"]",
                "enum": [
                  "SYSTEM",
                  "CUSTOMER",
                  "SERVICE_PROVIDER",
                  "CHARGER_HOST",
                  "COMPANY",
                  "EXTERNAL_CUSTOMER",
                  "ONE_TIME_PAYMENT_DRIVER",
                  "TEST_DRIVER"
                ]
              },
              "enum": [
                "SYSTEM",
                "CUSTOMER",
                "SERVICE_PROVIDER",
                "CHARGER_HOST",
                "COMPANY",
                "EXTERNAL_CUSTOMER",
                "ONE_TIME_PAYMENT_DRIVER",
                "TEST_DRIVER"
              ]
            }
          },
          "description": "Filter object to be used for searching"
        },
        "LoginRequest": {
          "required": [
            "password",
            "userName"
          ],
          "type": "object",
          "properties": {
            "userName": {
              "title": "User name",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "password": {
              "title": "Password",
              "type": "string",
              "example": "Sf1#$fKFF112"
            }
          }
        },
        "LoginResponse": {
          "type": "object",
          "properties": {
            "ticket": {
              "title": "Ticket",
              "type": "string",
              "example": "12399b0e-v2908-4e32-9279-c47d9760124c"
            }
          }
        },
        "OperatorLoginResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LoginResponse"
              }
            }
          }
        },
        "LoginAsCustomerRequest": {
          "required": [
            "accountNumber"
          ],
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 213556
            }
          }
        },
        "CustomerLoginResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LoginResponse"
              }
            }
          }
        },
        "ReservationTermsNow": {
          "required": [
            "connectorId"
          ],
          "type": "object",
          "properties": {
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 5343
            }
          },
          "description": "Get reservation terms now object"
        },
        "TermsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Terms"
              }
            }
          }
        },
        "ReservationTermsByDate": {
          "required": [
            "connectorId",
            "endDate",
            "startDate"
          ],
          "type": "object",
          "properties": {
            "startDate": {
              "title": "Start date",
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "example": 1604392613
            },
            "endDate": {
              "title": "End date",
              "type": "integer",
              "format": "int64",
              "example": 1604399913
            },
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 5343
            }
          },
          "description": "Get reservation terms by date object"
        },
        "ReservationCreateNow": {
          "required": [
            "connectorId",
            "termsId"
          ],
          "type": "object",
          "properties": {
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 2354
            },
            "termsId": {
              "title": "Terms Id",
              "type": "integer",
              "format": "int64",
              "example": 2453
            }
          }
        },
        "ChargerFind": {
          "required": [
            "chargingSpeeds",
            "endDate",
            "startDate"
          ],
          "type": "object",
          "properties": {
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 2354
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 4564
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 431
            },
            "chargingSpeeds": {
              "title": "Charging speeds",
              "uniqueItems": true,
              "type": "array",
              "example": [
                "FAST",
                "SEMI_FAST"
              ],
              "items": {
                "title": "Charging speeds",
                "type": "string",
                "example": "[\"FAST\",\"SEMI_FAST\"]",
                "enum": [
                  "SLOW",
                  "SEMI_FAST",
                  "FAST",
                  "ULTRA_FAST"
                ]
              },
              "enum": [
                "SLOW",
                "SEMI_FAST",
                "FAST",
                "ULTRA_FAST"
              ]
            },
            "startDate": {
              "title": "Start date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "endDate": {
              "title": "End date in epoch time",
              "type": "string",
              "format": "date-time"
            }
          },
          "description": "Get chargers for reservation object"
        },
        "ChargerReservationResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FindChargerReservation"
              }
            }
          }
        },
        "FindChargerReservation": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "caption": {
              "title": "Charger caption",
              "type": "string",
              "example": "Test charger"
            },
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 1456
            },
            "chargingSpeed": {
              "title": "Charging speed",
              "type": "string",
              "example": "FAST",
              "enum": [
                "SLOW",
                "SEMI_FAST",
                "FAST",
                "ULTRA_FAST"
              ]
            },
            "connectorType": {
              "title": "Connector type",
              "type": "string",
              "example": "TYPE_4_CHADEMO"
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 4564
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 431
            }
          }
        },
        "ReservationCreateByDate": {
          "required": [
            "connectorId",
            "endDate",
            "startDate"
          ],
          "type": "object",
          "properties": {
            "connectorId": {
              "title": "Connector id",
              "type": "integer",
              "format": "int64",
              "example": 2354
            },
            "termId": {
              "title": "Terms id",
              "minimum": 1,
              "type": "integer",
              "format": "int64",
              "example": 1434
            },
            "startDate": {
              "title": "Start date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "endDate": {
              "title": "End date in epoch time",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "CreatePaymentCard": {
          "required": [
            "cardNumber",
            "expiryMonth",
            "expiryYear",
            "nameOnCard",
            "paymentMethodType",
            "token"
          ],
          "type": "object",
          "properties": {
            "customerId": {
              "title": "Customer id",
              "type": "string",
              "example": "21736"
            },
            "paymentMethodType": {
              "title": "Payment method type",
              "pattern": "(AMERICAN_EXPRESS|BANKCARD|DINERS|DISCOVER|ISRACARD|JCB|LASER|MAESTRO|MASTERCARD|MASTERPASS|VISA)",
              "type": "string",
              "description": "\n* Specifies the payment method type\n* AMERICAN_EXPRESS\n* BANKCARD\n* DINERS\n* DISCOVER\n* ISRACARD\n* JCB\n* LASER\n* MAESTRO\n* MASTERCARD\n* MASTERPASS\n* VISA",
              "example": "BANKCARD"
            },
            "token": {
              "title": "Token",
              "type": "string",
              "example": "d12skjfhdasghrew"
            },
            "nameOnCard": {
              "title": "Name on card",
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "example": "JOHN DOE"
            },
            "cardNumber": {
              "title": "Card number",
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "example": "****-****-****-1111"
            },
            "expiryMonth": {
              "title": "Expiry month",
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "expiryYear": {
              "title": "Expiry year",
              "type": "integer",
              "format": "int32",
              "example": 2027
            }
          },
          "description": "Create card payment method"
        },
        "PaymentCard": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Payment card Id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "primary": {
              "title": "Is card default for paying",
              "type": "boolean",
              "example": true
            },
            "createdOn": {
              "title": "Date created",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "type": {
              "title": "Card type",
              "type": "string",
              "example": "BANKCARD"
            },
            "name": {
              "title": "Name on card",
              "type": "string",
              "example": "JOHN DOE"
            },
            "cardNumber": {
              "title": "card number",
              "type": "string",
              "example": "xxxx-xxxx-xxxx-1234"
            },
            "expiryMonth": {
              "title": "Month that card expires on",
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "expiryYear": {
              "title": "Year that card expires on",
              "type": "integer",
              "format": "int32",
              "example": 2027
            },
            "expired": {
              "title": "Is card expired",
              "type": "boolean",
              "example": false
            }
          }
        },
        "PaymentCardResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentCard"
              }
            }
          }
        },
        "CreateBankAccount": {
          "required": [
            "accountName",
            "paymentMethodType",
            "token"
          ],
          "type": "object",
          "properties": {
            "paymentMethodType": {
              "title": "Payment method type",
              "pattern": "(SEPA_DIRECT_DEBIT)",
              "type": "string",
              "description": "\n* Specifies the payment method type\n* SEPA_DIRECT_DEBIT",
              "example": "SEPA_DIRECT_DEBIT"
            },
            "token": {
              "title": "Token",
              "type": "string",
              "example": "d12skjfhdasghrew"
            },
            "accountName": {
              "title": "Account name",
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "example": "JOHN DOE"
            },
            "iban": {
              "title": "International bank account number",
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "example": "AT483200000012345864"
            }
          },
          "description": "Create bank account payment method"
        },
        "BankAccount": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Payment method id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "primary": {
              "title": "Is payment method default for paying",
              "type": "boolean",
              "example": true
            },
            "createdOn": {
              "title": "Date created",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "accountName": {
              "title": "Account name",
              "type": "string",
              "example": "JOHN DOE"
            },
            "iban": {
              "title": "International bank account number",
              "type": "string",
              "example": "AT483200000012345864"
            },
            "bic": {
              "title": "Bank identifier code",
              "type": "string",
              "example": "CTBAAU2S"
            }
          }
        },
        "BankAccountResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BankAccount"
              }
            }
          }
        },
        "ContractCreate": {
          "required": [
            "planCode",
            "status"
          ],
          "type": "object",
          "properties": {
            "startDate": {
              "title": "Contract start date in epoc time",
              "type": "string",
              "format": "date-time",
              "example": "2023-05-15T12:21:06-07:00"
            },
            "endDate": {
              "title": "Contract end date in epoc time",
              "type": "string",
              "format": "date-time",
              "example": "2023-05-15T12:21:06-07:00"
            },
            "lastDateForEtf": {
              "title": "Last date for etf in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2023-05-15T12:21:06-07:00"
            },
            "status": {
              "title": "Contract initialization status",
              "pattern": "(ACTIVE|SUSPENDED|CLOSED_BY_CUSTOMER|CLOSED|CLOSED_AUTOSWAP)",
              "type": "string",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "SUSPENDED",
                "CLOSED_BY_CUSTOMER",
                "CLOSED",
                "CLOSED_AUTOSWAP"
              ]
            },
            "couponCode": {
              "title": "Coupon code",
              "type": "string",
              "example": "100005"
            },
            "privateEntityPolicy": {
              "title": "Private policy",
              "pattern": "(PROPERTY|SITE|CHARGER)",
              "type": "string",
              "example": "PROPERTY",
              "enum": [
                "PROPERTY",
                "SITE",
                "CHARGER"
              ]
            },
            "privateEntityId": {
              "title": "Private policy id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "planCode": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "vin": {
              "title": "Vehicle identification number",
              "type": "string",
              "example": "241343643"
            },
            "percentageDiscount": {
              "title": "Discount in percentage",
              "type": "number",
              "example": 12.5
            },
            "monthlyDiscountAmount": {
              "title": "Recurring monthly discount until the end of the contract",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 10
            },
            "cardsToOrder": {
              "title": "Number of cards to order",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "oemCardNumber": {
              "title": "Original equipment manufacturer card number",
              "type": "string",
              "example": "212354"
            },
            "waivePlanSetupFee": {
              "title": "Waive plan registration fee",
              "type": "boolean",
              "example": true
            },
            "useNewPlanEtfDate": {
              "title": "Use new plan early termination date",
              "type": "boolean",
              "example": false
            },
            "externalId": {
              "title": "External property for filtering",
              "type": "string",
              "example": "a1d2f"
            }
          },
          "description": "Add contract object"
        },
        "Contract": {
          "type": "object",
          "properties": {
            "contractId": {
              "title": "Contract Id",
              "type": "string",
              "example": "8000000001"
            },
            "startDate": {
              "title": "Contract start date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "endDate": {
              "title": "Contract end date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "lastDateForEtf": {
              "title": "Contract last date for early termination fee",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "etf": {
              "title": "Early termination fee",
              "type": "number",
              "example": 10
            },
            "status": {
              "title": "Contract initialization status",
              "type": "string",
              "description": "Specifies the contract initialization status\n* ACTIVE\n* SUSPENDED\n* CLOSED_BY_CUSTOMER\n* CLOSED\n* CLOSED_AUTOSWAP",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "SUSPENDED",
                "CLOSED_BY_CUSTOMER",
                "CLOSED",
                "CLOSED_AUTOSWAP"
              ]
            },
            "couponCode": {
              "title": "Coupon code",
              "type": "string",
              "example": "100005"
            },
            "privateEntityPolicy": {
              "title": "Private policy",
              "type": "string",
              "example": "PROPERTY",
              "enum": [
                "PROPERTY",
                "SITE",
                "CHARGER"
              ]
            },
            "privateEntityId": {
              "title": "Private policy id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "vin": {
              "title": "Vehicle identification number",
              "type": "string",
              "example": "241343643"
            },
            "percentageDiscount": {
              "title": "Discount in percentage",
              "type": "number",
              "example": 12.5
            },
            "monthlyDiscountAmount": {
              "title": "Recurring monthly discount until the end of the contract",
              "type": "number",
              "example": 10
            },
            "closureDate": {
              "title": "Contract closure date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "waivePlanSetupFee": {
              "title": "Waive plan registration fee",
              "type": "boolean",
              "example": true
            },
            "useNewPlanEtfDate": {
              "title": "Use new plan early termination date",
              "type": "boolean",
              "example": false
            },
            "externalId": {
              "title": "External property for filtering",
              "type": "string",
              "example": "a1d2f"
            },
            "amountUsed": {
              "title": "The credit amount used until now",
              "type": "number",
              "example": 10
            },
            "creditBalance": {
              "title": "Credit balance",
              "type": "number",
              "example": 30
            },
            "plan": {
              "$ref": "#/components/schemas/ContractPlan"
            }
          }
        },
        "ExtendedContractResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Contract"
              }
            }
          }
        },
        "ContractFilter": {
          "type": "object",
          "properties": {
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            }
          },
          "description": "Filter object to be used for searching"
        },
        "AdHocContractCreate": {
          "required": [
            "amount"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Amount",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 30
            },
            "externalId": {
              "title": "External property for filtering",
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "example": "a1d2f"
            }
          },
          "description": "Add ad hoc contract object"
        },
        "Credit": {
          "type": "object",
          "properties": {
            "contractId": {
              "title": "Contract Id",
              "type": "string",
              "example": "8000000001"
            },
            "status": {
              "title": "Contract status",
              "type": "string",
              "example": "ACTIVE"
            },
            "creditBalance": {
              "title": "Credit balance",
              "type": "number",
              "example": 30
            },
            "currency": {
              "title": "Currency type",
              "type": "string",
              "example": "HUF"
            },
            "amountUsed": {
              "title": "The credit amount used until now",
              "type": "number",
              "example": 10
            },
            "externalId": {
              "title": "External property for filtering",
              "type": "string",
              "example": "a1d2f"
            }
          }
        },
        "CreditResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Credit"
              }
            }
          }
        },
        "ChargingAbilityReservationRequest": {
          "type": "object",
          "properties": {
            "connectorId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ChargingAbilityChargeRequest": {
          "required": [
            "connectorId"
          ],
          "type": "object",
          "properties": {
            "connectorId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "AutoCharge": {
          "type": "object",
          "properties": {
            "status": {
              "title": "status",
              "type": "string",
              "description": "\n* Specifies the enrollment status\n* SUCCESS\n* FAILURE\n* PENDING\n* REJECTED",
              "example": "SUCCESS"
            },
            "endTime": {
              "title": "Enrollment end time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            }
          }
        },
        "AutoChargeResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AutoCharge"
              }
            }
          }
        },
        "SuspendCardResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SuspendCards"
              }
            }
          }
        },
        "SuspendCards": {
          "type": "object",
          "properties": {
            "accountNumber": {
              "type": "integer",
              "format": "int32"
            },
            "cardIds": {
              "title": "List of modified cards ids",
              "type": "array",
              "example": [
                12,
                52,
                31
              ],
              "items": {
                "title": "List of modified cards ids",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "BatchCardAssign": {
          "required": [
            "cardIds"
          ],
          "type": "object",
          "properties": {
            "cardIds": {
              "title": "Card Ids",
              "maxItems": 100,
              "minItems": 0,
              "type": "array",
              "example": [
                213,
                4534
              ],
              "items": {
                "title": "Card Ids",
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "description": "Batch card assign object"
        },
        "BillingTransactionRefundCreate": {
          "required": [
            "amount",
            "billingProductType",
            "invoiceNumber"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Total amount to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 123
            },
            "billingProductType": {
              "title": "Product type",
              "pattern": "(REFUND_PAID)",
              "type": "string",
              "example": "REFUND_PAID",
              "enum": [
                "REFUND_PAID"
              ]
            },
            "invoiceNumber": {
              "title": "Invoice number",
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "example": 214234
            }
          },
          "description": "Add billing transaction refund object"
        },
        "BillingTransactionPenaltyCreate": {
          "required": [
            "amount",
            "billingProductType",
            "taxAmount"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Total amount to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 123
            },
            "taxAmount": {
              "title": "Total tax to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 13
            },
            "evTransactionId": {
              "title": "EV transaction id",
              "minimum": 0,
              "type": "integer",
              "format": "int64",
              "example": 244
            },
            "billingProductType": {
              "title": "Product type",
              "pattern": "(EARLY_TERMINATION_FEE|DISCONNECTION_FEE|OUTSTANDING_ACCOUNT_ACTIVITY|LATE_PAYMENT_FEE|PENALTY)",
              "type": "string",
              "example": "DISCONNECTION_FEE",
              "enum": [
                "EARLY_TERMINATION_FEE",
                "DISCONNECTION_FEE",
                "OUTSTANDING_ACCOUNT_ACTIVITY",
                "LATE_PAYMENT_FEE",
                "PENALTY"
              ]
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "This is a comment"
            }
          },
          "description": "Add billing transaction penalty object"
        },
        "BillingTransactionExternalPaymentCreate": {
          "required": [
            "amount",
            "billingProductType"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Total amount to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 123
            },
            "billingProductType": {
              "title": "Product type",
              "pattern": "(ACH_PAYMENT_TO_CUSTOMER|CHECK_PAYMENT_TO_CUSTOMER|CARD_PAYMENT_TO_CUSTOMER)",
              "type": "string",
              "example": "ACH_PAYMENT_TO_CUSTOMER",
              "enum": [
                "ACH_PAYMENT_TO_CUSTOMER",
                "CHECK_PAYMENT_TO_CUSTOMER",
                "CARD_PAYMENT_TO_CUSTOMER"
              ]
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "This is a comment"
            }
          },
          "description": "Add billing transaction external payment object"
        },
        "BillingTransactionCreditCreate": {
          "required": [
            "amount",
            "billingProductType"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Total amount to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 123
            },
            "taxAmount": {
              "title": "Total tax to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 13
            },
            "billingProductType": {
              "title": "Product type",
              "pattern": "(CREDIT_ON_ACCOUNT|DEBIT_ON_ACCOUNT)",
              "type": "string",
              "example": "CREDIT_ON_ACCOUNT",
              "enum": [
                "CREDIT_ON_ACCOUNT",
                "DEBIT_ON_ACCOUNT"
              ]
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "This is a comment"
            }
          },
          "description": "Add billing transaction credit object"
        },
        "BillingTransactionContractCreate": {
          "required": [
            "amount",
            "billingProductType"
          ],
          "type": "object",
          "properties": {
            "contractId": {
              "title": "Contract Id",
              "type": "string",
              "example": "8000000001"
            },
            "billingProductType": {
              "title": "Product type",
              "pattern": "(RFID_CARD_PURCHASE|SETUP_FEE|SUBSCRIPTION_FEE|MONTHLY_USAGE_CREDIT)",
              "type": "string",
              "example": "RFID_CARD_PURCHASE",
              "enum": [
                "RFID_CARD_PURCHASE",
                "SETUP_FEE",
                "SUBSCRIPTION_FEE",
                "MONTHLY_USAGE_CREDIT"
              ]
            },
            "amount": {
              "title": "Total amount to charge",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 123
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "This is a comment"
            }
          },
          "description": "Add billing transaction contract object"
        },
        "UserNotificationPreferencePatch": {
          "title": "List of users notification preferences to update",
          "required": [
            "eventType"
          ],
          "type": "object",
          "properties": {
            "cellApp": {
              "title": "Receive event notifications via push",
              "type": "boolean",
              "example": false
            },
            "email": {
              "title": "Receive event notifications via email",
              "type": "boolean",
              "example": true
            },
            "sms": {
              "title": "Receive event notifications via sms",
              "type": "boolean",
              "example": false
            },
            "eventType": {
              "title": "Event type name",
              "type": "string",
              "example": "ORDER_CARD"
            }
          }
        },
        "UserNotificationPreferencesPatch": {
          "type": "object",
          "properties": {
            "userNotificationPreferencePatch": {
              "title": "List of users notification preferences to update",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserNotificationPreferencePatch"
              }
            }
          },
          "description": "Object that defines user notification preferences to update"
        },
        "UserNotificationPreferenceResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserNotificationPreference"
              }
            }
          }
        },
        "AddressUpdate": {
          "title": "Address details",
          "type": "object",
          "properties": {
            "address1": {
              "title": "Address",
              "maxLength": 200,
              "minLength": 1,
              "type": "string",
              "example": "Hacharash 4"
            },
            "address2": {
              "title": "Address 2",
              "type": "string",
              "example": "Bldg D Mail Drop: D303"
            },
            "city": {
              "title": "City",
              "maxLength": 45,
              "minLength": 1,
              "type": "string",
              "example": "Hod Hasharon"
            },
            "stateCode": {
              "title": "Usa state code",
              "type": "string",
              "example": "NY"
            },
            "countryCode": {
              "title": "Country code",
              "maxLength": 3,
              "minLength": 3,
              "type": "string",
              "example": "ISR"
            },
            "zoneId": {
              "title": "ZoneId",
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "example": "America/Los_Angeles"
            },
            "zipCode": {
              "title": "Zipcode",
              "maxLength": 10,
              "minLength": 1,
              "type": "string",
              "example": "1234567890"
            },
            "municipality": {
              "title": "Municipality",
              "type": "string",
              "example": "Worcester"
            },
            "region": {
              "title": "Region",
              "type": "string",
              "example": "South Atlantic"
            }
          }
        },
        "SiteUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Site name",
              "maxLength": 100,
              "minLength": 2,
              "type": "string",
              "example": "Raley's Gardnerville"
            },
            "displayName": {
              "title": "Site display name",
              "maxLength": 100,
              "minLength": 2,
              "type": "string",
              "example": "Raley's Gardnerville"
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "112233"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "546789"
            },
            "propertyId": {
              "title": "Property id",
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "type": {
              "title": "Site type",
              "pattern": "(STANDARD|FREEDOM_STATIONS|STANDALONE_STATIONS|READY_FOR_EV|READY_FOR_EV_MULTI_FAMILY|EQUIPMENT|TESTING)",
              "type": "string",
              "example": "STANDARD",
              "enum": [
                "STANDARD",
                "FREEDOM_STATIONS",
                "STANDALONE_STATIONS",
                "READY_FOR_EV",
                "READY_FOR_EV_MULTI_FAMILY",
                "EQUIPMENT",
                "TESTING"
              ]
            },
            "provisioningStatus": {
              "title": "Site provisioning status",
              "pattern": "(PLANNED|READY_FOR_PROVISIONING|PROVISIONED|SCHEDULED_FOR_DECOMMISSIONING|DECOMMISSIONED|DENETWORKED|CLOSED)",
              "type": "string",
              "example": "PLANNED",
              "enum": [
                "PLANNED",
                "READY_FOR_PROVISIONING",
                "PROVISIONED",
                "SCHEDULED_FOR_DECOMMISSIONING",
                "DECOMMISSIONED",
                "DENETWORKED",
                "CLOSED"
              ]
            },
            "utilityCompanyId": {
              "title": "Utility company id",
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            "meterNumber": {
              "title": "Meter number",
              "type": "string",
              "example": "I92194213"
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 208
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 200
            },
            "energyStorage": {
              "title": "Energy storage",
              "type": "boolean",
              "example": false
            },
            "renewableEnergyGeneration": {
              "title": "Renewable energy generation",
              "type": "boolean",
              "example": false
            },
            "lockCombination": {
              "title": "Lock combination",
              "type": "string",
              "example": "1234"
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": false
            },
            "posId": {
              "title": "Pos id",
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "Comments"
            },
            "directions": {
              "title": "Directions",
              "type": "string",
              "example": "Directions..."
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": -73.985425
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": 40.75801
            },
            "hasGate": {
              "title": "Has gate",
              "type": "boolean",
              "example": false
            },
            "locationSetting": {
              "title": "Location setting",
              "pattern": "(INDOOR|OUTDOOR)",
              "type": "string",
              "example": "INDOOR",
              "enum": [
                "INDOOR",
                "OUTDOOR"
              ]
            },
            "locationType": {
              "title": "Location type",
              "pattern": "(HOME|HOTEL|PARKING_LOT|MALL|HIGHWAY|GAS_STATION|PUBLIC_PARKING|COMMERCIAL|DSO|GOVERNMENT|WORK)",
              "type": "string",
              "example": "MALL",
              "enum": [
                "HOME",
                "HOTEL",
                "PARKING_LOT",
                "MALL",
                "HIGHWAY",
                "GAS_STATION",
                "PUBLIC_PARKING",
                "COMMERCIAL",
                "DSO",
                "GOVERNMENT",
                "WORK"
              ]
            },
            "chargerAccessLevel": {
              "title": "Charger access level",
              "pattern": "(PUBLIC|PRIVATE|TAXI_ONLY)",
              "type": "string",
              "example": "PUBLIC",
              "enum": [
                "PUBLIC",
                "PRIVATE",
                "TAXI_ONLY"
              ]
            },
            "energyPolicyId": {
              "title": "Energy policy id",
              "type": "integer",
              "format": "int64",
              "example": 25
            },
            "address": {
              "$ref": "#/components/schemas/AddressUpdate"
            }
          },
          "description": "Site update object"
        },
        "SiteResourcePatch": {
          "required": [
            "fileName"
          ],
          "type": "object",
          "properties": {
            "fileName": {
              "title": "New file name",
              "type": "string",
              "example": "3cacc2dd-051a-4327-92fb-4a4f692630f8"
            }
          },
          "description": "Site resource create object"
        },
        "ExternalSiteUpdate": {
          "type": "object",
          "properties": {
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "112233"
            },
            "displayName": {
              "title": "Site display name",
              "maxLength": 100,
              "minLength": 1,
              "type": "string",
              "example": "Raley's Gardnerville"
            },
            "locationSetting": {
              "title": "Location setting",
              "pattern": "(INDOOR|OUTDOOR)",
              "type": "string",
              "example": "INDOOR",
              "enum": [
                "INDOOR",
                "OUTDOOR"
              ]
            },
            "locationType": {
              "title": "Location type",
              "pattern": "(HOME|HOTEL|PARKING_LOT|MALL|HIGHWAY|GAS_STATION|PUBLIC_PARKING|COMMERCIAL|DSO|GOVERNMENT|WORK)",
              "type": "string",
              "example": "MALL",
              "enum": [
                "HOME",
                "HOTEL",
                "PARKING_LOT",
                "MALL",
                "HIGHWAY",
                "GAS_STATION",
                "PUBLIC_PARKING",
                "COMMERCIAL",
                "DSO",
                "GOVERNMENT",
                "WORK"
              ]
            },
            "hasGate": {
              "title": "Has gate",
              "type": "boolean",
              "example": false
            }
          },
          "description": "External site update object"
        },
        "PropertyUpdate": {
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Property name",
              "type": "string",
              "example": "G-center"
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "112233"
            },
            "status": {
              "title": "Status",
              "pattern": "(PLANNED|READY_FOR_PROVISIONING|PROVISIONED|SCHEDULED_FOR_DECOMMISSIONING|DECOMMISSIONED|DENETWORKED|CONTRACT_TERMINATED|CONTRACT_EXPIRED)",
              "type": "string",
              "example": "PLANNED",
              "enum": [
                "PLANNED",
                "READY_FOR_PROVISIONING",
                "PROVISIONED",
                "SCHEDULED_FOR_DECOMMISSIONING",
                "DECOMMISSIONED",
                "DENETWORKED",
                "CONTRACT_TERMINATED",
                "CONTRACT_EXPIRED"
              ]
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Property description"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "546789"
            },
            "latitude": {
              "title": "Latitude",
              "type": "number",
              "example": -73.985542
            },
            "longitude": {
              "title": "Longitude",
              "type": "number",
              "example": 40.758013
            },
            "showExternalCoupons": {
              "title": "Show external coupons",
              "type": "boolean",
              "example": false
            },
            "contactPersonId": {
              "title": "Contact person id",
              "type": "integer",
              "format": "int64",
              "example": 465
            },
            "electricalTopologyId": {
              "title": "Electrical topology id",
              "type": "integer",
              "format": "int64",
              "example": 111
            },
            "provisionedDate": {
              "title": "Provisioned date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "energyPolicyId": {
              "title": "Energy policy id",
              "type": "integer",
              "format": "int64",
              "example": 25
            },
            "locationType": {
              "title": "Location type",
              "pattern": "(DEALERSHIP|MULTI_FAMILY|WORKPLACE|RETAIL|GARAGE|HIGHWAY|BIG_TOWN|SMALL_TOWN|COMMUTER_TRANSIT|RURAL|NEIGHBORHOOD)",
              "type": "string",
              "example": "NEIGHBORHOOD",
              "enum": [
                "DEALERSHIP",
                "MULTI_FAMILY",
                "WORKPLACE",
                "RETAIL",
                "GARAGE",
                "HIGHWAY",
                "BIG_TOWN",
                "SMALL_TOWN",
                "COMMUTER_TRANSIT",
                "RURAL",
                "NEIGHBORHOOD"
              ]
            },
            "address": {
              "$ref": "#/components/schemas/AddressUpdate"
            }
          },
          "description": "Property update object"
        },
        "ExternalPropertyUpdate": {
          "type": "object",
          "properties": {
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "112233"
            }
          },
          "description": "External property update object"
        },
        "OperatorPatch": {
          "type": "object",
          "properties": {
            "email": {
              "title": "Email",
              "type": "string",
              "example": "john.doe@driivz.com"
            },
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "role": {
              "title": "Primary role",
              "type": "string",
              "example": "Business_Sales"
            },
            "subRoles": {
              "title": "Collection of roles",
              "uniqueItems": true,
              "type": "array",
              "example": [
                "All_Advanced_Reports",
                "Advanced_Reports_(Basic)"
              ],
              "items": {
                "title": "Collection of roles",
                "type": "string",
                "example": "[\"All_Advanced_Reports\",\"Advanced_Reports_(Basic)\"]"
              }
            },
            "companyId": {
              "title": "Company id",
              "type": "integer",
              "format": "int64",
              "example": 154
            },
            "chargerGroupId": {
              "title": "Charger group id",
              "type": "integer",
              "format": "int64",
              "example": 1402
            },
            "chargerHostId": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 272
            }
          },
          "description": "Update operator object"
        },
        "PolicyUpdate": {
          "type": "object",
          "properties": {
            "strategy": {
              "title": "Strategy",
              "pattern": "(EVEN_SPREAD|FIFO)",
              "type": "string",
              "example": "EVEN_SPREAD",
              "enum": [
                "EVEN_SPREAD",
                "FIFO"
              ]
            },
            "prioritizeByBillingPlan": {
              "title": "Prioritize by billing plan",
              "type": "boolean",
              "example": true
            },
            "prioritizeBySoc": {
              "title": "Prioritize by state of charge",
              "type": "boolean",
              "example": true
            },
            "targetSoc": {
              "title": "Target state of charge",
              "type": "integer",
              "format": "int32",
              "example": 50
            },
            "currentAfterSocTarget": {
              "title": "Current after reach soc target",
              "type": "number",
              "example": 44.2
            },
            "prioritizeByDriverProfile": {
              "title": "Prioritize by driver profile",
              "type": "boolean",
              "example": true
            },
            "prioritizeByExternalIntegration": {
              "title": "Prioritize by external integration",
              "type": "boolean",
              "example": true
            },
            "releaseUnusedAllocatedCurrentIfCurrentStableDuring": {
              "title": "Release unused allocated current if current stable during",
              "type": "integer",
              "format": "int32",
              "example": 50
            },
            "prioritizeByEnergyRequirement": {
              "title": "Prioritize by energy requirement",
              "type": "boolean",
              "example": true
            },
            "slowChargeDepartureTimeFromStart": {
              "title": "Slow charge departure time from start in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "fastChargeDepartureTimeFromStart": {
              "title": "Fast charge departure time from start in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "departureTimeAbsolute": {
              "title": "Departure time absolute in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "defaultVehicleEnergyReq": {
              "title": "Default vehicle energy requirement",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "defaultMinChargeCurrent": {
              "title": "Default min charge current",
              "type": "integer",
              "format": "int32",
              "example": 6
            },
            "dropChargePriceThreshold": {
              "title": "Drop charge price threshold",
              "type": "number",
              "example": 44.2
            },
            "dropChargePercentage": {
              "title": "Drop charge percentage",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "stopChargePriceThreshold": {
              "title": "Stop charge price threshold",
              "type": "number",
              "description": "The price at which to stop the power a charger receives.",
              "example": 44.2
            },
            "utilityDataSource": {
              "title": "Utility data source",
              "type": "string",
              "example": "OPEN_ADR",
              "enum": [
                "INTERNAL, OPEN_ADR, OSCP"
              ]
            },
            "mainInputCircuitResourceId": {
              "title": "Main input circuit resource id",
              "type": "string",
              "example": "3250"
            },
            "peakShavingRate": {
              "title": "Peak shaving rate",
              "type": "number",
              "description": "Energy use limit when peak shaving is applied, in kW",
              "example": 44.2
            },
            "renewableEnergyGeneration": {
              "title": "Renewable energy generation",
              "type": "boolean",
              "example": true
            }
          },
          "description": "Policy update object"
        },
        "CustomerTariffUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "Maven"
            },
            "tariffCode": {
              "title": "Tariff code",
              "maxLength": 250,
              "minLength": 1,
              "type": "string",
              "example": "\"78789\""
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a04f031c-1941-4a7f-a7f4-296749b53a18"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "This is a description"
            },
            "displayDescription": {
              "title": "Display description",
              "type": "string",
              "example": "This is a description"
            },
            "externalTariffId": {
              "title": "External tariff id",
              "type": "string",
              "example": "External tariff id"
            },
            "fixedPrice": {
              "title": "Fixed price",
              "type": "number",
              "example": 11.11
            },
            "minFee": {
              "title": "Minimum fee",
              "type": "number",
              "example": 2.32
            },
            "transactionFee": {
              "title": "Transaction fee",
              "type": "number",
              "example": 0.32
            },
            "maxChargeTimeInMinutes": {
              "title": "Max charge time in minutes",
              "type": "number",
              "format": "float",
              "example": 1.5
            },
            "maxChargeAmount": {
              "title": "Max charge amount",
              "type": "number",
              "example": 80.5
            },
            "maxChargeKwh": {
              "title": "Max charge Kwh",
              "type": "number",
              "example": 50.1
            },
            "fixedParkingFee": {
              "title": "Fixed parking fee",
              "type": "number",
              "example": 21.5
            },
            "hourlyParkingRate": {
              "title": "Hourly parking rate",
              "type": "number",
              "example": 212.2
            },
            "overtimePenalty": {
              "title": "Overtime penalty",
              "type": "number",
              "example": 86.74
            },
            "utilityTariffId": {
              "title": "Utility tariff id",
              "type": "integer",
              "format": "int64",
              "example": 432
            },
            "addedCostToUtilityRate": {
              "title": "Added cost to utility rate",
              "type": "number",
              "example": 15.2
            },
            "overtimeChargeBehaviour": {
              "title": "Overtime charge behaviour",
              "pattern": "(STOP_CHARGE|APPLY_PENALTY|NO_BEHAVIOUR)",
              "type": "string",
              "description": "Specifies overtime charge behaviour\n* NO_BEHAVIOUR\n* STOP_CHARGE\n* APPLY_PENALTY",
              "example": "APPLY_PENALTY",
              "enum": [
                "STOP_CHARGE",
                "APPLY_PENALTY",
                "NO_BEHAVIOUR"
              ]
            },
            "firstLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriodUpdate"
            },
            "secondLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriodUpdate"
            },
            "thirdLevelPeriod": {
              "$ref": "#/components/schemas/LevelPeriodUpdate"
            }
          },
          "description": "Customer tariff update object"
        },
        "LevelPeriodUpdate": {
          "title": "Third level period details",
          "type": "object",
          "properties": {
            "durationInHours": {
              "title": "Duration in hours",
              "type": "number",
              "example": 21.43
            },
            "kwhRate": {
              "title": "Kwh rate",
              "type": "number",
              "example": 99.99
            },
            "plugInMinuteRate": {
              "title": "Plug in minute rate",
              "type": "number",
              "example": 1.2
            },
            "plugInHourlyRate": {
              "title": "Plug in hourly rate",
              "type": "number",
              "example": 0.4
            },
            "minuteRate": {
              "title": "Minute rate",
              "type": "number",
              "example": 1.1
            },
            "hourlyRate": {
              "title": "Hourly rate",
              "type": "number",
              "example": 2.1
            }
          }
        },
        "ReserveNowUpdate": {
          "type": "object",
          "properties": {
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 11.1
            },
            "sameFeeForNoShow": {
              "title": "Same fee for no show",
              "type": "boolean",
              "example": false
            }
          },
          "description": "Reservation tariff now update object"
        },
        "ReserveNowTermUpdate": {
          "type": "object",
          "properties": {
            "length": {
              "title": "Reservation Length",
              "type": "number",
              "format": "float",
              "example": 35.5
            },
            "fee": {
              "title": "Reservation Fee",
              "type": "number",
              "example": 45.5
            },
            "noShowFee": {
              "title": "No Show Fee",
              "type": "number",
              "example": 67.7
            }
          },
          "description": "Customer reservation tariff term update object"
        },
        "ReserveByDateTermsUpdate": {
          "type": "object",
          "properties": {
            "allowReservation": {
              "title": "Allow reservation",
              "type": "boolean",
              "example": true
            },
            "chargePerMinute": {
              "title": "Charge per minute",
              "type": "boolean",
              "example": false
            },
            "sameFeeForNoShow": {
              "title": "Same fee for no show",
              "type": "boolean",
              "example": false
            },
            "onlyChargeWhenReserved": {
              "title": "Only charge when reserved",
              "type": "boolean",
              "example": false
            },
            "fee": {
              "title": "Fee",
              "type": "number",
              "example": 12.5
            },
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 9.2
            },
            "noShowFee": {
              "title": "No show fee",
              "type": "number",
              "example": 4.0
            }
          },
          "description": "Reservation tariff by date update object"
        },
        "CustomerReservationTariffByDate": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 456
            },
            "allowReservation": {
              "title": "Allow reservation",
              "type": "boolean",
              "example": true
            },
            "chargePerMinute": {
              "title": "Charge per minute",
              "type": "boolean",
              "example": false
            },
            "sameFeeForNoShow": {
              "title": "Same fee for no show",
              "type": "boolean",
              "example": false
            },
            "onlyChargeWhenReserved": {
              "title": "Only charge when reserved",
              "type": "boolean",
              "example": false
            },
            "fee": {
              "title": "Fee",
              "type": "number",
              "example": 12.5
            },
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 9.2
            },
            "noShowFee": {
              "title": "No show fee",
              "type": "number",
              "example": 4.0
            }
          }
        },
        "CustomerReservationTariffByDateResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerReservationTariffByDate"
              }
            }
          }
        },
        "CustomerPlanProfileUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "description"
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "balanceType": {
              "title": "Balance type",
              "pattern": "(PRE_PAID|POST_PAID|NON_PAYING|PAYMENT_IMMEDIATELY|POST_PAID_IMMEDIATELY)",
              "type": "string",
              "example": "POST_PAID",
              "enum": [
                "PRE_PAID",
                "POST_PAID",
                "NON_PAYING",
                "PAYMENT_IMMEDIATELY",
                "POST_PAID_IMMEDIATELY"
              ]
            },
            "costFactor": {
              "title": "Cost factor",
              "type": "number",
              "example": 10
            },
            "appearanceOrder": {
              "title": "Appearance order",
              "type": "integer",
              "format": "int32",
              "example": 34
            },
            "terminationBehavior": {
              "title": "Termination behavior",
              "pattern": "(TERMINATE|EVERGREEN|ROLLOVER)",
              "type": "string",
              "example": "ROLLOVER",
              "enum": [
                "TERMINATE",
                "EVERGREEN",
                "ROLLOVER"
              ]
            },
            "planDuration": {
              "title": "Plan duration",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "customerRolloverPlanCode": {
              "title": "Customer rollover plan code",
              "type": "string",
              "example": "OTG DC"
            },
            "subscriptionName": {
              "title": "Subscription name",
              "type": "string",
              "example": "comp name"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "category": {
              "title": "Billing plan category",
              "pattern": "(SINGLE_TARIFF_FOR_ALL_DRIVERS|MEMBERSHIP|ROAMING|OTP)",
              "type": "string",
              "example": "MEMBERSHIP",
              "enum": [
                "SINGLE_TARIFF_FOR_ALL_DRIVERS",
                "MEMBERSHIP",
                "ROAMING",
                "OTP"
              ]
            },
            "discountRate": {
              "title": "Discount rate",
              "type": "number",
              "example": 12
            },
            "minCommitmentInMonths": {
              "title": "Minimum commitment months",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "etf": {
              "title": "Early termination fee",
              "type": "number",
              "example": 10
            },
            "waiveRolloverPlanSetupFee": {
              "title": "Waive rollover plan setup fee",
              "type": "boolean",
              "example": false
            },
            "rolloverSwitchDate": {
              "title": "Rollover date (when the setting Plan will be switch to rollover plan) in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2022-10-15T12:21:06-07:00"
            },
            "resetEtfOnRollover": {
              "title": "Reset early termination fee on rollover",
              "type": "boolean",
              "example": false
            },
            "showOnRegistration": {
              "title": "Show on registration",
              "type": "boolean",
              "example": false
            },
            "displayOnly": {
              "title": "Display only",
              "type": "boolean",
              "example": false
            },
            "showExistingCardInputOnRegistration": {
              "title": "Show existing card input on registration",
              "type": "boolean",
              "example": false
            },
            "showExistingVehicleInputOnRegistration": {
              "title": "Show existing vehicle input on registration",
              "type": "boolean",
              "example": false
            },
            "requireVehicleInformation": {
              "title": "Require vehicle information",
              "type": "boolean",
              "example": false
            },
            "licenseNumberLabelKeySuffix": {
              "title": "License number label key suffix",
              "type": "string",
              "example": "taxiLicenseNumber"
            },
            "showInFilterList": {
              "title": "Show in filter list",
              "type": "boolean",
              "example": false
            },
            "excludeFromDefaultPlanFilter": {
              "title": "Exclude from default plan filter",
              "type": "boolean",
              "example": false
            },
            "hiddenFromDriver": {
              "title": "Hidden from driver",
              "type": "boolean",
              "example": false
            },
            "includeInQaReport": {
              "title": "Include in qa report",
              "type": "boolean",
              "example": false
            },
            "disableSmartCharging": {
              "title": "Disable smart charging",
              "type": "boolean",
              "example": false
            },
            "allowDisableSmartCharging": {
              "title": "Allow disable smart charging",
              "type": "boolean",
              "example": false
            },
            "trackAnalytics": {
              "title": "Track analytics",
              "type": "boolean",
              "example": false
            },
            "allowRoaming": {
              "title": "Allow roaming",
              "type": "boolean",
              "example": false
            },
            "requireVin": {
              "title": "Require VIN",
              "type": "boolean",
              "example": false
            },
            "vinOemId": {
              "title": "VIN OEM id",
              "type": "integer",
              "format": "int64",
              "example": 48
            },
            "showVinInputToDriver": {
              "title": "Show VIN input to driver",
              "type": "boolean",
              "example": false
            },
            "useVinSalesDateForContractEndDate": {
              "title": "Use VIN sales date for contract end date",
              "type": "boolean",
              "example": false
            },
            "cardBrandId": {
              "title": "Card brand id",
              "type": "integer",
              "format": "int64",
              "example": 44
            },
            "cardExternalOemId": {
              "title": "Card external OEM id",
              "type": "integer",
              "format": "int64",
              "example": 24
            },
            "requireChargeLocationAssignment": {
              "title": "Require charge location assignment",
              "type": "boolean",
              "example": false
            },
            "allowSelectionWithoutPaymentMethod": {
              "title": "Allow selection without payment method",
              "type": "boolean",
              "example": false
            },
            "financialCode": {
              "title": "Financial plan code",
              "type": "string",
              "example": "SUB_OTG"
            },
            "codeForExternalInterfaces": {
              "title": "Code for external interfaces",
              "type": "string",
              "example": "code"
            },
            "energyManagementPriority": {
              "title": "Energy management priority",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "filterDisplayCode": {
              "title": "Filter display code",
              "type": "string",
              "example": "filter-code"
            },
            "allowReserveNow": {
              "title": "Allow reserve now",
              "type": "boolean",
              "example": false
            },
            "allowReserveByDate": {
              "title": "Allow reservation by date",
              "type": "boolean",
              "example": false
            },
            "fixedInitialPaymentAmount": {
              "title": "Fixed initial payment amount",
              "type": "number",
              "example": 85
            },
            "excludeFromHostPayment": {
              "title": "Exclude from host payment",
              "type": "boolean",
              "example": false
            },
            "requireCardNumber": {
              "title": "Require card number",
              "type": "boolean",
              "example": false
            }
          },
          "description": "Customer plan update object"
        },
        "PlanProductUpdate": {
          "required": [
            "productType"
          ],
          "type": "object",
          "properties": {
            "productType": {
              "title": "Product type",
              "pattern": "(RFID_CARD_PURCHASE|SETUP_FEE|SUBSCRIPTION_FEE|MONTHLY_USAGE_CREDIT)",
              "type": "string",
              "description": "Specifies product type\n* RFID_CARD_PURCHASE\n* SETUP_FEE\n* SUBSCRIPTION_FEE\n* MONTHLY_USAGE_CREDIT",
              "example": "RFID_CARD_PURCHASE"
            },
            "price": {
              "title": "Price",
              "type": "number",
              "example": 30
            },
            "freeUnits": {
              "title": "Free units",
              "type": "number",
              "example": 10
            }
          },
          "description": "Plan product update object"
        },
        "PlanProductDelete": {
          "required": [
            "productType"
          ],
          "type": "object",
          "properties": {
            "productType": {
              "title": "Product type",
              "pattern": "(RFID_CARD_PURCHASE|SETUP_FEE|SUBSCRIPTION_FEE|MONTHLY_USAGE_CREDIT)",
              "type": "string",
              "description": "Specifies product type\n* RFID_CARD_PURCHASE\n* SETUP_FEE\n* SUBSCRIPTION_FEE\n* MONTHLY_USAGE_CREDIT",
              "example": "RFID_CARD_PURCHASE"
            }
          },
          "description": "Plan product delete object"
        },
        "PlanRegistrationDisplayUpdate": {
          "type": "object",
          "properties": {
            "registrationHeaderImageUrl": {
              "title": "Registration header image url",
              "type": "string",
              "example": "https://www.xxx.com/wp-content/uploads/2015/10/online-enrollment_hero.jpg"
            },
            "registrationImageHeader1": {
              "title": "Registration image header 1",
              "type": "string",
              "example": "GO Charging Plan"
            },
            "registrationImageHeader2": {
              "title": "Registration image header 2",
              "type": "string",
              "example": "On The Go"
            },
            "registrationTagLineHeader1": {
              "title": "Registration tagLine header 1",
              "type": "string",
              "example": "You are leading the charge and on your way to total range confidence."
            },
            "registrationTagLineHeader2": {
              "title": "Registration tagLine header 2",
              "type": "string",
              "example": "Welcome"
            }
          },
          "description": "Plan registration display update object"
        },
        "CustomerPlanRegistrationDisplay": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 452
            },
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "locale": {
              "title": "Locale",
              "type": "string",
              "example": "en_US"
            },
            "registrationHeaderImageUrl": {
              "title": "Registration header image url",
              "type": "string",
              "example": "https://www.xxx.com/wp-content/uploads/2015/10/online-enrollment_hero.jpg"
            },
            "registrationImageHeader1": {
              "title": "Registration image header 1",
              "type": "string",
              "example": "XX Charging Plan"
            },
            "registrationImageHeader2": {
              "title": "Registration image header 2",
              "type": "string",
              "example": "On The Go"
            },
            "registrationTagLineHeader1": {
              "title": "Registration tagLine header 1",
              "type": "string",
              "example": "You are leading the charge and on your way to total range confidence."
            },
            "registrationTagLineHeader2": {
              "title": "Registration tagLine header 2",
              "type": "string",
              "example": "Welcome"
            }
          }
        },
        "PlanRegistrationDisplayResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerPlanRegistrationDisplay"
              }
            }
          }
        },
        "PlanDisplayUpdate": {
          "type": "object",
          "properties": {
            "marketingOptInText": {
              "title": "Marketing opt",
              "type": "string",
              "example": "Marketing text"
            },
            "termsAndConditionsUrl": {
              "title": "Terms and conditions mobile url",
              "type": "string",
              "example": "https://www.xxxx.com/terms-conditions/"
            },
            "termsAgreement": {
              "title": "Terms agreement",
              "type": "string",
              "example": "By checking this box, you agree to the [ExternalTNC=\\\"Terms of Service\\\"]"
            },
            "externalTermsAndConditionsUrl": {
              "title": "External terms and conditions url",
              "type": "string",
              "example": "https://www.xxxx.com/terms-conditions/"
            },
            "externalTermsOfServiceUrl": {
              "title": "External terms of service url",
              "type": "string",
              "example": "https://www.xxx.com/terms-service/"
            },
            "notificationTemplateName": {
              "title": "Notification template name",
              "type": "string",
              "example": "Welcome-OTG"
            },
            "extraConfirmation": {
              "title": "Extra confirmation",
              "type": "string",
              "example": "text"
            },
            "htmlDescription": {
              "title": "Html description",
              "type": "string",
              "example": "description"
            },
            "mobileHtmlDescription": {
              "title": "Mobile html description",
              "type": "string",
              "example": "description"
            },
            "summaryHtmlDescription": {
              "title": "Summary html description",
              "type": "string",
              "example": "<div class=\\\"panel panel-default\\\">\\n <div class= ..."
            },
            "finalHtmlComments": {
              "title": "Final html comments",
              "type": "string",
              "example": "comment"
            },
            "displayCode": {
              "title": "Display code",
              "type": "string",
              "example": "EV123 Charge"
            }
          },
          "description": "Plan display update object"
        },
        "CustomerPlanDisplay": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 452
            },
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "code": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "locale": {
              "title": "Operator locale",
              "type": "string",
              "example": "en_US"
            },
            "displayCode": {
              "title": "Plan display code",
              "type": "string",
              "example": "Pay As You Go"
            },
            "filterDisplayCode": {
              "title": "Filter display code",
              "type": "string",
              "example": "Filter string"
            },
            "logo": {
              "title": "Logo",
              "type": "string",
              "example": "logo"
            },
            "marketingOptInText": {
              "title": "Marketing opt",
              "type": "string",
              "example": "Marketing text"
            },
            "termsAndConditionsUrl": {
              "title": "Terms and conditions mobile url",
              "type": "string",
              "example": "https://www.xxxx.com/terms-conditions/"
            },
            "termsAgreement": {
              "title": "Terms agreement",
              "type": "string",
              "example": "By checking this box, you agree to the [ExternalTNC=\\\"Terms of Service\\\"]"
            },
            "termsAndConditions": {
              "title": "Terms and conditions",
              "type": "string",
              "example": "Terms and conditions"
            },
            "externalTermsAndConditionsUrl": {
              "title": "External terms and conditions url",
              "type": "string",
              "example": "https://www.xxxx.com/terms-conditions/"
            },
            "externalTermsOfServiceUrl": {
              "title": "External terms of service url",
              "type": "string",
              "example": "https://www.xxx.com/terms-service/"
            },
            "notificationTemplatePackageId": {
              "title": "Notification template package id",
              "type": "integer",
              "format": "int64",
              "example": 34
            },
            "notificationTemplateName": {
              "title": "Notification template name",
              "type": "string",
              "example": "Welcome-OTG"
            },
            "requireExtraConfirmation": {
              "title": "Require extra confirmation",
              "type": "boolean",
              "example": false
            },
            "extraConfirmation": {
              "title": "Extra confirmation",
              "type": "string",
              "example": "text"
            },
            "htmlDescription": {
              "title": "Html description",
              "type": "string",
              "example": "description"
            },
            "mobileHtmlDescription": {
              "title": "Mobile html description",
              "type": "string",
              "example": "description"
            },
            "summaryHtmlDescription": {
              "title": "Summary html description",
              "type": "string",
              "example": "<div class=\\\"panel panel-default\\\">\\n <div class= ..."
            },
            "finalHtmlComments": {
              "title": "Final html comments",
              "type": "string",
              "example": "comment"
            }
          }
        },
        "PlanDisplayResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerPlanDisplay"
              }
            }
          }
        },
        "CustomerCountryCurrencyPlanUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Plan name",
              "type": "string",
              "example": "Pay As You Go"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "description"
            },
            "displayCode": {
              "title": "Display code",
              "type": "string",
              "example": "EV123 Charge"
            },
            "subscriptionName": {
              "title": "Subscription name",
              "type": "string",
              "example": "comp name"
            },
            "etf": {
              "title": "Early termination fee",
              "type": "number",
              "example": 10
            },
            "showOnRegistration": {
              "title": "Show on registration",
              "type": "boolean",
              "example": false
            },
            "energyManagementPriority": {
              "title": "Energy management priority",
              "type": "integer",
              "format": "int32",
              "example": 2
            }
          },
          "description": "Customer plan by country-currency update object"
        },
        "CustomerWalletUpdate": {
          "type": "object",
          "properties": {
            "autoPayEnabledRequired": {
              "title": "Allowed to charged without payment method",
              "type": "boolean",
              "example": true
            },
            "autoPayEnabled": {
              "title": "Auto pay enabled",
              "pattern": "(ENABLED|DISABLED)",
              "type": "string",
              "description": "\n* Specifies auto pay\n* ENABLED\n* DISABLED",
              "example": "DISABLED",
              "enum": [
                "ENABLED ,DISABLED"
              ]
            },
            "newAnniversaryDay": {
              "title": "New anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "billingCycleTerm": {
              "title": "Billing cycle term",
              "pattern": "(NONE|WEEKLY|BI_WEEKLY|MONTHLY)",
              "type": "string",
              "example": "WEEKLY",
              "enum": [
                "NONE",
                "WEEKLY",
                "BI_WEEKLY",
                "MONTHLY"
              ]
            },
            "concurrentCardChargingBehavior": {
              "title": "Concurrent card charging behavior",
              "pattern": "(ALLOW|DENY|STOP_CURRENT_CHARGE_AND_START_NEW)",
              "type": "string",
              "example": "ALLOW",
              "enum": [
                "ALLOW",
                "DENY",
                "STOP_CURRENT_CHARGE_AND_START_NEW"
              ]
            },
            "paymentTerms": {
              "title": "Payment terms in days",
              "type": "integer",
              "format": "int32",
              "example": 20
            }
          },
          "description": "Customer wallet update object"
        },
        "AccountWallet": {
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 1000006
            },
            "balance": {
              "title": "Balance",
              "type": "number",
              "example": 754.2
            },
            "autoCharge": {
              "title": "Enable automatic top-up",
              "type": "boolean",
              "example": true
            },
            "autoChargeThreshold": {
              "title": "Minimum balance for automatic top-up",
              "type": "number",
              "example": 2100
            },
            "autoChargeAmount": {
              "title": "Amount use for automatic top-up",
              "type": "number",
              "example": 6000
            },
            "anniversaryDay": {
              "title": "Anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "pendingUpdatedAnniversaryDay": {
              "title": "Pending update anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 15
            },
            "paymentTerms": {
              "title": "Delay time (in days) for paying an invoice",
              "type": "integer",
              "format": "int32",
              "example": 21
            },
            "autoPayEnabled": {
              "title": "Account billing payment status",
              "type": "string",
              "description": "\n* Specifies the payment status\n* ENABLED\n* DISABLED\n* DISABLED_DELINQUENCY",
              "example": "ENABLED"
            },
            "autoPayEnabledRequiredForCharging": {
              "title": "Allowed to charged without payment method",
              "type": "boolean",
              "example": true
            },
            "concurrentCardUsageChargingBehavior": {
              "title": "Allow concurrent charging with the same card",
              "type": "string",
              "description": "\n* Specifies concurrent card usage behavior\n* ALLOW\n* DENY\n* STOP_CURRENT_CHARGE_AND_START_NEW",
              "example": "ALLOW"
            },
            "billingCycleTerm": {
              "title": "Billing cycle term",
              "type": "string",
              "description": "\n* Specifies the billing cycle\n* NONE\n* WEEKLY\n* BI_WEEKLY\n* MONTHLY",
              "example": "WEEKLY"
            },
            "balanceType": {
              "title": "Balance type",
              "type": "string",
              "description": "\n* Specifies the balance type\n* PRE_PAID\n* POST_PAID\n* NON_PAYING\n* PAYMENT_IMMEDIATELY\n* POST_PAID_IMMEDIATELY",
              "example": "POST_PAID"
            },
            "dunningStatus": {
              "title": "Dunning status",
              "type": "string",
              "description": "\n* Specifies the dunning status\n* NONE\n* STARTED\n* GOING_TO_START\n* SENT_REMINDER\n* SUSPEND_DELINQUENCY\n* CLOSE_DELINQUENCY",
              "example": "STARTED"
            },
            "dunningLastRunDate": {
              "title": "Last dunning change status",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "dunningStartDate": {
              "title": "Dunning start date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrency"
            },
            "dunningBlockInfo": {
              "$ref": "#/components/schemas/DunningBlockInfo"
            },
            "invoiceBlockInfo": {
              "$ref": "#/components/schemas/InvoiceBlockInfo"
            }
          }
        },
        "AccountWalletResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AccountWallet"
              }
            }
          }
        },
        "DunningBlockInfo": {
          "title": "Dunning block info",
          "type": "object",
          "properties": {
            "updateUserId": {
              "title": "User id that performed dunning",
              "type": "integer",
              "format": "int64",
              "example": 2343
            },
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "Comment"
            },
            "until": {
              "title": "Blocked until",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "startDate": {
              "title": "Block start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "updateDate": {
              "title": "Modified date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "dunningLastRunDate": {
              "title": "Dunning last run date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            }
          }
        },
        "InvoiceBlockInfo": {
          "title": "Invoice block info",
          "type": "object",
          "properties": {
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "Comment"
            },
            "updateUserId": {
              "title": "User id that performed invoice blocking",
              "type": "integer",
              "format": "int64",
              "example": 2343
            },
            "until": {
              "title": "Block until in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "startDate": {
              "title": "Block start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "updateDate": {
              "title": "Modified date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            }
          }
        },
        "AccountChargingConfigurationUpdate": {
          "type": "object",
          "properties": {
            "concurrentCardUsageChargingBehavior": {
              "title": "Concurrent card usage behavior",
              "pattern": "(ALLOW|DENY|STOP_CURRENT_CHARGE_AND_START_NEW)",
              "type": "string",
              "example": "DENY",
              "enum": [
                "ALLOW",
                "DENY",
                "STOP_CURRENT_CHARGE_AND_START_NEW"
              ]
            },
            "autoPayEnabledRequired": {
              "title": "Allowed to charged without payment method",
              "type": "boolean",
              "example": true
            },
            "autoPayEnabled": {
              "title": "Account billing payment status",
              "pattern": "(ENABLED|DISABLED)",
              "type": "string",
              "example": "DISABLED",
              "enum": [
                "ENABLED",
                "DISABLED"
              ]
            },
            "autoCharge": {
              "title": "Enable automatic top-up",
              "type": "boolean",
              "example": true
            },
            "autoChargeAmount": {
              "title": "Amount use for automatic top-up",
              "minimum": 0.0,
              "exclusiveMinimum": true,
              "type": "number",
              "example": 55.3
            },
            "autoChargeThreshold": {
              "title": "Minimum balance for automatic top-up",
              "minimum": 0.0,
              "exclusiveMinimum": true,
              "type": "number",
              "example": 4564.2
            }
          },
          "description": "Update account charging configuration object"
        },
        "WalletBlockSettingsUpdate": {
          "type": "object",
          "properties": {
            "dunningBlockUntil": {
              "title": "Dunning blocked until epoch time",
              "type": "string",
              "format": "date-time"
            },
            "dunningBlockComments": {
              "title": "Dunning block comments",
              "type": "string",
              "example": "Comment"
            },
            "invoiceBlockUntil": {
              "title": "Invoice blocked until epoch time",
              "type": "string",
              "format": "date-time"
            },
            "invoiceBlockComments": {
              "title": "Invoice block comments",
              "type": "string",
              "example": "Comment"
            }
          },
          "description": "Charger host account wallet"
        },
        "WalletBlockSettings": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Charger host account number",
              "type": "integer",
              "format": "int32",
              "example": 9000030
            },
            "dunningStatus": {
              "title": "Dunning status",
              "type": "string",
              "description": "\n* Specifies the dunning status\n* NONE\n* STARTED\n* GOING_TO_START\n* SENT_REMINDER\n* SUSPEND_DELINQUENCY\n* CLOSE_DELINQUENCY",
              "example": "STARTED"
            },
            "dunningStartDate": {
              "title": "Dunning start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "example": "USD"
            },
            "dunningBlockInfo": {
              "$ref": "#/components/schemas/DunningBlockInfo"
            },
            "invoiceBlockInfo": {
              "$ref": "#/components/schemas/InvoiceBlockInfo"
            }
          }
        },
        "WalletBlockStatusResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WalletBlockSettings"
              }
            }
          }
        },
        "AccountBillingCycleUpdate": {
          "type": "object",
          "properties": {
            "billingCycleTerm": {
              "title": "Billing cycle term",
              "pattern": "(NONE|WEEKLY|BI_WEEKLY|MONTHLY)",
              "type": "string",
              "example": "WEEKLY",
              "enum": [
                "NONE",
                "WEEKLY",
                "BI_WEEKLY",
                "MONTHLY"
              ]
            },
            "dunningBlockUntil": {
              "title": "Dunning blocked until epoch time",
              "type": "string",
              "format": "date-time"
            },
            "dunningBlockStatus": {
              "title": "Dunning block status",
              "pattern": "(ON|OFF)",
              "type": "string",
              "example": "ON",
              "enum": [
                "ON",
                "OFF"
              ]
            },
            "dunningBlockComments": {
              "title": "Dunning block comments",
              "type": "string",
              "example": "Comment"
            },
            "invoiceBlockStatus": {
              "title": "Invoice block status",
              "pattern": "(ON|OFF)",
              "type": "string",
              "example": "ON",
              "enum": [
                "ON",
                "OFF"
              ]
            },
            "invoiceBlockUntil": {
              "title": "Invoice blocked until epoch time",
              "type": "string",
              "format": "date-time"
            },
            "invoiceBlockComments": {
              "title": "Invoice block comments",
              "type": "string",
              "example": "Comment"
            },
            "anniversaryDay": {
              "title": "Anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "paymentTerms": {
              "title": "Payment terms",
              "type": "integer",
              "format": "int32",
              "example": 20
            }
          },
          "description": "Update account billing cycle object"
        },
        "CustomerUpdate": {
          "required": [
            "billingAddress",
            "firstName",
            "lastName",
            "shippingAddress"
          ],
          "type": "object",
          "properties": {
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "gender": {
              "title": "Gender",
              "pattern": "(MALE|FEMALE|OTHER|NOT_SPECIFIED)",
              "type": "string",
              "example": "FEMALE",
              "enum": [
                "MALE",
                "FEMALE",
                "OTHER",
                "NOT_SPECIFIED"
              ]
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "accountType": {
              "title": "Account type",
              "pattern": "(CORPORATE|PRIVATE|FLEET)",
              "type": "string",
              "description": "\n* Specifies the account type\n* CORPORATE\n* PRIVATE\n* FLEET",
              "example": "PRIVATE",
              "enum": [
                "CORPORATE",
                "PRIVATE",
                "FLEET"
              ]
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "erpId": {
              "title": "ERP id",
              "type": "string",
              "example": "a1b2c3"
            },
            "billingAddress": {
              "$ref": "#/components/schemas/AddressUpdate"
            },
            "shippingAddress": {
              "$ref": "#/components/schemas/AddressUpdate"
            }
          },
          "description": "Charger host profile update object"
        },
        "CloseAccountRequest": {
          "required": [
            "closedByCustomer"
          ],
          "type": "object",
          "properties": {
            "closedByCustomer": {
              "title": "Customer request to close",
              "type": "boolean",
              "example": false
            }
          },
          "description": "Close account object"
        },
        "CloseAccount": {
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 123
            },
            "status": {
              "title": "Account status",
              "type": "string",
              "description": "Specifies the account status\n* CLOSED\n* CLOSED_CUSTOMER_REQUEST",
              "example": "CLOSED",
              "enum": [
                "CLOSED",
                "CLOSED_CUSTOMER_REQUEST"
              ]
            },
            "cardIds": {
              "title": "List of modified cards ids",
              "type": "array",
              "example": [
                12,
                52,
                31
              ],
              "items": {
                "title": "List of modified cards ids",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "CloseAccountResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CloseAccount"
              }
            }
          }
        },
        "MemberUpdate": {
          "type": "object",
          "properties": {
            "firstName": {
              "title": "First name",
              "type": "string",
              "example": "John"
            },
            "lastName": {
              "title": "Last name",
              "type": "string",
              "example": "Doe"
            },
            "mobile": {
              "title": "Mobile phone number",
              "type": "string",
              "example": "+972541234568"
            },
            "phoneNumber": {
              "title": "Phone number",
              "type": "string",
              "example": "*0144"
            },
            "profilePicture": {
              "title": "Profile picture",
              "type": "string",
              "example": "13876149.png"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "address": {
              "$ref": "#/components/schemas/AddressUpdate"
            }
          },
          "description": "Member update object"
        },
        "ConfigurationUpdate": {
          "type": "object",
          "properties": {
            "value": {
              "title": "Parameter value",
              "type": "string",
              "example": "true"
            }
          },
          "description": "Configuration update object"
        },
        "ChargerProfileUpdate": {
          "type": "object",
          "properties": {
            "caption": {
              "title": "Caption",
              "maxLength": 255,
              "minLength": 1,
              "type": "string",
              "example": "NCAN177DC1"
            },
            "identityKey": {
              "title": "Identity key",
              "maxLength": 255,
              "minLength": 1,
              "type": "string",
              "example": "S0000000009"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "a1d2f"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Charger description"
            },
            "siteId": {
              "title": "Site id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "modelId": {
              "title": "Model id",
              "type": "integer",
              "format": "int64",
              "example": 4
            },
            "protocolId": {
              "title": "Model connector id",
              "type": "integer",
              "format": "int64",
              "example": 123424
            },
            "serialNumber": {
              "title": "Serial number",
              "maxLength": 45,
              "minLength": 1,
              "type": "string",
              "example": "NSQC442E-002077"
            },
            "additionalSerialNumber": {
              "title": "Additional serial number",
              "type": "string",
              "example": "A-12345"
            },
            "contactPersonId": {
              "title": "Contact person id",
              "type": "integer",
              "format": "int64",
              "example": 361345
            },
            "accessLevel": {
              "title": "Access level",
              "pattern": "(USE_SITE|PUBLIC|PRIVATE|TAXI_ONLY)",
              "type": "string",
              "description": "\n* Specifies the access types\n* USE_SITE\n* PUBLIC\n* PRIVATE\n* TAXI_ONLY",
              "example": "PUBLIC"
            },
            "showIn3rdPartyFilter": {
              "title": "Show in 3rdParty filter",
              "type": "boolean",
              "example": true
            },
            "hidden": {
              "title": "Hidden",
              "type": "boolean",
              "example": true
            },
            "excluded": {
              "title": "Excluded",
              "type": "boolean",
              "example": false
            },
            "disabled": {
              "title": "Disabled",
              "type": "boolean",
              "example": true
            },
            "managed": {
              "title": "Managed",
              "type": "boolean",
              "example": false
            },
            "ignoreStatusNotifications": {
              "title": "Ignore status notifications",
              "type": "boolean",
              "example": true
            },
            "authenticationMethods": {
              "title": "Authentication methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies the authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": [
                "SMS"
              ],
              "items": {
                "title": "Authentication methods",
                "type": "string",
                "description": "\n* Specifies the authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                "example": "[\"SMS\"]"
              }
            },
            "paymentMethods": {
              "title": "Payment methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* Specifies the payment methods\n* FREE\n* CARD\n* PARK_ANDA_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
              "example": [
                "SMS"
              ],
              "items": {
                "title": "Payment methods",
                "type": "string",
                "description": "\n* Specifies the payment methods\n* FREE\n* CARD\n* PARK_ANDA_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                "example": "[\"SMS\"]"
              }
            },
            "authenticationMode": {
              "title": "Authentication mode",
              "pattern": "(SERVER_AUTHENTICATION|FREE_VEND)",
              "type": "string",
              "description": "\n* Specifies authentication mode options\n* SERVER_AUTHENTICATION\n* FREE_VEND",
              "example": "SERVER_AUTHENTICATION"
            },
            "equipmentId": {
              "title": "Equipment id",
              "type": "string",
              "example": "223"
            },
            "controllerId": {
              "title": "Controller id",
              "type": "string",
              "example": "S0000000009"
            },
            "erpId": {
              "title": "Erp id",
              "type": "string",
              "example": "12"
            },
            "costCenter": {
              "title": "Cost center",
              "type": "string",
              "example": "B-CH"
            },
            "infrastructureCompanyId": {
              "title": "Infrastructure company id",
              "type": "integer",
              "format": "int64",
              "example": 21
            },
            "utilityCompanyId": {
              "title": "Utility company id",
              "type": "integer",
              "format": "int64",
              "example": 35
            }
          },
          "description": "Charger profile update object"
        },
        "ChargerNetworkUpdate": {
          "type": "object",
          "properties": {
            "communicationType": {
              "title": "Communication type",
              "type": "string",
              "example": "THREE_G",
              "enum": [
                "THREE_G,ADSL,WIFI,ZIGBEE,SECOND_G,NONE,FOUR_G,HSPA,LTE,EVDO,HSPA_PLUS,ONE_XRTT,UMTS"
              ]
            },
            "macAddress": {
              "title": "Mac address",
              "type": "string",
              "example": "00304426624F"
            },
            "modemSerialNumber": {
              "title": "Modem serial number",
              "type": "string",
              "example": "A-123456"
            },
            "doesNotCommunicate": {
              "title": "Does not communicate",
              "type": "boolean",
              "example": false
            },
            "lastReceivedCommunicationSignal": {
              "title": "Last received communication signal in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "connectionUri": {
              "title": "Connection URI",
              "type": "string",
              "example": "URI"
            },
            "ipAddress": {
              "title": "IP address",
              "type": "string",
              "example": "147387"
            },
            "dynamicIp": {
              "title": "Dynamic ip",
              "type": "boolean",
              "example": true
            },
            "msisdn": {
              "title": "MSISDN",
              "type": "string",
              "example": "MM160295401275"
            },
            "iccid": {
              "title": "ICCID",
              "type": "string",
              "example": "A-12301275"
            },
            "imsi": {
              "title": "IMSI",
              "type": "string",
              "example": "B-875412"
            },
            "wirelessConnectionCarrierCompanyId": {
              "title": "Wireless connection carrier company id",
              "type": "integer",
              "format": "int64",
              "example": 43
            }
          },
          "description": "Charger network update object"
        },
        "ChargerMaintenanceUpdate": {
          "type": "object",
          "properties": {
            "sla": {
              "title": "Sla",
              "type": "string",
              "description": "\n* Specifies amount of hours\n* UNDEFINED\n* FORTY_EIGHT_HOURS_U\n* TWENTY_FOUR_HOURS_U\n* SEVENTY_TWO_HOURS_U\n* TWO_HOURS_U\n* FOUR_HOURS_U\n* EIGHT_HOURS_U\n* NINETY_SIX_HOURS_U",
              "example": "FORTY_EIGHT_HOURS_U"
            },
            "warrantyType": {
              "title": "Warranty type",
              "type": "string",
              "example": "ONE_YEAR"
            },
            "warrantyStatus": {
              "title": "Warranty status",
              "type": "string",
              "example": "ACTIVE"
            },
            "warrantyStartDate": {
              "title": "Warranty start date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "warrantyExpirationDate": {
              "title": "Warranty expiration  date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "warrantyNumber": {
              "title": "Warranty number",
              "type": "string",
              "example": "1A"
            },
            "warrantyInvoiceNumber": {
              "title": "Warranty invoice number",
              "type": "string",
              "example": "12"
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": true
            },
            "inStorage": {
              "title": "In storage",
              "type": "boolean",
              "example": true
            },
            "nextMaintenanceDate": {
              "title": "Next maintenance date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "lastMaintenanceDate": {
              "title": "Last maintenance date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "maintenanceCompanyId": {
              "title": "Maintenance company id",
              "type": "integer",
              "format": "int64",
              "example": 216
            },
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "comments"
            },
            "markForReplacement": {
              "title": "Mark for replacement",
              "type": "boolean",
              "example": true
            },
            "whitelistUpdateExpiresOn": {
              "title": "white list update expires on in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "installerCompanyId": {
              "title": "Installer company id",
              "type": "integer",
              "format": "int64",
              "example": 217
            },
            "temperatureScale": {
              "title": "Temperature scale",
              "pattern": "(CELSIUS|FAHRENHEIT)",
              "type": "string",
              "example": "CELSIUS",
              "enum": [
                "CELSIUS",
                "FAHRENHEIT"
              ]
            }
          },
          "description": "Charger maintenance update object"
        },
        "ChargerLocationUpdate": {
          "type": "object",
          "properties": {
            "accessData": {
              "title": "Access data",
              "type": "string",
              "example": "Access data"
            },
            "chargerLocationType": {
              "title": "Charger location type",
              "type": "string",
              "example": "HOME",
              "enum": [
                "HOME",
                "HOTEL",
                "PARKING_LOT",
                "MALL",
                "HIGHWAY",
                "GAS_STATION",
                "PUBLIC_PARKING",
                "COMMERCIAL",
                "DSO",
                "GOVERNMENT",
                "WORK"
              ]
            },
            "accessDoorStatus": {
              "title": "Access door status",
              "type": "string",
              "example": "CLOSED",
              "enum": [
                "UNKNOWN, OPEN, CLOSED"
              ]
            },
            "floor": {
              "title": "Floor",
              "type": "string",
              "example": "5th floor"
            },
            "restaurantsNearby": {
              "title": "Restaurants near by",
              "type": "boolean",
              "example": false
            },
            "poiDetails": {
              "title": "Point of interest details",
              "type": "string",
              "example": "Bank"
            },
            "numberOfPaintedParkingLots": {
              "title": "Number of painted parking lots",
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "imagesUrls": {
              "title": "Images urls",
              "uniqueItems": true,
              "type": "array",
              "example": [
                "pic1",
                "pic2"
              ],
              "items": {
                "title": "Images urls",
                "type": "string",
                "example": "[\"pic1\",\"pic2\"]"
              }
            },
            "vehicleDimensionsUpdate": {
              "$ref": "#/components/schemas/VehicleDimensionsUpdate"
            },
            "notesToDriver": {
              "title": "Notes for driver",
              "type": "string",
              "example": "Please pay attention to the signs"
            },
            "openingTimes": {
              "title": "Opening times",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerTimeRangeUpdate"
              }
            }
          },
          "description": "Charger location update object"
        },
        "ChargerTimeRangeUpdate": {
          "title": "Opening times",
          "required": [
            "dayOfWeek",
            "endHour",
            "endMinute",
            "startHour",
            "startMinute"
          ],
          "type": "object",
          "properties": {
            "dayOfWeek": {
              "title": "Day of week",
              "pattern": "(SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY)",
              "type": "string",
              "example": "WEDNESDAY"
            },
            "startHour": {
              "title": "Start hour",
              "type": "integer",
              "format": "int32",
              "example": 13
            },
            "startMinute": {
              "title": "Start minute",
              "type": "integer",
              "format": "int32",
              "example": 13
            },
            "endHour": {
              "title": "End hour",
              "type": "integer",
              "format": "int32",
              "example": 16
            },
            "endMinute": {
              "title": "End minute",
              "type": "integer",
              "format": "int32",
              "example": 26
            }
          }
        },
        "VehicleDimensionsUpdate": {
          "title": "Vehicle dimensions",
          "type": "object",
          "properties": {
            "maxVehicleHeight": {
              "title": "Max vehicle height",
              "type": "number",
              "example": 2.5
            },
            "maxVehicleWidth": {
              "title": "Max vehicle width",
              "type": "number",
              "example": 1.8
            },
            "maxVehicleLength": {
              "title": "Max vehicle length",
              "type": "number",
              "example": 3.2
            }
          }
        },
        "ChargerElectricalUpdate": {
          "type": "object",
          "properties": {
            "energySupplierCompanyId": {
              "title": "Energy supplier company id",
              "type": "integer",
              "format": "int64",
              "example": 43
            },
            "inputPower": {
              "title": "Input power",
              "type": "number",
              "example": 50
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 20
            },
            "meterSigningSupported": {
              "title": "Meter signing supported",
              "type": "boolean",
              "example": true
            },
            "validateMeterSignature": {
              "title": "Validate meter signature",
              "type": "boolean",
              "example": true
            },
            "gridConnectionDescription": {
              "title": "Grid connection description",
              "type": "string",
              "example": "description"
            },
            "serverSideLocalLoadBalancingEnabled": {
              "title": "Is server side local load balancing enabled",
              "type": "boolean",
              "example": true
            },
            "maxBalancePowerKw": {
              "title": "Server side local load balancing max power",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "nextElectricalTestDate": {
              "title": "Next electrical test date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "lastElectricalTestDate": {
              "title": "Last electrical test date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "utilityMeterType": {
              "title": "Utility meter type",
              "type": "string",
              "example": "SOFTWARE"
            },
            "assetId": {
              "title": "Asset id",
              "type": "string",
              "example": "LAXN359DC1"
            }
          },
          "description": "Charger electrical update object"
        },
        "ChargerConnectorUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "example": "CHADEMO"
            },
            "identityKey": {
              "title": "14",
              "type": "string",
              "example": "14"
            },
            "evseIdentityKey": {
              "title": "Evse identity key",
              "type": "string",
              "example": "2"
            },
            "evseConnectorIdentityKey": {
              "title": "Evse connector identity key",
              "type": "string",
              "example": "1"
            },
            "serialNumber": {
              "title": "Serial number",
              "type": "string",
              "example": "A-123"
            },
            "legacyId": {
              "title": "Legacy id",
              "type": "string",
              "example": "BC*DSA*E2*1"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "ean": {
              "title": "Ean",
              "type": "string",
              "example": "1023 4566"
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 125.0
            },
            "maxPowerKw": {
              "title": "Max power in Kw",
              "type": "number",
              "example": 50.0
            },
            "meterSerialNumber": {
              "title": "Meter serial number",
              "type": "string",
              "example": "G-0762135"
            },
            "utilityMeterNumber": {
              "title": "Utility serial number",
              "type": "string",
              "example": "MN-8756"
            },
            "cableLength": {
              "title": "Cable length",
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "wiredPhase": {
              "title": "Wired phase",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "revenueMargin": {
              "title": "Revenue margin",
              "type": "number",
              "format": "double"
            },
            "inMaintenance": {
              "title": "In maintenance",
              "type": "boolean",
              "example": false
            },
            "ignoreStatusNotification": {
              "title": "Ignore status notification",
              "type": "boolean",
              "example": false
            },
            "reservable": {
              "title": "Is reservable",
              "type": "boolean",
              "example": true
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "teslaConnectionType": {
              "title": "Tesla connection type",
              "type": "string",
              "example": "ADAPTER",
              "enum": [
                "NONE",
                "ADAPTER",
                "CONNECTOR"
              ]
            },
            "teslaAdapterSerialNumber": {
              "title": "Tesla adapter serial number",
              "type": "string",
              "example": "TA-8675"
            },
            "teslaAdapterInstallationDate": {
              "title": "Tesla adapter installation date in epoch time",
              "type": "string",
              "format": "date-time"
            },
            "teslaAdapterInMaintenance": {
              "title": "Is tesla adapter in maintenance",
              "type": "boolean",
              "example": false
            },
            "notes": {
              "title": "Notes",
              "type": "string",
              "example": "Connector color is red"
            }
          },
          "description": "Charger connector update object"
        },
        "ChargerConnectorResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Connector"
              }
            }
          }
        },
        "ConnectorTariffUpdate": {
          "required": [
            "billingTariffId",
            "dayOfWeek",
            "endTimeHours",
            "endTimeMinutes",
            "startTimeHours",
            "startTimeMinutes"
          ],
          "type": "object",
          "properties": {
            "dayOfWeek": {
              "title": "Day of the week",
              "pattern": "(SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY)",
              "type": "string",
              "description": "Specifies day of the week\n* MONDAY\n* TUESDAY\n* WEDNESDAY\n* THURSDAY\n* FRIDAY\n* SATURDAY\n* SUNDAY",
              "example": "MONDAY"
            },
            "startTimeHours": {
              "title": "Start time hours",
              "type": "integer",
              "format": "int32",
              "example": 14
            },
            "startTimeMinutes": {
              "title": "Start time minutes",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "endTimeHours": {
              "title": "End time hours",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "endTimeMinutes": {
              "title": "End time minutes",
              "type": "integer",
              "format": "int32",
              "example": 30
            },
            "billingTariffId": {
              "title": "Billing tariff Id",
              "type": "integer",
              "format": "int64",
              "example": 6578
            }
          }
        },
        "ConnectorTariffsUpdate": {
          "required": [
            "connectorTariffSet"
          ],
          "type": "object",
          "properties": {
            "connectorTariffSet": {
              "title": "Set of tariffs for all week",
              "maxItems": 35,
              "minItems": 7,
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectorTariffUpdate"
              }
            }
          }
        },
        "ConnectorTariff": {
          "title": "Connector tariffs details",
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 1071
            },
            "dayOfWeek": {
              "title": "Day of the week",
              "type": "string",
              "description": "Specifies day of the week\n* MONDAY\n* TUESDAY\n* WEDNESDAY\n* THURSDAY\n* FRIDAY\n* SATURDAY\n* SUNDAY",
              "example": "MONDAY"
            },
            "startDate": {
              "title": "Start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "endDate": {
              "title": "End date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1610544354
            },
            "billingTariffCode": {
              "title": "Billing tariff code",
              "type": "string",
              "example": "78789"
            },
            "billingTariffId": {
              "title": "Billing tariff Id",
              "type": "integer",
              "format": "int64",
              "example": 6578
            },
            "billingTariffName": {
              "title": "Billing tariff name",
              "type": "string",
              "example": "Walk Up Rate"
            },
            "billingTariffSpCurrencyId": {
              "title": "Billing tariff SP currency",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "roamingTariffId": {
              "title": "Roaming tariff Id",
              "type": "integer",
              "format": "int64",
              "example": 56574
            },
            "roamingTariffCode": {
              "title": "Roaming tariff code",
              "type": "string",
              "example": "88789"
            },
            "roamingTariffName": {
              "title": "Roaming tariff name",
              "type": "string",
              "example": "Walk Up Rate"
            },
            "roamingTariffSpCurrencyId": {
              "title": "Roaming tariff SP currency Id",
              "type": "integer",
              "format": "int64",
              "example": 3
            }
          }
        },
        "ConnectorTariffResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectorTariffsDetails"
              }
            }
          }
        },
        "ConnectorTariffsDetails": {
          "type": "object",
          "properties": {
            "connectorId": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 78789
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "aaa-v13"
            },
            "tariffs": {
              "title": "Connector tariffs details",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectorTariff"
              }
            }
          }
        },
        "ChargerModelUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Charger model name",
              "maxLength": 45,
              "minLength": 0,
              "type": "string",
              "example": "BTC Dual L2"
            },
            "type": {
              "title": "Type",
              "pattern": "(LCC|CHARGER)",
              "type": "string",
              "description": "\n* A group of the below types\n* LCC\n* CHARGER",
              "example": "CHARGER"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-123"
            },
            "ratedVoltage": {
              "title": "Rated voltage",
              "type": "number",
              "example": 110
            },
            "displayType": {
              "title": "Display type",
              "pattern": "(SEVEN_INCH|EIGHT_INCH|TOUCH|ONE_LINE|TWO_LINES|FOUR_LINES|LCD|NONE|LED)",
              "type": "string",
              "description": "\n* A group of the below authentication methods\n* SEVEN_INCH\n* EIGHT_INCH\n* TOUCH\n* ONE_LINE\n* TWO_LINES\n* FOUR_LINES\n* LCD\n* NONE\n* LED",
              "example": "LED"
            },
            "minTemperature": {
              "title": "Min temperature",
              "type": "number",
              "example": 20
            },
            "maxTemperature": {
              "title": "Max temperature",
              "type": "number",
              "example": 65
            },
            "ratedFrequency": {
              "title": "Rated frequency (in Hz)",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "sku": {
              "title": "Sku",
              "maxLength": 50,
              "minLength": 0,
              "type": "string",
              "example": "BTC EVC-30 Dual"
            },
            "genericName": {
              "title": "Generic name",
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "example": "BTC L2"
            },
            "maxCurrent": {
              "title": "Max current (A)",
              "type": "number",
              "example": 10
            },
            "maxPowerKw": {
              "title": "Max power Kw",
              "type": "number",
              "example": 54.2
            },
            "maxChargeTime": {
              "title": "Max charge time",
              "type": "number",
              "example": 120
            },
            "useHeartbeatToDetermineOffline": {
              "title": "Use heartbeat to determine offline",
              "type": "boolean",
              "example": true
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "localLoadBalancingSupported": {
              "title": "Local load balancing supported",
              "type": "boolean",
              "example": true
            },
            "reservable": {
              "title": "Reservable",
              "type": "boolean",
              "example": true
            },
            "reserveAllEvseConnectors": {
              "title": "Reserve all EVSE connectors",
              "type": "boolean",
              "example": true
            },
            "autoChargeEnabled": {
              "title": "Auto charge enabled",
              "type": "boolean",
              "example": true
            },
            "changeStatusToAvailableOnStopTx": {
              "title": "Change status to available on stop tx",
              "type": "boolean",
              "example": true
            },
            "smsResetSupported": {
              "title": "Sms reset supported",
              "type": "boolean",
              "example": true
            },
            "supportsDischarge": {
              "title": "Supports discharge",
              "type": "boolean",
              "example": true
            },
            "heaterInstalled": {
              "title": "Heater installed",
              "type": "boolean",
              "example": true
            },
            "temperatureScale": {
              "title": "Temperature scale",
              "pattern": "(CELSIUS|FAHRENHEIT)",
              "type": "string",
              "description": "\n* A group of the temperature scale options\n* CELSIUS\n* FAHRENHEIT",
              "example": "CELSIUS"
            },
            "managesLocalWhitelist": {
              "title": "Manages local white list",
              "type": "boolean",
              "example": true
            },
            "ocpp16Iso15118PncSupported": {
              "title": "Ocpp16 iso15118 pnc supported",
              "type": "boolean",
              "example": true
            },
            "ocpp16ImprovedSecuritySupported": {
              "title": "Ocpp16 improved security supported",
              "type": "boolean",
              "example": true
            },
            "instructionsVideoUrl": {
              "title": "Instructions video url",
              "type": "string",
              "example": "https://leah-katamin.bandcamp.com/album/222222"
            },
            "readerTypes": {
              "title": "Reader types",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* A group of the Reader types options\n* RFID\n* MAGNETIC_READER\n* RFID_AND_MAGNETIC_READER\n* NFC",
              "example": "[RFID]",
              "items": {
                "title": "Reader types",
                "type": "string",
                "description": "\n* A group of the Reader types options\n* RFID\n* MAGNETIC_READER\n* RFID_AND_MAGNETIC_READER\n* NFC",
                "example": "[RFID]"
              }
            },
            "manufacturerId": {
              "title": "Manufacturer company id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "maxCurrentSpec": {
              "title": "Maximum current spec",
              "type": "string",
              "example": "40"
            },
            "mountingType": {
              "title": "Mounting type",
              "pattern": "(WALL|POLE|BOTH|STAND_ALONE)",
              "type": "string",
              "description": "\n* A group of the mounting type options\n* WALL\n* POLE\n* BOTH\n* STAND_ALONE",
              "example": "WALL"
            },
            "chargingScheduleRateUnit": {
              "title": "Charging schedule rate unit",
              "type": "string",
              "description": "\n* A group of the charging schedule rate unit options\n* A\n* W",
              "example": "A"
            },
            "rebootTime": {
              "title": "Reboot time in minutes",
              "type": "integer",
              "format": "int64",
              "example": 30
            },
            "authenticationMethods": {
              "title": "Authentication methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* A group of the below authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
              "example": [
                "SMS"
              ],
              "items": {
                "title": "Authentication methods",
                "type": "string",
                "description": "\n* A group of the below authentication methods\n* NONE\n* RFID_CLASSIC\n* SMS\n* APP\n* CALL\n* PARK_AND_CHARGE\n* RFID_DES_FIRE\n* PLUG_AND_CHARGE\n* DIRECT_PAYMENT\n* CONTACTLESS_CARD",
                "example": "[\"SMS\"]"
              }
            },
            "paymentMethods": {
              "title": "Payment methods",
              "uniqueItems": true,
              "type": "array",
              "description": "\n* A group of the below Payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
              "example": [
                "PARK_AND_CHARGE"
              ],
              "items": {
                "title": "Payment methods",
                "type": "string",
                "description": "\n* A group of the below Payment methods\n* FREE\n* CARD\n* PARK_AND_CHARGE\n* SMS\n* CALL\n* CONTRACT\n* PLUG_AND_CHARGE",
                "example": "[\"PARK_AND_CHARGE\"]"
              }
            }
          },
          "description": "Charger model object"
        },
        "ChargerModelProtocolUpdate": {
          "type": "object",
          "properties": {
            "protocolType": {
              "title": "Protocol type",
              "pattern": "(OCPP1_2|OCPP1_5S|NOT_USED_1|SEMA_CONNECT|NOT_USED_3|BCP1_5_1|OCPP1_5J|OCPP1_5PlusS|OCPP1_5PlusJ|OCPP1_6S|OCPP1_6J|OCPP2_0_1J|NOT_USED_4|OCHP_DIRECT|HUBJECT|IAFC)",
              "type": "string",
              "description": "\n* Specifies the protocol type\n* OCPP1_2\n* OCPP1_5S\n* NOT_USED_1\n* SEMA_CONNECT\n* NOT_USED_3\n* BCP1_5_1\n* OCPP1_5J\n* OCPP1_5PlusS\n* OCPP1_5PlusJ\n* OCPP1_6S\n* OCPP1_6J\n* OCPP2_0_1J\n* NOT_USED_4\n* OCHP_DIRECT\n* HUBJECT\n* IAFC",
              "example": "\"SEMA_CONNECT\""
            },
            "softwareConnectorType": {
              "title": "Software connector type",
              "pattern": "(EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4|ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115|ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115|MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123|CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT|NON_MANAGED|EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123|OCPP_12_DEFAULT|MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912|BCP_151_DEFAULT|SEMA_CONNECT_API|DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT|LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT|OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT|EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT|OCPP_15_JSON_DEFAULT|OCPP_15_SOAP_SMART_CHARGING_DEFAULT|OCPP_15_JSON_SMART_CHARGING_DEFAULT|CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT|OCPP_16_SOAP_DEFAULT|OCPP_16_JSON_DEFAULT|ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT|OCPP_15_SOAP_METER_SIGN_DEFAULT|OCPP_12_DEFAULT_REVERSE_CARD_NUMBER|CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT|CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT|NISSAN_OCPP15_SOAP_DEFAULT|OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET|OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS|EFACEC_OCPP_15_SOAP_CUSTOMIZED|OCPP_201_JSON_DEFAULT|OCPI|ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT|EFACEC_OCPP_16_JSON_CUSTOMIZED|ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT|OCHP_DIRECT|HUBJECT|IAFC)",
              "type": "string",
              "description": "\n* Specifies the connector type\n* EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4\n* ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115\n* ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115\n* MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123\n* CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT\n* NON_MANAGED\n* EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123\n* OCPP_12_DEFAULT\n* OCPP_15_DEFAULT\n* MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912\n* BCP_151_DEFAULT\n* SEMA_CONNECT_API\n* DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT\n* LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT\n* OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT\n* EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT\n* OCPP_15_JSON_DEFAULT\n* OCPP_15_SOAP_SMART_CHARGING_DEFAULT\n* OCPP_15_JSON_SMART_CHARGING_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT\n* OCPP_16_SOAP_DEFAULT\n* OCPP_16_JSON_DEFAULT\n* ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT\n* OCPP_15_SOAP_METER_SIGN_DEFAULT\n* OCPP_12_DEFAULT_REVERSE_CARD_NUMBER\n* CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT\n* CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT\n* NISSAN_OCPP15_SOAP_DEFAULT\n* OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET\n* OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS\n* EFACEC_OCPP_15_SOAP_CUSTOMIZED\n* OCPP_201_JSON_DEFAULT\n* OCPI\n* ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT\n* EFACEC_OCPP_16_JSON_CUSTOMIZED\n* ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT\n* OCHP_DIRECT\n* HUBJECT\n* IAFC",
              "example": "\"ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115\""
            },
            "firmwareVersion": {
              "title": "Firmware version",
              "maxLength": 45,
              "minLength": 0,
              "type": "string",
              "example": "1.2.5 (Production)"
            }
          },
          "description": "Charger model protocol object"
        },
        "ChargerModelConnectorUpdate": {
          "type": "object",
          "properties": {
            "ratedVoltage": {
              "title": "Connector rated voltage",
              "type": "number",
              "example": 110
            },
            "placement": {
              "title": "Placement",
              "pattern": "(NOT_SPECIFIED|LEFT|RIGHT|TOP|BOTTOM|CENTER|OTHER)",
              "type": "string",
              "description": "\n* Specifies the placement\n* NOT_SPECIFIED\n* LEFT\n* RIGHT\n* TOP\n* BOTTOM\n* CENTER\n* OTHER",
              "example": "LEFT"
            },
            "connectorNumber": {
              "title": "Connector number",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "maxPowerKw": {
              "title": "Max power in KW",
              "type": "number",
              "example": 54.2
            },
            "connectorType": {
              "title": "Connector type",
              "pattern": "(TYPE_2_MENNEKES|TYPE_4_CHADEMO|TYPE_F_SCHUKO_CEE_7_4_GER|TYPE_E_AND_F_CEE_7_5_FRA|TYPE_3_SCAME|TYPE_COMBO_GERMANY|TYPE_K_SECTION_107_2_D1_DEN|TYPE_C_CEE7_16_EU|TYPE_E_CEE_7_5_FRA|TYPE_C_CEE_7_17_GER_FRA|TYPE_L_CEI_23_16_VII_ITA|TYPE_J_SEV_1011_CH|TYPE_D_BS_546_2_PIN_UK|TYPE_D_BS_546_3_PIN_UK|TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK|TYPE_1_J1772_YAZAKI|SAE_J1772_COMBO_US|SAE_J1772_AVCON|TESLA_UNIVERSAL_MOBILE_CONNECTOR|NEMA_1_15P|TYPE_B_NEMA_5_15|TYPE_B_NEMA_5_20|TESLA_R|TESLA_S|TYPE_2_TETHERED)",
              "type": "string",
              "description": "\n* Specifies connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_4_CHADEMO"
            },
            "chargingMode": {
              "title": "Charging mode",
              "pattern": "(LEVEL1|LEVEL2|LEVEL3|MODE1|MODE2|MODE3|MODE4)",
              "type": "string",
              "description": "\n* Specifies charging mode option\n* LEVEL1\n* LEVEL2\n* LEVEL3\n* MODE1\n* MODE2\n* MODE3\n* MODE4",
              "example": "LEVEL1"
            },
            "smartChargingEnabled": {
              "title": "Smart charging enabled",
              "type": "boolean",
              "example": true
            },
            "hasBuiltInCable": {
              "title": "Has built in cable",
              "type": "boolean",
              "example": true
            },
            "chargingInstructions": {
              "title": "Charging instructions",
              "type": "string",
              "example": "Instructions"
            },
            "voltageType": {
              "title": "Voltage type",
              "pattern": "(AC|DC)",
              "type": "string",
              "description": "\n* Specifies voltage type\n* AC\n* DC",
              "example": "AC"
            },
            "normalCurrentRating": {
              "title": "Normal current rating",
              "type": "number",
              "example": 30.0
            },
            "maxCurrent": {
              "title": "Max current",
              "type": "number",
              "example": 10.0
            },
            "numberOfPhases": {
              "title": "Number of phases",
              "type": "integer",
              "format": "int32",
              "example": 3
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "name": {
              "title": "Generic name",
              "maxLength": 100,
              "minLength": 1,
              "type": "string",
              "example": "BTC L2"
            },
            "ratedFrequency": {
              "title": "Rated frequency",
              "type": "integer",
              "format": "int32",
              "example": 60
            },
            "evseNumber": {
              "title": "EVSE number",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "cableLength": {
              "title": "Cable length",
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "v2gEnabled": {
              "title": "Is V2G enabled",
              "type": "boolean",
              "example": false
            }
          },
          "description": "Charger model connector object"
        },
        "ChargerHostWalletBlockSettingsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WalletBlockSettings"
              }
            }
          }
        },
        "ChargerHostWalletBillingInfoUpdate": {
          "type": "object",
          "properties": {
            "paidManually": {
              "title": "Is paid manually",
              "type": "boolean",
              "example": true
            },
            "autoPayEnabled": {
              "title": "Auto pay enabled",
              "pattern": "(ENABLED|DISABLED)",
              "type": "string",
              "description": "\n* Specifies auto pay\n* ENABLED\n* DISABLED",
              "example": "DISABLED",
              "enum": [
                "ENABLED ,DISABLED"
              ]
            },
            "newAnniversaryDay": {
              "title": "New anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 12
            },
            "w9ExistsOnFile": {
              "title": "W9 exists on file",
              "type": "boolean",
              "example": true
            },
            "paymentTermsInDays": {
              "title": "Payment terms in days",
              "type": "integer",
              "format": "int32",
              "example": 20
            }
          },
          "description": "Charger host account wallet"
        },
        "ChargerHostWalletBillingInfo": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Charger host account number",
              "type": "integer",
              "format": "int32",
              "example": 9000030
            },
            "balance": {
              "title": "Balance",
              "type": "number",
              "format": "double",
              "example": 1000
            },
            "anniversaryDay": {
              "title": "Anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "newAnniversaryDay": {
              "title": "Pending updated anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "paymentTermsInDays": {
              "title": "Payment terms in days",
              "type": "integer",
              "format": "int32",
              "example": 20
            },
            "autoPayEnabled": {
              "title": "Auto pay enabled",
              "type": "string",
              "description": "\n* Specifies auto pay\n* ENABLED\n* DISABLED\n* DISABLED_DELINQUENCY",
              "example": "ENABLED"
            },
            "paidManually": {
              "title": "Is paid manually",
              "type": "boolean",
              "example": true
            },
            "w9ExistsOnFile": {
              "title": "W9 exists on file",
              "type": "boolean",
              "example": true
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "example": "USD"
            }
          }
        },
        "ChargerHostWalletBillingInfoResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerHostWalletBillingInfo"
              }
            }
          }
        },
        "ChargerHostProfileUpdate": {
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "pattern": "^((?![<>{}~$+:;=`\"\\\\]).)*$",
              "type": "string",
              "example": "A-14"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "type": {
              "title": "Type",
              "pattern": "(STANDARD|FLEET|MDU|WORKPLACE)",
              "type": "string",
              "description": "\n* Specifies the charger host type\n* STANDARD\n* FLEET\n* MDU\n* WORKPLACE",
              "example": "STANDARD",
              "enum": [
                "STANDARD",
                "FLEET",
                "MDU",
                "WORKPLACE"
              ]
            },
            "onBoardingStatus": {
              "title": "On boarding status",
              "pattern": "(ACTIVE|NEW|IN_PROCESS)",
              "type": "string",
              "description": "\n* Specifies the on boarding status\n* ACTIVE\n* NEW\n* IN_PROCESS",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "NEW,IN_PROCESS"
              ]
            },
            "companyId": {
              "title": "Company id",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "contactPersonId": {
              "title": "Contact person id",
              "type": "integer",
              "format": "int64",
              "example": 58
            },
            "payingCustomerAccountNumber": {
              "title": "Paying customer account number",
              "type": "integer",
              "format": "int32",
              "example": 900125
            },
            "allowedEmailDomains": {
              "title": "Allowed email domains",
              "type": "string",
              "example": "yahoo.com;google.com"
            },
            "chargerIssueDefaultAssigneeId": {
              "title": "Charger issue default assignee id",
              "type": "integer",
              "format": "int64",
              "example": 200
            },
            "cardIssueDefaultAssigneeId": {
              "title": "Card issue default assignee id",
              "type": "integer",
              "format": "int64",
              "example": 120
            },
            "customerIssueDefaultAssigneeId": {
              "title": "Customer issue default assignee id",
              "type": "integer",
              "format": "int64",
              "example": 45
            },
            "invoiceProcessingInstructions": {
              "title": "Invoice processing instructions",
              "type": "string",
              "example": "<instructions text>"
            },
            "address": {
              "$ref": "#/components/schemas/AddressUpdate"
            }
          },
          "description": "Charger host profile update object"
        },
        "ChargerHostPaymentGatewayUpdate": {
          "type": "object",
          "properties": {
            "applicationFeeType": {
              "title": "Application fee type",
              "pattern": "(AMOUNT|RATE|NONE)",
              "type": "string",
              "description": "\n* Specifies the application fee types\n* AMOUNT\n* RATE\n* NONE",
              "example": "AMOUNT"
            },
            "paymentGatewayAccountId": {
              "title": "payment gateway account Id",
              "type": "string",
              "example": "12"
            },
            "vatNumber": {
              "title": "Vat number",
              "type": "string",
              "example": "12"
            },
            "applicationFee": {
              "title": "Application fee",
              "type": "number",
              "example": 12
            }
          },
          "description": "Charger host payment gateway object"
        },
        "ChargerHostPaymentGateway": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Charger host account number",
              "type": "integer",
              "format": "int32"
            },
            "paymentGatewayAccountId": {
              "title": "Charger host payment gateway account id",
              "type": "string",
              "example": "900030"
            },
            "vatNumber": {
              "title": "Charger host vat number",
              "type": "string",
              "example": "Vat number"
            },
            "applicationFeeType": {
              "title": "Application fee type",
              "type": "string",
              "description": "\n* Specifies the application fee types\n* AMOUNT\n* RATE\n* NONE",
              "example": "AMOUNT"
            },
            "applicationFee": {
              "title": "Application fee",
              "type": "number",
              "example": 12.5
            },
            "useCustomConfigurations": {
              "title": "Use custom configurations",
              "type": "boolean",
              "example": true
            },
            "gatewayType": {
              "title": "Gateway type",
              "type": "string",
              "example": "<type>"
            },
            "serverApiKey": {
              "title": "Server API key",
              "type": "string",
              "example": "<key>"
            },
            "serverApiResponseDomain": {
              "title": "Server API Response domain",
              "type": "string",
              "example": "domain"
            },
            "url": {
              "title": "URL",
              "type": "string",
              "example": "<url string>"
            },
            "iframeUrl": {
              "title": "iframe URL",
              "type": "string",
              "example": "<url string>"
            },
            "programKey": {
              "title": "Program key",
              "type": "string",
              "example": "<key>"
            },
            "programId": {
              "title": "Program id",
              "type": "string",
              "example": "<id>"
            },
            "developerId": {
              "title": "Developer id",
              "type": "string",
              "example": "<id>"
            },
            "apiScriptUrl": {
              "title": "API scriptUrl",
              "type": "string",
              "example": "<url string>"
            },
            "isSandBox": {
              "title": "Is sand box",
              "type": "boolean",
              "example": false
            },
            "merchantId": {
              "title": "merchant id",
              "type": "string",
              "example": "<id>"
            }
          }
        },
        "ChargerHostPaymentGatewayResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerHostPaymentGateway"
              }
            }
          }
        },
        "ChargerHostBillingUpdate": {
          "type": "object",
          "properties": {
            "defaultHostServicePlanCode": {
              "title": "Charger default service plan code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "OTG DC"
            },
            "defaultHostServiceContractId": {
              "title": "Charger host default service contract Id ",
              "type": "integer",
              "format": "int64",
              "example": 12
            },
            "defaultCustomerPlanCode": {
              "title": "Charger host default customer plan code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "SUB OTG"
            },
            "billingUtilityTariffCode": {
              "title": "Charger host billing utility tariff code",
              "type": "string",
              "example": "One time payment"
            },
            "billingHostContractId": {
              "title": "billing host contract Id",
              "type": "string",
              "example": "04500920"
            },
            "defaultChargerPlanCode": {
              "title": "Charger host default charger plan code",
              "type": "string",
              "example": "FREE"
            },
            "defaultBillingTariffCode": {
              "title": "Default billing tariff code",
              "pattern": "[A-Za-z0-9.\\-_\\s]+",
              "type": "string",
              "example": "OTG DC"
            },
            "shouldBillCustomerFromHost": {
              "title": "Should bill customers from host",
              "type": "boolean",
              "example": true
            }
          },
          "description": "ChargerHost billing update object"
        },
        "ChargerHostBilling": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 2343521
            },
            "defaultHostServicePlanCode": {
              "title": "Charger default service plan code",
              "type": "string",
              "example": "OTG DC"
            },
            "defaultHostServiceContractId": {
              "title": "Charger host default service contract Id ",
              "type": "string",
              "example": "12"
            },
            "defaultCustomerPlanCode": {
              "title": "Charger host default customer plan code",
              "type": "string",
              "example": "SUB OTG"
            },
            "billingUtilityTariffCode": {
              "title": "Charger host billing utility tariff code",
              "type": "string",
              "example": "One time payment"
            },
            "billingHostContractId": {
              "title": "billing host contract Id",
              "type": "string",
              "example": "45"
            },
            "billingHostContractIds": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "title": "Billing host contract ids",
                "type": "string",
                "example": "[\"456\",\"789\"]"
              }
            },
            "defaultChargerPlanCode": {
              "title": "Charger host default charger plan code",
              "type": "string",
              "example": "FREE"
            },
            "defaultBillingTariffCode": {
              "title": "Default billing tariff code",
              "type": "string",
              "example": "OTG DC"
            },
            "shouldBillCustomerFromHost": {
              "title": "Should bill customers from host",
              "type": "boolean",
              "example": true
            }
          }
        },
        "ChargerHostBillingResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerHostBilling"
              }
            }
          }
        },
        "ChargerGroupUpdate": {
          "type": "object",
          "properties": {
            "caption": {
              "title": "Caption",
              "maxLength": 300,
              "minLength": 1,
              "type": "string",
              "example": "Massachusetts Department of Transportation"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "example": "Group description"
            },
            "externalId": {
              "title": "External id",
              "type": "string",
              "example": "A-ER-021"
            },
            "dynamicContentQuery": {
              "title": "Dynamic content query",
              "type": "string",
              "example": "StationHostID = 219"
            },
            "cardAuthorizationSchema": {
              "title": "Card authorization schema",
              "type": "string",
              "description": "Specifies card authorization schema\n* DEFAULT\n* APPROVE_ALL\n* SPECIFIC_PROVIDERS",
              "example": "DEFAULT",
              "enum": [
                "DEFAULT",
                "APPROVE_ALL",
                "SPECIFIC_PROVIDERS"
              ]
            },
            "externalCardAuthorizationProviderNames": {
              "title": "External card authorization provider names",
              "maxItems": 2147483647,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "items": {
                "title": "External card authorization provider names",
                "type": "string"
              }
            }
          },
          "description": "Charger group update object"
        },
        "ChargerGroupReallocate": {
          "required": [
            "destinationGroupId"
          ],
          "type": "object",
          "properties": {
            "destinationGroupId": {
              "title": "Destination group id",
              "type": "integer",
              "format": "int64",
              "example": 324521
            }
          },
          "description": "Charger group reallocation object"
        },
        "ChargerGroupDetailsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupDetails"
              }
            }
          }
        },
        "RemoveChargers": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Charger ids to remove",
              "maxItems": 200,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Charger ids to remove",
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "description": "Remove chargers object"
        },
        "AddChargers": {
          "type": "object",
          "properties": {
            "ids": {
              "title": "Charger ids to add",
              "maxItems": 200,
              "minItems": 1,
              "uniqueItems": true,
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Charger ids to add",
                "type": "integer",
                "format": "int64"
              }
            }
          },
          "description": "Add chargers object"
        },
        "RemoveBillingPlans": {
          "required": [
            "codes"
          ],
          "type": "object",
          "properties": {
            "codes": {
              "title": "Billing plan codes to remove",
              "maxItems": 20,
              "minItems": 0,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "Free",
                "Immediate"
              ],
              "items": {
                "title": "Billing plan codes to remove",
                "type": "string",
                "example": "[\"Free\",\"Immediate\"]"
              }
            }
          },
          "description": "Remove billing plans object"
        },
        "AddBillingPlans": {
          "required": [
            "codes"
          ],
          "type": "object",
          "properties": {
            "codes": {
              "title": "Billing plan codes to add",
              "maxItems": 20,
              "minItems": 0,
              "uniqueItems": true,
              "type": "array",
              "example": [
                "Free",
                "Immediate"
              ],
              "items": {
                "title": "Billing plan codes to add",
                "type": "string",
                "example": "[\"Free\",\"Immediate\"]"
              }
            }
          },
          "description": "Adding billing plans object"
        },
        "UpdateStatus": {
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Card status",
              "pattern": "(LOST|DESTROYED|INACTIVE|CANCELLED|SUSPENDED)",
              "type": "string",
              "example": "LOST",
              "enum": [
                "LOST",
                "DESTROYED",
                "INACTIVE",
                "CANCELLED",
                "SUSPENDED"
              ]
            },
            "comments": {
              "title": "Comments",
              "type": "string",
              "example": "This is a comment"
            }
          },
          "description": "Update card status object"
        },
        "DeleteCardRequest": {
          "type": "object",
          "properties": {
            "accountNumber": {
              "title": "Account number",
              "type": "integer",
              "format": "int32",
              "example": 100031
            }
          },
          "description": "Delete card object"
        },
        "ContractUpdate": {
          "type": "object",
          "properties": {
            "startDate": {
              "title": "Contract start date in epoc time",
              "type": "string",
              "format": "date-time",
              "example": "2021-05-15T12:21:06-07:00"
            },
            "endDate": {
              "title": "Contract end date in epoc time",
              "type": "string",
              "format": "date-time",
              "example": "2023-05-15T12:21:06-07:00"
            },
            "lastDateForEtf": {
              "title": "Last date for etf in epoch time",
              "type": "string",
              "format": "date-time",
              "example": "2023-05-15T12:21:06-07:00"
            },
            "privateEntityPolicy": {
              "title": "Private policy",
              "pattern": "(PROPERTY|SITE|CHARGER)",
              "type": "string",
              "example": "PROPERTY",
              "enum": [
                "PROPERTY",
                "SITE",
                "CHARGER"
              ]
            },
            "privateEntityId": {
              "title": "Private policy id",
              "type": "integer",
              "format": "int64",
              "example": 123
            },
            "vin": {
              "title": "Vehicle identification number",
              "type": "string",
              "example": "241343643"
            },
            "percentageDiscount": {
              "title": "Discount in percentage",
              "type": "number",
              "example": 12.5
            },
            "monthlyDiscountAmount": {
              "title": "Recurring monthly discount until the end of the contract",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 10
            },
            "waivePlanSetupFee": {
              "title": "Waive plan registration fee",
              "type": "boolean",
              "example": true
            },
            "useNewPlanEtfDate": {
              "title": "Use new plan early termination date",
              "type": "boolean",
              "example": false
            },
            "oemCardNumber": {
              "title": "Original equipment manufacturer card number",
              "type": "string",
              "example": "212354"
            },
            "externalId": {
              "title": "External property for filtering",
              "type": "string",
              "example": "a1d2f"
            }
          },
          "description": "Update contract object"
        },
        "ContractSwap": {
          "required": [
            "planCode",
            "useNewPlanEtfDate",
            "waivePlanSetupFee"
          ],
          "type": "object",
          "properties": {
            "planCode": {
              "title": "Plan code",
              "type": "string",
              "example": "FREE"
            },
            "waivePlanSetupFee": {
              "title": "Waive plan registration fee",
              "type": "boolean",
              "example": true
            },
            "useNewPlanEtfDate": {
              "title": "Use new plan early termination date",
              "type": "boolean",
              "example": true
            },
            "vin": {
              "title": "Vehicle identification number",
              "type": "string",
              "example": "241343643"
            }
          },
          "description": "Swap contract object"
        },
        "ContractStatusUpdate": {
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Contract status",
              "pattern": "(ACTIVE|SUSPENDED|CLOSED_BY_CUSTOMER|CLOSED|CLOSED_AUTOSWAP)",
              "type": "string",
              "description": "Specifies contract initialization status\n* ACTIVE\n* SUSPENDED\n* CLOSED_BY_CUSTOMER\n* CLOSED\n* CLOSED_AUTOSWAP",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "SUSPENDED",
                "CLOSED_BY_CUSTOMER",
                "CLOSED",
                "CLOSED_AUTOSWAP"
              ]
            }
          },
          "description": "Update status of contract object"
        },
        "ContractCreditUpdate": {
          "required": [
            "amount"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Amount",
              "type": "number",
              "example": 30
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "Customer got some more credit"
            }
          },
          "description": "Update ad hoc contract object"
        },
        "ContractClose": {
          "required": [
            "etf",
            "requestedBy"
          ],
          "type": "object",
          "properties": {
            "requestedBy": {
              "title": "Contract closed by",
              "pattern": "(OPERATOR|CUSTOMER)",
              "type": "string",
              "example": "CUSTOMER",
              "enum": [
                "OPERATOR",
                "CUSTOMER"
              ]
            },
            "etf": {
              "title": "Early termination fee",
              "minimum": 0.0,
              "exclusiveMinimum": false,
              "type": "number",
              "example": 10
            }
          },
          "description": "Close contract object"
        },
        "AdHocContractStatusUpdate": {
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Contract's status",
              "pattern": "(ACTIVE|SUSPENDED)",
              "type": "string",
              "example": "ACTIVE",
              "enum": [
                "ACTIVE",
                "SUSPENDED"
              ]
            }
          },
          "description": "Update status ad hoc contract object"
        },
        "AdHocContractUpdate": {
          "required": [
            "amount"
          ],
          "type": "object",
          "properties": {
            "amount": {
              "title": "Amount",
              "type": "number",
              "example": 30
            },
            "externalId": {
              "title": "External property for filtering",
              "type": "string",
              "example": "a1d2f"
            },
            "comment": {
              "title": "Comment",
              "type": "string",
              "example": "Customer got some more credit"
            }
          },
          "description": "Update ad hoc contract credit object"
        },
        "ResourceContent": {
          "type": "object",
          "properties": {
            "content": {
              "title": "Content",
              "type": "array",
              "items": {
                "title": "Content",
                "type": "string",
                "format": "byte"
              }
            }
          }
        },
        "ResourceContentResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceContent"
              }
            }
          }
        },
        "CustomerReservationTariff": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Billing tariff id",
              "type": "integer",
              "format": "int64",
              "example": 78789
            },
            "reserveByDateTerms": {
              "$ref": "#/components/schemas/ReserveByDateTerms"
            },
            "reserveNowTerms": {
              "$ref": "#/components/schemas/ReserveNowTerms"
            }
          }
        },
        "CustomerReservationTariffResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerReservationTariff"
              }
            }
          }
        },
        "ReserveByDateTerms": {
          "title": "Reserve by date terms",
          "type": "object",
          "properties": {
            "allowReservation": {
              "title": "Allow reservation",
              "type": "boolean",
              "example": true
            },
            "chargePerMinute": {
              "title": "Charge per minute",
              "type": "boolean",
              "example": false
            },
            "sameFeeForNoShow": {
              "title": "Same fee for no show",
              "type": "boolean",
              "example": false
            },
            "onlyChargeWhenReserved": {
              "title": "Only charge when reserved",
              "type": "boolean",
              "example": false
            },
            "fee": {
              "title": "Fee",
              "type": "number",
              "example": 12.5
            },
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 9.2
            },
            "noShowFee": {
              "title": "No show fee",
              "type": "number",
              "example": 4.0
            }
          }
        },
        "ReserveNowTerms": {
          "title": "Reserve now terms",
          "type": "object",
          "properties": {
            "cancellationFee": {
              "title": "Cancellation fee",
              "type": "number",
              "example": 11.1
            },
            "chargePerMinute": {
              "title": "Charge per minute",
              "type": "boolean",
              "example": false
            },
            "sameFeeForNoShow": {
              "title": "Same fee for no show",
              "type": "boolean",
              "example": false
            },
            "reservationTerms": {
              "title": "Reservation terms",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReservationTerm"
              }
            }
          }
        },
        "ChargerSpeeds": {
          "title": "Charger speeds tariff time range",
          "type": "object",
          "properties": {
            "chargerSpeed": {
              "title": "Charging speed",
              "type": "string",
              "description": "\n* Specifies the charge speed\n* SLOW\n* SEMI_FAST\n* FAST\n* ULTRA_FAST",
              "example": "FAST"
            },
            "tariffTimeRanges": {
              "title": "Plan tariff time range",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TariffTimeRange"
              }
            }
          }
        },
        "ConnectorTypes": {
          "title": "Connector types tariff time range",
          "type": "object",
          "properties": {
            "connectorType": {
              "title": "Connector type",
              "type": "string",
              "description": "\n* Specifies the connector type\n* TYPE_2_MENNEKES\n* TYPE_4_CHADEMO\n* TYPE_F_SCHUKO_CEE_7_4_GER\n* TYPE_E_AND_F_CEE_7_5_FRA\n* TYPE_3_SCAME\n* TYPE_COMBO_GERMANY\n* TYPE_K_SECTION_107_2_D1_DEN\n* TYPE_C_CEE7_16_EU\n* TYPE_E_CEE_7_5_FRA\n* TYPE_C_CEE_7_17_GER_FRA\n* TYPE_L_CEI_23_16_VII_ITA\n* TYPE_J_SEV_1011_CH\n* TYPE_D_BS_546_2_PIN_UK\n* TYPE_D_BS_546_3_PIN_UK\n* TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK\n* TYPE_1_J1772_YAZAKI\n* SAE_J1772_COMBO_US\n* SAE_J1772_AVCON\n* TESLA_UNIVERSAL_MOBILE_CONNECTOR\n* NEMA_1_15P\n* TYPE_B_NEMA_5_15\n* TYPE_B_NEMA_5_20\n* TESLA_R\n* TESLA_S\n* TYPE_2_TETHERED",
              "example": "TYPE_2_MENNEKES"
            },
            "tariffTimeRanges": {
              "title": "Plan tariff time range",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TariffTimeRange"
              }
            }
          }
        },
        "CustomerPlanTariff": {
          "title": "Plan tariffs details",
          "type": "object",
          "properties": {
            "chargerSpeeds": {
              "title": "Charger speeds tariff time range",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerSpeeds"
              }
            },
            "connectorTypes": {
              "title": "Connector types tariff time range",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectorTypes"
              }
            }
          }
        },
        "CustomerPlanTariffs": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "integer",
              "format": "int64",
              "example": 452
            },
            "groupId": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 670
            },
            "tariffs": {
              "$ref": "#/components/schemas/CustomerPlanTariff"
            }
          }
        },
        "PlanTariffsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CustomerPlanTariffs"
              }
            }
          }
        },
        "ExternalCardAuthorizationProvider": {
          "type": "object",
          "properties": {
            "externalCardAuthorizationProviderNames": {
              "title": "External card authentication provider names",
              "uniqueItems": true,
              "type": "array",
              "items": {
                "title": "External card authentication provider names",
                "type": "string"
              }
            }
          }
        },
        "ExternalCardAuthorizationProviderResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExternalCardAuthorizationProvider"
              }
            }
          }
        },
        "ChargerHostAccountWallet": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Charger host account number",
              "type": "integer",
              "format": "int32",
              "example": 9000030
            },
            "balance": {
              "title": "Balance",
              "type": "number",
              "format": "double",
              "example": 1000
            },
            "anniversaryDay": {
              "title": "Anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 10
            },
            "newAnniversaryDay": {
              "title": "Pending updated anniversary day",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "paymentTermsInDays": {
              "title": "Payment terms in days",
              "type": "integer",
              "format": "int32",
              "example": 2
            },
            "autoPayEnabled": {
              "title": "Auto pay enabled",
              "type": "string",
              "description": "\n* Specifies auto pay\n* ENABLED\n* DISABLED\n* DISABLED_DELINQUENCY",
              "example": "ENABLED"
            },
            "dunningStatus": {
              "title": "Dunning status",
              "type": "string",
              "description": "\n* Specifies the dunning status\n* NONE\n* STARTED\n* GOING_TO_START\n* SENT_REMINDER\n* SUSPEND_DELINQUENCY\n* CLOSE_DELINQUENCY",
              "example": "STARTED"
            },
            "dunningStartDate": {
              "title": "Dunning start date in epoch time",
              "type": "integer",
              "format": "int64",
              "example": 1638817000
            },
            "currency": {
              "title": "Currency",
              "type": "string",
              "example": "USD"
            },
            "paidManually": {
              "title": "Is paid manually",
              "type": "boolean",
              "example": true
            },
            "w9ExistsOnFile": {
              "title": "W9 exists on file",
              "type": "boolean",
              "example": true
            },
            "dunningBlockInfo": {
              "$ref": "#/components/schemas/DunningBlockInfo"
            },
            "invoiceBlockInfo": {
              "$ref": "#/components/schemas/InvoiceBlockInfo"
            }
          }
        },
        "ChargerHostAccountWalletResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerHostAccountWallet"
              }
            }
          }
        },
        "ChargerHostPlanManagement": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Charger host id",
              "type": "integer",
              "format": "int64",
              "example": 134
            },
            "accountNumber": {
              "title": "Charger host account number",
              "type": "integer",
              "format": "int32"
            },
            "countryCurrency": {
              "$ref": "#/components/schemas/CountryCurrency"
            },
            "allowHostToControlDriverTariffs": {
              "title": "Allow host to control driver tariffs",
              "type": "boolean",
              "example": true
            },
            "singleTariffForAllDrivers": {
              "title": "Single tariff for all drivers",
              "type": "boolean",
              "example": true
            },
            "specifyTariffPerDriverType": {
              "title": "Specify tariff per driver type",
              "type": "boolean",
              "example": true
            },
            "allowMembershipPlans": {
              "title": "Allow member ship plans",
              "type": "boolean",
              "example": true
            },
            "allowOtpPlans": {
              "title": "Allow otp plans",
              "type": "boolean",
              "example": true
            },
            "allowRoamingPlans": {
              "title": "Allow roaming plans",
              "type": "boolean",
              "example": true
            }
          }
        },
        "ChargerHostPlanManagementResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerHostPlanManagement"
              }
            }
          }
        },
        "ChargerGroupChargers": {
          "type": "object",
          "properties": {
            "id": {
              "title": "Group id",
              "type": "integer",
              "format": "int64",
              "example": 1431
            },
            "chargerIds": {
              "title": "Charger ids",
              "uniqueItems": true,
              "type": "array",
              "example": [
                100,
                2184,
                3483
              ],
              "items": {
                "title": "Charger ids",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "ChargerGroupChargersResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChargerGroupChargers"
              }
            }
          }
        },
        "BatchCards": {
          "required": [
            "importOn",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Batch import name",
              "type": "string",
              "example": "imported_by_John"
            },
            "importOn": {
              "title": "Import date",
              "type": "integer",
              "format": "int64",
              "example": 1610534354
            },
            "numberOfRecordsToImport": {
              "title": "Requested number of cards to import",
              "type": "integer",
              "format": "int32",
              "example": 100
            },
            "successNumberOfRecordsImported": {
              "title": "Success number of cards imported",
              "type": "integer",
              "format": "int32",
              "example": 50
            },
            "ids": {
              "title": "Card ids",
              "type": "array",
              "example": [
                1,
                2
              ],
              "items": {
                "title": "Card ids",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "BatchCardsResponse": {
          "required": [
            "count",
            "data",
            "httpStatusCode",
            "requestId"
          ],
          "type": "object",
          "properties": {
            "httpStatusCode": {
              "title": "Http status code",
              "type": "integer",
              "format": "int32",
              "example": 200
            },
            "requestId": {
              "title": "Request id",
              "type": "string",
              "example": "1234567"
            },
            "code": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "message": {
              "type": "string"
            },
            "errors": {
              "title": "List of additional errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "messages": {
              "title": "List of additional messages",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Message"
              }
            },
            "count": {
              "title": "Number of entities returned",
              "type": "integer",
              "format": "int32",
              "example": 1
            },
            "data": {
              "title": "Entities data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BatchCards"
              }
            }
          }
        }
      },
      "securitySchemes": {
        "dmsTicket": {
          "type": "apiKey",
          "name": "dmsTicket",
          "in": "header"
        }
      }
    }
  }