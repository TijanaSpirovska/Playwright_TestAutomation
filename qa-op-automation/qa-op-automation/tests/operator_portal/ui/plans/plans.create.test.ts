import { getRandomFloat, randomNumber } from '../../../../utils/random'
import {
  getTodayTime,
  getUSCurrentDate,
  getUSCurrentDatePlusMonth,
} from '../../../../utils/date'

import { ACCOUNTS } from '../../../../data/accounts';

Feature('Plans Page')

Before(async ({ I, loginPage, plansPage }) => {
  I.amOnPage('/')
  loginPage.sendForm(ACCOUNTS.GENERAL_USE!.email, ACCOUNTS.GENERAL_USE!.password)
  plansPage.buttons.plans.click()
  await I.see('Plan Management')
  await plansPage.buttons.addPlanButton.verifyElementIsDisplayed()
})

const enrollmentOpenDate = getUSCurrentDate().toString()
const enrollmentClosedDate = getUSCurrentDatePlusMonth(2).toString()
const startTimeHours = getTodayTime(11,30,'AM')
const endTimeHours = getTodayTime(12,30,'PM')
const creditAmount = getRandomFloat(8, 1000, 2).toString()
const oneTimeAmount = getRandomFloat(5, 10, 2).toString()

Scenario('@C430717 - Verify that the superAdmin user will be able to add a Plan',async ({ I, plansPage }) => {
  const currentTime = new Date().getTime().toString()
  const milliseconds = new Date().getMilliseconds().toString()
  const planCode = `${randomNumber().toString()}${milliseconds}`
  const createPlanName = `OP.AUTOMATION${currentTime}PLAN`

  await plansPage.buttons.addPlanButton.click()
  await I.waitForText('New Plan', 15)
  await plansPage.fields.planName.fill(createPlanName)
  await plansPage.fields.planDescription.fill(createPlanName)
  await plansPage.fields.displayName.fill(createPlanName)
  await plansPage.fields.planStatus.select('Active')
  await plansPage.fields.planCode.fill(planCode)
  await plansPage.fields.financeCode.fill(planCode)
  await plansPage.fields.intervalUnit.select('Day')
  await plansPage.fields.intervalLength.fill(planCode)
  await plansPage.fields.planDuration.fill(planCode)
  await plansPage.fields.enrollmentOpen.fill(enrollmentOpenDate)
  await plansPage.fields.enrollmentClosed.fill(enrollmentClosedDate)
  await plansPage.fields.terminationBehavior.select('Expires')
  await plansPage.fields.cardBrand.select('EVgo')
  await plansPage.fields.connectorType.select('CCS')
  await plansPage.fields.startTime.fill(startTimeHours)
  await plansPage.fields.endTime.fill(endTimeHours)
  await plansPage.buttons.mondayCheckBox.click()
  await plansPage.buttons.save.click()
  await plansPage.snackBar.snackbarPlans.verifyElementIsDisplayed()
  await plansPage.snackBar.snackbarPlans.verifyVisible()
  await plansPage.snackBar.snackbarPlans.verifyTextInSnackbar('Plan Created')
  await plansPage.buttons.allPlansButton.click()
  await plansPage.fields.search.verifyElementIsDisplayed()
  await plansPage.fields.search.clearAndFill(createPlanName)
  await plansPage.results.secondTableRow.checkForUpdatedTable()
  await plansPage.results.searchResult.verifyTextInColumnHeader(createPlanName)
}).tag('@operatorPortal')

Scenario(
  '@C449067 - Verify that the user will be able to add a Plan with Credit plan product',async ({ I, plansPage }) => {
    const currentTime = new Date().getTime().toString()
    const milliseconds = new Date().getMilliseconds().toString()
    const planCode = `${randomNumber().toString()}${milliseconds}`
    const createPlanName = `OP.AUTOMATION${currentTime}PLAN`

    await plansPage.buttons.addPlanButton.click()
    await I.waitForText('New Plan', 15)
    await plansPage.fields.planName.fill(createPlanName)
    await plansPage.fields.planDescription.fill(createPlanName)
    await plansPage.fields.displayName.fill(createPlanName)
    await plansPage.fields.planStatus.select('Inactive')
    await plansPage.fields.planCode.fill(planCode)
    await plansPage.fields.financeCode.fill(planCode)
    await plansPage.fields.intervalUnit.select('Month')
    await plansPage.fields.intervalLength.fill(planCode)
    await plansPage.fields.planDuration.fill(planCode)
    await plansPage.fields.enrollmentOpen.fill(enrollmentOpenDate)
    await plansPage.fields.enrollmentClosed.fill(enrollmentClosedDate)
    await plansPage.fields.terminationBehavior.select('Expires')
    await plansPage.fields.cardBrand.select('EVgo')
    await plansPage.fields.connectorType.select('CHAdeMO')
    await plansPage.fields.startTime.fill(startTimeHours)
    await plansPage.fields.endTime.fill(endTimeHours)
    await plansPage.buttons.mondayCheckBox.click()
    await plansPage.buttons.addProductButton.click()
    await plansPage.fields.productType.select('Credit')
    await plansPage.fields.creditAmount.clearAndFill(creditAmount)
    await plansPage.fields.creditRecurrence.select('One Time')
    await plansPage.fields.creditExpBehavior.select('Expires')
    await plansPage.fields.creditOneTimeAmount.clearAndFill(oneTimeAmount)
    await plansPage.buttons.save.click()
    await plansPage.snackBar.snackbarPlans.verifyElementIsDisplayed()
    await plansPage.snackBar.snackbarPlans.verifyVisible()
    await plansPage.snackBar.snackbarPlans.verifyTextInSnackbar('Plan Created')
    await plansPage.buttons.allPlansButton.click()
    await plansPage.fields.search.verifyElementIsDisplayed()
    await plansPage.fields.search.clearAndFill(createPlanName)
    await plansPage.results.secondTableRow.checkForUpdatedTable()
    await plansPage.results.searchResult.clickRow()
    await I.waitForText(createPlanName, 15)
    await plansPage.fields.creditAmount.verifyValue(creditAmount)
  }).tag('@operatorPortal')

/* Scenario('@C430719 - Verify that the user will be able to copy plan',async ({ I, plansPage }) => {
  await plansPage.fields.search.clearAndFill(planName)
  await plansPage.results.searchResult.verifyTextInColumnHeader(planName)
  await plansPage.buttons.duplicatePlanButton.click()
  await I.waitForText('New Plan', 15)
  await plansPage.fields.planName.verifyValue(`Copy of ${planName}`)
  await plansPage.fields.planName.clearAndFill(duplicatePlan)
  await plansPage.fields.planCode.fill(planCode)
  await plansPage.buttons.save.click()
  await plansPage.snackBar.snackbarPlans.verifyElementIsDisplayed()
  await plansPage.snackBar.snackbarPlans.verifyVisible()
  await plansPage.snackBar.snackbarPlans.verifyTextInSnackbar('Plan Created')
  await plansPage.fields.planName.verifyValue(duplicatePlan)
  await plansPage.buttons.allPlansButton.click()
  await plansPage.fields.search.clearAndFill(duplicatePlan)
  await plansPage.results.searchResult.verifyTextInColumnHeader(duplicatePlan)
}).tag('@smoke_test').tag('@operatorPortal') */

Scenario('@C473825 - Verify that the user is not able to proceed if End Time is set before the Start Time',
  async ({ I, plansPage }) => {
    const milliseconds = new Date().getMilliseconds().toString()
    const planCode = `${randomNumber().toString()}${milliseconds}`

    await plansPage.buttons.plans.click()
    await plansPage.buttons.addPlanButton.click()
    await plansPage.fields.planName.clearAndFill('planTest')
    await plansPage.fields.planDescription.clearAndFill('planTest Description')
    await plansPage.fields.displayName.clearAndFill('Plan Test')
    await plansPage.fields.planStatus.select('Active')
    await plansPage.fields.planCode.clearAndFill(planCode)
    await plansPage.fields.intervalUnit.select('Month')
    await plansPage.fields.intervalLength.fill(planCode)
    await plansPage.fields.planDuration.fill(planCode)
    await plansPage.fields.enrollmentOpen.fill(enrollmentOpenDate)
    await plansPage.fields.enrollmentClosed.fill(enrollmentClosedDate)
    await plansPage.fields.terminationBehavior.select('Expires')
    await plansPage.fields.cardBrand.select('EVgo')
    await plansPage.fields.connectorType.select('CHAdeMO')
    await plansPage.fields.startTime.fill(endTimeHours)
    await plansPage.fields.endTime.fill(startTimeHours)
    await plansPage.buttons.mondayCheckBox.click()
    await plansPage.buttons.addProductButton.click()
    await plansPage.fields.productType.select('Credit')
    await plansPage.fields.creditAmount.clearAndFill(creditAmount)
    await plansPage.fields.creditRecurrence.select('One Time')
    await plansPage.fields.creditExpBehavior.select('Expires')
    await plansPage.fields.creditOneTimeAmount.clearAndFill(oneTimeAmount)
    await plansPage.general.errorMessageStartTime.verifyElementIsDisplayed()
    await plansPage.buttons.save.click()
    await I.seeInCurrentUrl('/plans/new')
  }).tag('@operatorPortal')

Scenario('@C473758 - Verify that the user is not able to proceed if the Enrollment Closed date is set before the Enrollment Open date',
  async ({ I, plansPage }) => {
    const milliseconds = new Date().getMilliseconds().toString()
    const planCode = `${randomNumber().toString()}${milliseconds}`

    await plansPage.buttons.plans.click()
    await plansPage.buttons.addPlanButton.click()
    await plansPage.fields.planName.clearAndFill('planTest')
    await plansPage.fields.planDescription.clearAndFill('planTest Description')
    await plansPage.fields.displayName.clearAndFill('Plan Test')
    await plansPage.fields.planStatus.select('Active')
    await plansPage.fields.planCode.clearAndFill(planCode)
    await plansPage.fields.intervalUnit.select('Month')
    await plansPage.fields.intervalLength.fill(planCode)
    await plansPage.fields.planDuration.fill(planCode)
    await plansPage.fields.enrollmentOpen.fill(enrollmentClosedDate)
    await plansPage.fields.enrollmentClosed.fill(enrollmentOpenDate)
    await I.see('End date must not be before start date')
    await plansPage.fields.terminationBehavior.select('Expires')
    await plansPage.fields.cardBrand.select('EVgo')
    await plansPage.fields.connectorType.select('CHAdeMO')
    await plansPage.fields.startTime.fill(startTimeHours)
    await plansPage.fields.endTime.fill(endTimeHours)
    await plansPage.buttons.mondayCheckBox.click()
    await plansPage.buttons.addProductButton.click()
    await plansPage.fields.productType.select('Credit')
    await plansPage.fields.creditAmount.clearAndFill(creditAmount)
    await plansPage.fields.creditRecurrence.select('One Time')
    await plansPage.fields.creditExpBehavior.select('Expires')
    await plansPage.fields.creditOneTimeAmount.clearAndFill(oneTimeAmount)
    await plansPage.buttons.save.click()
    await I.seeInCurrentUrl('/plans/new')
  }).tag('@operatorPortal')