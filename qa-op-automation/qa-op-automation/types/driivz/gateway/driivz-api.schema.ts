/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/customer-plans/{planCode}/tariffs/charger-groups/{chargerGroupId}": {
    /** Get a customer plan tariffs by plan code and charger group id */
    get: operations["getBillingPlanGroupTariffsByCode"];
    /** Update all a customer plan tariffs of a plan code */
    put: operations["updatePlanGroupTariffsByCode"];
  };
  "/v1/customer-plans/{planCode}/tariffs/charger-groups/all": {
    /** Get a customer plan tariffs by plan code that related to all chargers */
    get: operations["getBillingPlanTariffsForAllGroupsByCode"];
    /** Update all a customer plan tariffs of a plan code */
    put: operations["updatePlanGroupTariffsByCode_1"];
  };
  "/v1/vehicles/filter": {
    /** Get details of all vehicles by filter */
    post: operations["getVehiclesByFilter"];
  };
  "/v1/utility-tariffs/filter": {
    /** Find utility tariffs by filter */
    post: operations["filter"];
  };
  "/v1/sites": {
    /** Create a site */
    post: operations["addSite"];
  };
  "/v1/sites/{siteId}/energy-planning/calculate": {
    /** Calculate energy planning */
    post: operations["calcEnergyPlanning"];
  };
  "/v1/sites/{id}/schedules/import": {
    /** Add vehicles schedule to a given site by a CSV file */
    post: operations["loadVehiclesSchedule"];
  };
  "/v1/sites/{id}/resources/{fileName}": {
    /** Find a site resource */
    get: operations["findSiteResource"];
    /** Connect a resource to a site */
    post: operations["connectResourceToSite"];
    /** Delete site's resource by id and file name */
    delete: operations["deleteSiteResource"];
    /** Update s site resource */
    patch: operations["updateSiteResource"];
  };
  "/v1/sites/filter": {
    /** Find sites by filter */
    post: operations["filterSites"];
  };
  "/v1/resources": {
    /** Upload files */
    post: operations["uploadFiles"];
  };
  "/v1/reservations/filter": {
    /** Finds reservations based on a given filter */
    post: operations["filterReservations"];
  };
  "/v1/properties": {
    /** Create a property */
    post: operations["addProperty"];
  };
  "/v1/properties/filter": {
    /** Finds properties based on a given filter */
    post: operations["filterProperties"];
  };
  "/v1/operators": {
    /** Add a new operator user */
    post: operations["addOperator"];
  };
  "/v1/operators/filter": {
    /** Finds operator users based on a given filter */
    post: operations["filterOperators"];
  };
  "/v1/guest-driver-details/filter": {
    /** Find driver details of one-time payment billing transactions */
    post: operations["getGuestDriverDetails"];
  };
  "/v1/ev-transactions/filter": {
    /** Get details of EV transactions based on a given filter */
    post: operations["filterEvTransactions"];
  };
  "/v1/energy-policies": {
    /** Create energy policy */
    post: operations["addPolicy"];
  };
  "/v1/energy-policies/filter": {
    /** Find energy policies based on a given filter */
    post: operations["filterPolicies"];
  };
  "/v1/customer-tariffs": {
    /** Create customer tariff */
    post: operations["addCustomerTariff"];
  };
  "/v1/customer-tariffs/{id}/reservations/now/terms": {
    /** Create customer reservation tariff term */
    post: operations["createCustomerReservationTariffTerm"];
  };
  "/v1/customer-tariffs/filter": {
    /** Find customers tariffs by filter */
    post: operations["filter_1"];
  };
  "/v1/customer-plans": {
    /** Create customer plan */
    post: operations["createPlan"];
  };
  "/v1/customer-plans/{planCode}/products": {
    /** Get a plan products by plan code */
    get: operations["getBillingPlanProducts"];
    /** Add product to customer plan */
    post: operations["addPlanProduct"];
  };
  "/v1/customer-plans/profiles/filter": {
    post: operations["filterPlanProfile"];
  };
  "/v1/customer-accounts": {
    /** Create a new customer */
    post: operations["addCustomer"];
  };
  "/v1/customer-accounts/{payingAccountNumber}/members": {
    /** Create a new member */
    post: operations["addMember"];
  };
  "/v1/customer-accounts/members/filter": {
    /** Get details of members based on a given filter */
    post: operations["filterMembers"];
  };
  "/v1/customer-accounts/filter": {
    /** Get details of a customer by filter */
    post: operations["filterCustomerAccounts"];
  };
  "/v1/country-currencies/filter": {
    /** Find country currencies by filter */
    post: operations["filter_2"];
  };
  "/v1/contact-people": {
    /** Create a new contact person */
    post: operations["createPerson"];
  };
  "/v1/contact-people/filter": {
    /** Get details of contact people based on a given filter */
    post: operations["filterContactPeople"];
  };
  "/v1/configurations/filter": {
    /** Find configurations by filter */
    post: operations["filter_3"];
  };
  "/v1/companies/filter": {
    /** Find companies by filter */
    post: operations["filter_4"];
  };
  "/v1/chargers": {
    /** Create a Charger */
    post: operations["addCharger"];
  };
  "/v1/chargers/{identityKey}/remote-operations/raw": {
    /**
     * Send remote operation to charger. Make sure each request is sent with a <b>different GUID</b>
     *
     * <b>OCPP 1.6 Example:</b>
     *
     * <code>[
     * &ensp;&ensp;2,
     * &ensp;&ensp;"8cc0c606-2c6b-4447-96bd-82c6cf01393c",
     * &ensp;&ensp;"RemoteStartTransaction", {
     * &ensp;&ensp;&ensp;&ensp;"idTag": "EE06547CE41FB7",
     * &ensp;&ensp;&ensp;&ensp;"connectorId": 2
     * &ensp;&ensp;&ensp;&ensp;}
     * ]</code>
     *
     * <b>OCPP 1.5 SOAP Example:</b>
     *
     * <code><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ns="urn://Ocpp/Cp/2012/06/">
     * &ensp;&ensp;<soap:Header>
     * &ensp;&ensp;&ensp;&ensp;<ns:chargeBoxIdentity>SCAL0001</ns:chargeBoxIdentity>
     * &ensp;&ensp;</soap:Header>
     * &ensp;&ensp;<soap:Body>
     * &ensp;&ensp;&ensp;&ensp;<ns:clearCacheRequest/>
     * &ensp;&ensp;</soap:Body>
     * </soap:Envelope></code>
     */
    post: operations["sendRawMessage"];
  };
  "/v1/chargers/{identityKey}/remote-operations/charging-profile": {
    /**
     * Send charging profile remote operation to charger.
     *
     * <b>OCPP 1.6 Example:</b>
     *
     * <code>{
     * &ensp;&ensp;"connectorId": 2,
     * &ensp;&ensp;"csChargingProfiles": {
     * &ensp;&ensp;&ensp;&ensp;"chargingProfileId": 520,
     * &ensp;&ensp;&ensp;&ensp;"transactionId": 122202,
     * &ensp;&ensp;&ensp;&ensp;"stackLevel": 0,
     * &ensp;&ensp;&ensp;&ensp;"chargingProfilePurpose": "TxProfile",
     * &ensp;&ensp;&ensp;&ensp;"chargingProfileKind": "Absolute",
     * &ensp;&ensp;&ensp;&ensp;"chargingSchedule": {
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"startSchedule": "2021-05-18T12:44:09Z",
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"chargingRateUnit": "A",
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"chargingSchedulePeriod": [
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;{
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"startPeriod": 0,
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"limit": 1,
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"numberPhases": 3
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;}
     * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;]
     * &ensp;&ensp;&ensp;&ensp;}
     * &ensp;&ensp;}
     * }</code>
     */
    post: operations["sendChargingProfileMessage"];
  };
  "/v1/chargers/statuses/filter": {
    /** Find charger status details by filter */
    post: operations["filterChargerStatus"];
  };
  "/v1/chargers/profiles/filter": {
    post: operations["filterChargerProfile"];
  };
  "/v1/chargers/networks/filter": {
    /** Find charger network details by filter */
    post: operations["filterChargerNetwork"];
  };
  "/v1/chargers/maintenance/filter": {
    /** Find charger maintenance details by filter */
    post: operations["filterChargerMaintenance"];
  };
  "/v1/chargers/locations/filter": {
    /** Find charger locations details by filter */
    post: operations["filterChargerLocation"];
  };
  "/v1/chargers/groups/{groupId}/remote-operations/raw": {
    /**
     * Send remote operation to charger group. Make sure each request is sent with a <b>different GUID</b>
     *
     * <b>OCPP 1.6 Example:</b>
     *
     * <code>[
     * &ensp;&ensp;2,
     * &ensp;&ensp;"8cc0c606-2c6b-4447-96bd-82c6cf01393c",
     * &ensp;&ensp;"GetCompositeSchedule", {
     * &ensp;&ensp;&ensp;&ensp;"connectorId": 0
     * &ensp;&ensp;&ensp;&ensp;"duration": 3600
     * &ensp;&ensp;&ensp;&ensp;"chargingRateUnit": "A",
     * &ensp;&ensp;&ensp;&ensp;}
     * ]</code>
     */
    post: operations["sendRawMessage_1"];
  };
  "/v1/chargers/electrical/filter": {
    /** Find charger electrical details by filter */
    post: operations["filterChargerElectrical"];
  };
  "/v1/charger-models": {
    /** Create a charger model */
    post: operations["createChargerModel"];
  };
  "/v1/charger-models/{id}/protocols": {
    /** Create a charger model protocol */
    post: operations["createModelProtocol"];
  };
  "/v1/charger-models/{id}/connectors": {
    /** Create a charger model connector */
    post: operations["createChargerModelConnector"];
  };
  "/v1/charger-models/filter": {
    /** Find charger models by filter */
    post: operations["filterChargerModel"];
  };
  "/v1/charger-hosts": {
    /** Create a charger host */
    post: operations["createChargerHost"];
  };
  "/v1/charger-hosts/{accountNumber}/statements/filter": {
    /** Finds statements based on a given filter */
    post: operations["filterStatements"];
  };
  "/v1/charger-hosts/{accountNumber}/invoices/filter": {
    /** Finds statements based on a given filter */
    post: operations["filterInvoices"];
  };
  "/v1/charger-hosts/{accountNumber}/invoices/current/pdf": {
    /** Get invoice as pdf */
    post: operations["getCurrentStatementAsPdf"];
  };
  "/v1/charger-hosts/{accountNumber}/billing-transactions/filter": {
    /** Finds transactions based on a given filter */
    post: operations["filterTransactions"];
  };
  "/v1/charger-hosts/filter": {
    /** Finds charger hosts based on a given filter */
    post: operations["filterChargerHosts"];
  };
  "/v1/charger-groups/{id}": {
    /** Get details of a given charger group */
    get: operations["getChargerGroupById"];
    /** Create new charger group under a given group id */
    post: operations["addChargerGroup"];
    /** Delete a charger group by id */
    delete: operations["deleteChargerGroupById"];
    /** Update single charger group */
    patch: operations["updateChargerGroup"];
  };
  "/v1/charger-groups/{id}/folder": {
    /** Create new folder under a given group id */
    post: operations["addChargerGroupFolder"];
  };
  "/v1/cards/{id}/reassign": {
    /** Reassign card by id */
    post: operations["reassign"];
  };
  "/v1/cards/{id}/activate": {
    /**
     * Exiting card must be in one of the following statuses to be activated:
     *
     * * LOST
     * * DESTROYED
     * * INACTIVE
     * * CANCELLED
     * * SUSPENDED
     * * STOLEN
     * * NOT_ASSIGNED
     */
    post: operations["activateCard"];
  };
  "/v1/cards/filter": {
    /** Finds cards based on a given filter */
    post: operations["filterCards"];
  };
  "/v1/cards/batch/import": {
    /** Import batch of cards */
    post: operations["importBatch"];
  };
  "/v1/billing-transactions/filter": {
    /** Finds billing transactions based on a given filter */
    post: operations["filterTransactions_1"];
  };
  "/v1/authentication/operator/login": {
    /** Operator login */
    post: operations["operatorLogin"];
  };
  "/v1/authentication/operator/customer-login": {
    /** Operator login as customer */
    post: operations["operatorLoginAsCustomer"];
  };
  "/v1/accounts/{accountNumber}/statements/filter": {
    /** Finds statements based on a given filter */
    post: operations["filterStatements_1"];
  };
  "/v1/accounts/{accountNumber}/reservations/terms/now": {
    /** Get reservation terms to reserve now */
    post: operations["getReservationTermsNow"];
  };
  "/v1/accounts/{accountNumber}/reservations/terms/byDate": {
    /** Get reservation terms by date */
    post: operations["getReservationTermsByDate"];
  };
  "/v1/accounts/{accountNumber}/reservations/now": {
    /** Reserve now */
    post: operations["reserveNow"];
  };
  "/v1/accounts/{accountNumber}/reservations/chargers": {
    /** Get details of charger to reserve */
    post: operations["getChargerForReservation"];
  };
  "/v1/accounts/{accountNumber}/reservations/by-date": {
    /** Create a reservation by date */
    post: operations["createReservationByDate"];
  };
  "/v1/accounts/{accountNumber}/payment-methods/payment-cards": {
    /** Get details of card payment methods by account number */
    get: operations["getPaymentCard"];
    /** Add a new card payment method */
    post: operations["addCardPaymentMethod"];
  };
  "/v1/accounts/{accountNumber}/payment-methods/bank-account": {
    /** Get details of bank account payment methods by account number */
    get: operations["getBankAccountPayments"];
    /** Add a new bank account payment method */
    post: operations["addBankAccount"];
  };
  "/v1/accounts/{accountNumber}/invoices/filter": {
    /** Find invoices based on a given filter */
    post: operations["filterInvoices_1"];
  };
  "/v1/accounts/{accountNumber}/invoices/current/pdf": {
    /** Get invoice as pdf */
    post: operations["getCurrentStatementAsPdf_1"];
  };
  "/v1/accounts/{accountNumber}/contracts": {
    /** Add a new contract */
    post: operations["addContract"];
  };
  "/v1/accounts/{accountNumber}/contracts/filter": {
    /** Finds contracts based on a given filter */
    post: operations["filterContracts"];
  };
  "/v1/accounts/{accountNumber}/contracts/ad-hoc": {
    /** Find an ad hoc contract for a given account */
    get: operations["getAdHocContract"];
    /** Add a new ad hoc contract */
    post: operations["addAdHocContract"];
  };
  "/v1/accounts/{accountNumber}/charging-ability/reservation/status": {
    /** Validate that a customer has all capabilities to reserve charger */
    post: operations["validateChargingAbilityReservation"];
  };
  "/v1/accounts/{accountNumber}/charging-ability/charging/status": {
    /** Validate that a customer has all capabilities to charge */
    post: operations["validateChargingStartStatus"];
  };
  "/v1/accounts/{accountNumber}/charger-operations/chargers/{chargerIdentityKey}/connectors/{connectorIdentityKey}/auto-charge/enroll": {
    /** Auto charge enrollment */
    post: operations["autoCharge"];
  };
  "/v1/accounts/{accountNumber}/cards/suspend": {
    /** Suspend all cards for a given account */
    post: operations["suspendCards"];
  };
  "/v1/accounts/{accountNumber}/cards/batch/assign": {
    /** Assign batch of cards. No billing involved when assigning to given account */
    post: operations["batchAssign"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/refunds": {
    /** Add a new billing transaction refund related */
    post: operations["addRefundTransaction"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/penalties": {
    /** Add a new billing transaction penalty related */
    post: operations["addPenaltyTransaction"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/filter": {
    /** Finds billing transactions based on a given filter */
    post: operations["filterTransactions_2"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/externalPayments": {
    /** Add a new billing transaction external payment related */
    post: operations["addExternalPaymentTransaction"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/credits": {
    /** Add a new billing transaction credit related */
    post: operations["addCreditTransaction"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/contracts": {
    /** Add a new billing transaction contract related */
    post: operations["addContractsTransaction"];
  };
  "/v1/user-notifications-preferences/{userId}": {
    /** Update notification preferences for user */
    patch: operations["updateNotificationPreferences"];
  };
  "/v1/sites/{id}": {
    /** Get details of site by its id */
    get: operations["getSite"];
    /** Deletes a single site by its id */
    delete: operations["deleteSiteById"];
    /**
     * Update a single site. Address field is optional.
     *
     *  To inherit the address of the property pass null for address field
     */
    patch: operations["updateSite"];
  };
  "/v1/sites/{id}/external": {
    /** Updates a single external site */
    patch: operations["updateExternalSite"];
  };
  "/v1/properties/{id}": {
    /** Get details of property by its id */
    get: operations["getProperty"];
    /** Deletes a single property by its id */
    delete: operations["deletePropertyById"];
    /** Updates a single property */
    patch: operations["updateProperty"];
  };
  "/v1/properties/{id}/external": {
    /** Updates a single external property */
    patch: operations["updateExternalProperty"];
  };
  "/v1/operators/{id}": {
    /** Get details of operator user by its id */
    get: operations["getOperator"];
    /** Deletes a single operator by its id */
    delete: operations["deleteOperatorById"];
    /** Update operator user */
    patch: operations["updateOperator"];
  };
  "/v1/operators/{id}/unblock": {
    /** Unblocks an operator */
    patch: operations["unblockOperator"];
  };
  "/v1/operators/{id}/suspend": {
    /** Suspend an operator by its id */
    patch: operations["suspend"];
  };
  "/v1/operators/{id}/reactivate": {
    /** Change operator status to active */
    patch: operations["reactivate"];
  };
  "/v1/energy-policies/{id}": {
    /** Get details of energy policy by its id */
    get: operations["getPolicy"];
    /** Deletes a single energy policy by its id */
    delete: operations["deletePropertyById_1"];
    /** Updates single energy policy */
    patch: operations["updatePolicy"];
  };
  "/v1/customer-tariffs/{id}": {
    /** Get customer tariff by id */
    get: operations["getCustomerTariff"];
    /** Update customer tariff */
    patch: operations["updateCustomerTariff"];
  };
  "/v1/customer-tariffs/{id}/reservations/now": {
    /** Update customer reservation tariff now */
    patch: operations["updateCustomerReservationTariffNow"];
  };
  "/v1/customer-tariffs/{id}/reservations/now/terms/{termId}": {
    /** Delete customer reservation tariff term */
    delete: operations["deleteCustomerReservationTariffTerm"];
    /** Update customer reservation tariff term */
    patch: operations["updateCustomerReservationTariffTerm"];
  };
  "/v1/customer-tariffs/{id}/reservations/by-date": {
    /** Update customer reservation tariff */
    patch: operations["updateCustomerReservationTariffByDate"];
  };
  "/v1/customer-plans/{planCode}/profile": {
    /** Get a customer plan profile by plan code */
    get: operations["getPlanProfile"];
    /** Update a customer plan profile by plan code */
    patch: operations["updatePlan"];
  };
  "/v1/customer-plans/{planCode}/products/update": {
    /** Update a customer plan product by plan code */
    patch: operations["updatePlanProduct"];
  };
  "/v1/customer-plans/{planCode}/products/remove": {
    /** Remove product from customer plan */
    patch: operations["removePlanProduct"];
  };
  "/v1/customer-plans/{planCode}/locales/{locale}/registration-display": {
    /** Get a customer plan registration display by code and locale */
    get: operations["getPlanRegistrationDisplay"];
    /** Update a customer plan registration display by code and locale */
    patch: operations["updatePlanRegistrationDisplay"];
  };
  "/v1/customer-plans/{planCode}/locales/{locale}/display": {
    /** Get a customer plan display by plan code and locale */
    get: operations["getPlanDisplayByCode"];
    /** Update a customer plan display by code and locale */
    patch: operations["updatePrimaryPlanDisplay"];
  };
  "/v1/customer-plans/{planCode}/deactivate": {
    /** Deactivate a customer plan by plan code */
    patch: operations["deactivatePlan"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/profile": {
    /** Get a customer plan profile by plan code and country(ISO3)-currency */
    get: operations["getPlanProfileByCountryCurrency"];
    /** Update a customer plan profile by plan code and country(ISO3)-currency */
    patch: operations["updatePlanByCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/products/update": {
    /** Update a customer plan product by plan code and country(ISO3)-currency */
    patch: operations["updatePlanProduct_1"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/locales/{locale}/registration-display": {
    /** Get a customer plan registration display by code, country(ISO3)-currency and locale */
    get: operations["getPlanRegistrationDisplayByCountryCurrency"];
    /** Update a customer plan registration display by code, country(ISO3)-currency and locale */
    patch: operations["updatePlanRegistrationDisplayByCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/locales/{locale}/display": {
    /** Get a customer plan display by code, country(ISO3)-currency and locale */
    get: operations["getPlanDisplayByCodeCountryCurrency"];
    /** Update a customer plan display by code, country(ISO3)-currency and locale */
    patch: operations["updatePlanDisplayByCodeCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/deactivate": {
    /** Deactivate a customer plan profile by plan code and country(ISO3)-currency */
    patch: operations["deactivatePlanByCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/activate": {
    /** Activate a customer plan profile by plan code and country(ISO3)-currency */
    patch: operations["activatePlanByCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/activate": {
    /** Activate a customer plan by plan code */
    patch: operations["activatePlan"];
  };
  "/v1/customer-accounts/{accountNumber}/wallet": {
    /** Get an account's wallet by account number */
    get: operations["getAccountWallet"];
    /** Update customer's account wallet */
    patch: operations["updateCustomerWallet"];
  };
  "/v1/customer-accounts/{accountNumber}/wallet/charging-configuration": {
    /** Update charging configuration of an account */
    patch: operations["updateChargingConfiguration"];
  };
  "/v1/customer-accounts/{accountNumber}/wallet/block-settings": {
    /** Update customer's account wallet block settings */
    patch: operations["updateAccountWalletBlockSettings"];
  };
  "/v1/customer-accounts/{accountNumber}/wallet/billing-cycle": {
    /** Update billing cycle of an account */
    patch: operations["updateAccountBillingCycle"];
  };
  "/v1/customer-accounts/{accountNumber}/profile": {
    /** Get details of a customer by account number */
    get: operations["getCustomerAccount"];
    /** Update customer's profile by by account number */
    patch: operations["updateCustomerProfile"];
  };
  "/v1/customer-accounts/{accountNumber}/actions/close": {
    /** Close account of a paying customer, the operation also closes members account */
    patch: operations["close"];
  };
  "/v1/customer-accounts/{accountNumber}/actions/activate": {
    /** Activate a registered account */
    patch: operations["activateRegisteredAccount"];
  };
  "/v1/customer-accounts/members/{accountNumber}/profile": {
    /** Get details of a member by account number */
    get: operations["getMember"];
    /** Update a member by account number */
    patch: operations["updateMemberByAccountNumber"];
  };
  "/v1/customer-accounts/members/{accountNumber}/actions/unsuspend": {
    /** Unsuspends a member by account number */
    patch: operations["unsuspendMemberByAccountNumber"];
  };
  "/v1/customer-accounts/members/{accountNumber}/actions/suspend": {
    /** Suspends a member by account number */
    patch: operations["suspendMemberByAccountNumber"];
  };
  "/v1/configurations/{id}": {
    /** Get a configuration by id */
    get: operations["getConfigurationById"];
    /** Update a configuration by id */
    patch: operations["update"];
  };
  "/v1/chargers/{id}/profile": {
    /** Get details of charger profile by its id */
    get: operations["getChargerProfile"];
    /** Update charger profile by its id */
    patch: operations["updateChargerProfile"];
  };
  "/v1/chargers/{id}/network": {
    /** Get details of charger network by its id */
    get: operations["getChargerNetwork"];
    /** Updates charger networks details */
    patch: operations["updateChargerNetwork"];
  };
  "/v1/chargers/{id}/maintenance": {
    /** Get details of charger maintenance by its id */
    get: operations["getChargerMaintenance"];
    /** Updates a single charger maintenance details */
    patch: operations["updateChargerMaintenance"];
  };
  "/v1/chargers/{id}/location": {
    /** Get details of charger location by its id */
    get: operations["getChargerLocation"];
    /** Updates charger location details */
    patch: operations["updateChargerLocation"];
  };
  "/v1/chargers/{id}/electrical": {
    /** Get details of charger electrical by its id */
    get: operations["getChargerElectrical"];
    /** Updates charger electrical details */
    patch: operations["updateChargerElectrical"];
  };
  "/v1/chargers/{id}/connectors/{connectorId}": {
    /** Update charger connector */
    patch: operations["updateChargerConnector"];
  };
  "/v1/chargers/{chargerId}/connectors/{connectorId}/tariffs": {
    /** Get connector tariffs by id */
    get: operations["getConnectorTariff"];
    /** Update connector tariffs */
    patch: operations["updateConnectorTariff"];
  };
  "/v1/charger-models/{id}": {
    /** Get details of a charger model by id */
    get: operations["getChargerModel"];
    /** Delete a charger model */
    delete: operations["deleteModel"];
    /** Update a charger model */
    patch: operations["updateChargerModel"];
  };
  "/v1/charger-models/{id}/protocols/{protocolId}": {
    /** Delete a charger model protocol */
    delete: operations["deleteModelProtocol"];
    /** Update a charger model protocol */
    patch: operations["updateModelProtocol"];
  };
  "/v1/charger-models/{id}/connectors/{connectorId}": {
    /** Delete a charger model connector */
    delete: operations["deleteChargerModelConnector"];
    /** Update a charger model connector */
    patch: operations["updateChargerModelConnector"];
  };
  "/v1/charger-hosts/{accountNumber}/wallet/block-settings": {
    /** Update charger host account wallet block settings */
    patch: operations["updateWalletBlockSettings"];
  };
  "/v1/charger-hosts/{accountNumber}/wallet/billing-info": {
    /** Update charger host billing info by account number */
    patch: operations["updateWalletBillingInfo"];
  };
  "/v1/charger-hosts/{accountNumber}/profile": {
    /** Find by account number */
    get: operations["getChargerHostProfile"];
    /** Update a charger host profile by by account number */
    patch: operations["updateChargerHostProfile"];
  };
  "/v1/charger-hosts/{accountNumber}/payment-gateway": {
    /** Find by account number */
    get: operations["getChargerHostPaymentGateway"];
    /** Update charger host payment gateway by account number */
    patch: operations["updateChargerHostPaymentGateway"];
  };
  "/v1/charger-hosts/{accountNumber}/billing": {
    /** Find by account number */
    get: operations["getChargerHostBilling"];
    /** Update a charger host billing by account number */
    patch: operations["updateChargerHostBilling"];
  };
  "/v1/charger-hosts/{accountNumber}/actions/suspend": {
    /** Suspend a charger host's account by account number */
    patch: operations["suspendChargerHostProfile"];
  };
  "/v1/charger-hosts/{accountNumber}/actions/reopen": {
    /** Reopen a charger host's account by account number */
    patch: operations["reopenChargerHostProfile"];
  };
  "/v1/charger-hosts/{accountNumber}/actions/close": {
    /** Close a charger host's account by account number */
    patch: operations["closeChargerHostProfile"];
  };
  "/v1/charger-hosts/{accountNumber}/actions/activate": {
    /** Activate a charger host's account by account number */
    patch: operations["activateChargerHostProfile"];
  };
  "/v1/charger-groups/{id}/reallocation": {
    /** Reallocate a charger group */
    patch: operations["reallocateChargerGroup"];
  };
  "/v1/charger-groups/{id}/chargers/remove": {
    /** Remove chargers from charger group */
    patch: operations["removeChargersFromGroup"];
  };
  "/v1/charger-groups/{id}/chargers/add": {
    /** Add chargers to a charger group */
    patch: operations["addChargersToGroup"];
  };
  "/v1/charger-groups/{id}/billing-plans/remove": {
    /** Remove billing plans from a charger group */
    patch: operations["removeBillingPlansFromGroup"];
  };
  "/v1/charger-groups/{id}/billing-plans/add": {
    /** Add billing plans to a charger group */
    patch: operations["addBillingPlansToGroup"];
  };
  "/v1/cards/{id}/status": {
    /**
     * Card must be active in order to update it's status to one of the following:
     *
     * * LOST
     * * DESTROYED
     * * INACTIVE
     * * CANCELLED
     * * SUSPENDED
     * * STOLEN
     */
    patch: operations["changeStatus"];
  };
  "/v1/cards/{id}/delete": {
    /** Delete card by id */
    patch: operations["deleteCardById"];
  };
  "/v1/accounts/{accountNumber}/reservations/{id}/cancel": {
    /** Cancel reservation by its id */
    patch: operations["cancelReservation"];
  };
  "/v1/accounts/{accountNumber}/payment-methods/payment-cards/{id}/primary": {
    /** Set card payment method as primary */
    patch: operations["setPrimaryPaymentCard"];
  };
  "/v1/accounts/{accountNumber}/contracts/{contractId}": {
    /** Get details of a contract by the account number and contract id */
    get: operations["getContract"];
    /** Update contract */
    patch: operations["updateContract"];
  };
  "/v1/accounts/{accountNumber}/contracts/{contractId}/swap": {
    /** Rollover contract */
    patch: operations["swapContract"];
  };
  "/v1/accounts/{accountNumber}/contracts/{contractId}/status": {
    /** Update the status of a contract */
    patch: operations["updateContractStatus"];
  };
  "/v1/accounts/{accountNumber}/contracts/{contractId}/credit": {
    /** Update usage credit of a contract */
    patch: operations["updateContractUsageCredit"];
  };
  "/v1/accounts/{accountNumber}/contracts/{contractId}/close": {
    patch: operations["closeContract"];
  };
  "/v1/accounts/{accountNumber}/contracts/ad-hoc/status": {
    /** Update the status of an ad hoc contract */
    patch: operations["updateAdHocContractStatus"];
  };
  "/v1/accounts/{accountNumber}/contracts/ad-hoc/credit": {
    /** Update an ad hoc contract credit */
    patch: operations["updateAdHocContractCredit"];
  };
  "/v1/utility-tariffs/{id}": {
    /** Get utility tariff by id */
    get: operations["getUtilityTariff"];
  };
  "/v1/sites/{siteId}/energy-planning/result": {
    /** Get last energy planning result */
    get: operations["getLastEnergyPlanningResult"];
  };
  "/v1/reservations/{id}": {
    /** Get details of reservation by its id */
    get: operations["getReservation"];
  };
  "/v1/ev-transactions/{id}": {
    /** Get details of EV transaction by its id */
    get: operations["getEvTransaction"];
  };
  "/v1/ev-transactions/cost/{id}": {
    /** Get EV transaction cost */
    get: operations["getEvTransactionCost"];
  };
  "/v1/customer-tariffs/{id}/reservations": {
    /** Get customer reservation tariff by id */
    get: operations["getCustomerReservationTariff"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/tariffs/charger-groups/{chargerGroupId}": {
    /** Get a customer plan tariffs by plan code and charger group id */
    get: operations["getBillingPlanGroupTariffsByCodeCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/tariffs/charger-groups/all": {
    /** Get a customer plan tariffs by plan code that related to all chargers */
    get: operations["getBillingPlanTariffsForAllGroupsByCodeCountryCurrency"];
  };
  "/v1/customer-plans/{planCode}/country-currency/{countryCurrency}/products": {
    /** Get a plan products by plan code, country(ISO3)-currency and locale */
    get: operations["getBillingPlanProductsByCountryCurrency"];
  };
  "/v1/country-currencies/{id}": {
    /** Get details of country currency by its id */
    get: operations["getCountryCurrency"];
  };
  "/v1/contact-people/{id}": {
    /** Get details of a contact person by id */
    get: operations["getContactPerson"];
  };
  "/v1/configurations/external-card-authorization-providers": {
    /** Get external card authorization providers by service provider */
    get: operations["getExternalCardAuthorizationProvider"];
  };
  "/v1/companies/{id}": {
    /** Get company by id */
    get: operations["getCompany"];
  };
  "/v1/chargers/{id}/status": {
    /** Get details of charger status by its id */
    get: operations["getChargerStatus"];
  };
  "/v1/chargers/{id}/charger-groups": {
    /** Get charger-groups by a given charger id */
    get: operations["getGroupsByChargerId"];
  };
  "/v1/charger-hosts/{accountNumber}/wallet": {
    /** Find by account number */
    get: operations["getChargerHostAccount"];
  };
  "/v1/charger-hosts/{accountNumber}/plan-management": {
    /** Find by account number */
    get: operations["getChargerHostPlanManagement"];
  };
  "/v1/charger-hosts/{accountNumber}/invoices/{id}/pdf": {
    /** Get invoice as pdf */
    get: operations["getInvoicePdf"];
  };
  "/v1/charger-hosts/{accountNumber}/currencies/{currency}/wallet": {
    /** Find by account number */
    get: operations["getChargerHostAccount_1"];
  };
  "/v1/charger-groups/{id}/chargers": {
    /** Get charger ids by a given charger-group id */
    get: operations["getChargerGroupChargersById"];
  };
  "/v1/charger-groups/root": {
    /** Get details of charger's root group */
    get: operations["getChargerRootGroup"];
  };
  "/v1/cards/{id}": {
    /** Get details of card by its id */
    get: operations["getCard"];
  };
  "/v1/cards/batch/{id}": {
    /** Get card ids from existing batch import */
    get: operations["getCardIdsFromBatch"];
  };
  "/v1/accounts/{accountNumber}/invoices/{id}/pdf": {
    /** Get invoice as pdf */
    get: operations["getInvoicePdf_1"];
  };
  "/v1/accounts/{accountNumber}/charging-ability/status": {
    /** Validate that a customer's account is in good standing for charging */
    get: operations["validateAccountBeforeCharging"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/{id}": {
    /** Get details of a billing transaction by account number and id */
    get: operations["getTransaction"];
  };
  "/v1/accounts/{accountNumber}/billing-transactions/{id}/lineItems": {
    /** Get line items details of transaction by its id */
    get: operations["getLineItemForTransaction"];
  };
  "/v1/customer-plans/{planCode}/tariffs/connector-type/{connectorType}/charger-groups/{chargerGroupId}": {
    /** Delete customer plan tariffs by plan code and connector type for for a given charger group */
    delete: operations["deletePlanGroupTariffsByCodeAndConnectorType"];
  };
  "/v1/customer-plans/{planCode}/tariffs/connector-type/{connectorType}/charger-groups/all": {
    /** Delete customer plan tariffs by plan code and connector type for all chargers group */
    delete: operations["deletePlanGroupTariffsByCodeAndConnectorType_1"];
  };
  "/v1/customer-plans/{planCode}/tariffs/charger-speed/{chargerSpeed}/charger-groups/{chargerGroupId}": {
    /** Delete customer plan tariffs by plan code and charger speed for for a given charger group */
    delete: operations["deletePlanGroupTariffsByCodeAndSpeed"];
  };
  "/v1/customer-plans/{planCode}/tariffs/charger-speed/{chargerSpeed}/charger-groups/all": {
    /** Delete customer plan tariffs by plan code and charger speed for all chargers group */
    delete: operations["deletePlanGroupTariffsByCodeAndSpeed_1"];
  };
  "/v1/customer-accounts/members/{accountNumber}": {
    /** Deletes a member by its account number */
    delete: operations["deleteMemberByAccountNumber"];
  };
  "/v1/accounts/{accountNumber}/payment-methods/payment-cards/{id}": {
    /** Delete card payment method */
    delete: operations["deleteCreditCard"];
  };
}

export interface components {
  schemas: {
    BaseResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
    };
    Message: {
      code?: string;
      reason?: string;
      message?: string;
    };
    PlanTariffUpdate: {
      /**
       * Specifies day of the week
       * * MONDAY
       * * TUESDAY
       * * WEDNESDAY
       * * THURSDAY
       * * FRIDAY
       * * SATURDAY
       * * SUNDAY
       */
      dayOfWeek: string;
      startTimeHour: number;
      startTimeMinutes: number;
      endTimeHour: number;
      endTimeMinutes: number;
      billingTariffCode: string;
      allowCharging: boolean;
    };
    /** Plan tariff update object */
    PlanTariffsUpdate: {
      /**
       * * Specifies connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
      /**
       * Specifies the charger speed
       * * SLOW
       * * SEMI_FAST
       * * FAST
       * * ULTRA_FAST
       */
      chargerSpeed?: string;
      planTariffs: components["schemas"]["PlanTariffUpdate"][];
    };
    PutPlanTariffsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["TariffResponse"][];
    };
    TariffResponse: {
      /**
       * * Specifies the connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
      /**
       * * Specifies the charge speed
       * * SLOW
       * * SEMI_FAST
       * * FAST
       * * ULTRA_FAST
       */
      chargerSpeed?: string;
      groupId?: number;
      tariffTimeRanges?: components["schemas"]["TariffTimeRange"][];
    };
    TariffTimeRange: {
      id?: number;
      /**
       * Specifies day of the week
       * * MONDAY
       * * TUESDAY
       * * WEDNESDAY
       * * THURSDAY
       * * FRIDAY
       * * SATURDAY
       * * SUNDAY
       */
      dayOfWeek?: string;
      startTimeHour?: number;
      startTimeMinutes?: number;
      endTimeHour?: number;
      endTimeMinutes?: number;
      billingTariffId?: number;
      allowCharging?: boolean;
    };
    /** Filter object to be used for searching */
    VehicleFilter: {
      ids?: number[];
      accountNumbers?: number[];
    };
    Vehicle: {
      id?: number;
      accountNumber?: number;
      licensePlateNumber?: string;
      memberId?: number;
      model?: string;
      imageUrl?: string;
      modelManufacturer?: string;
      year?: string;
      emaidCardId?: number;
      macCardId?: number;
      externalId?: string;
    };
    VehicleResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Vehicle"][];
    };
    /** Filter object to be used for searching */
    UtilityTariffFilter: {
      externalId?: string;
    };
    Address: {
      address1?: string;
      address2?: string;
      city?: string;
      zipCode?: string;
      countryCode?: string;
      stateCode?: string;
      zoneId?: string;
      market?: string;
      municipality?: string;
      region?: string;
    };
    Company: {
      id?: number;
      name?: string;
      code?: string;
      phoneNumber?: string;
      /**
       * * Specifies the company type
       * * UNKNOWN
       * * INSTALLER
       * * MANUFACTURER
       * * STATION_HOST
       * * PROPERTY_OWNER
       * * UTILITY_COMPANY
       * * RFID_CARD_SUPPLIER
       * * WIRELESS_CARRIER
       * * SERVICE_PROVIDER
       * * SERVICE_COMPANY
       * * OEM
       * * PROPERTY_OWNER_FREEDOM_STATION
       * * BUILDING_OWNER
       * * BUILDING_OWNER_FREEDOM_STATION
       * * CONTRACTOR
       * * EV_DRIVER
       * * RETAIL_PROPERTY
       * * TENANT
       * * AUTO_DEALERSHIP
       */
      type?: string;
    };
    ContactPerson: {
      id?: number;
      firstName?: string;
      lastName?: string;
      mobilePhoneNumber?: string;
      email?: string;
      shippingAddress?: components["schemas"]["Address"];
      billingAddress?: components["schemas"]["Address"];
    };
    CountryCurrency: {
      id?: number;
      countryId?: number;
      countryName?: string;
      countryCode?: string;
      currency?: string;
    };
    UtilityTariff: {
      id?: number;
      name?: string;
      description?: string;
      code?: string;
      defaultEnergyCost?: number;
      externalId?: string;
      company?: components["schemas"]["Company"];
      countryCurrency?: components["schemas"]["CountryCurrency"];
    };
    UtilityTariffResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["UtilityTariff"][];
    };
    AddressCreate: {
      address1: string;
      address2?: string;
      city: string;
      stateCode?: string;
      countryCode: string;
      zoneId: string;
      zipCode: string;
      municipality?: string;
      region?: string;
    };
    /** Site create object */
    SiteCreate: {
      name: string;
      displayName: string;
      legacyId?: string;
      type:
        | "STANDARD"
        | "FREEDOM_STATIONS"
        | "STANDALONE_STATIONS"
        | "READY_FOR_EV"
        | "READY_FOR_EV_MULTI_FAMILY"
        | "EQUIPMENT"
        | "TESTING";
      latitude: number;
      longitude: number;
      propertyId: number;
      ratedVoltage?: number;
      maxCurrent?: number;
      chargerAccessLevel: "PUBLIC" | "PRIVATE" | "TAXI_ONLY";
      locationSetting: "INDOOR" | "OUTDOOR";
      utilityCompanyId?: number;
      utilityTariffId?: number;
      meterNumber?: string;
      comments?: string;
      directions?: string;
      externalId?: string;
      hasGate?: boolean;
      provisioningStatus:
        | "PLANNED"
        | "READY_FOR_PROVISIONING"
        | "PROVISIONED"
        | "SCHEDULED_FOR_DECOMMISSIONING"
        | "DECOMMISSIONED"
        | "DENETWORKED"
        | "CLOSED";
      locationType:
        | "HOME"
        | "HOTEL"
        | "PARKING_LOT"
        | "MALL"
        | "HIGHWAY"
        | "GAS_STATION"
        | "PUBLIC_PARKING"
        | "COMMERCIAL"
        | "DSO"
        | "GOVERNMENT"
        | "WORK";
      energyStorage?: boolean;
      renewableEnergyGeneration?: boolean;
      lockCombination?: string;
      inMaintenance?: boolean;
      posId?: number;
      address?: components["schemas"]["AddressCreate"];
    };
    Site: {
      id?: number;
      name?: string;
      displayName?: string;
      /**
       * * Specifies the site type
       * * STANDARD
       * * FREEDOM_STATIONS
       * * STANDALONE_STATIONS
       * * READY_FOR_EV
       * * READY_FOR_EV_MULTI_FAMILY
       * * EQUIPMENT
       * * TESTING
       */
      type?: string;
      legacyId?: string;
      latitude?: number;
      longitude?: number;
      propertyId?: number;
      ratedVoltage?: number;
      maxCurrent?: number;
      /**
       * * Specifies the charger access level
       * * PUBLIC
       * * PRIVATE
       * * TAXI_ONLY
       */
      chargerAccessLevel?: string;
      /**
       * * Specifies the location setting
       * * INDOOR
       * * OUTDOOR
       */
      locationSetting?: string;
      utilityCompanyId?: number;
      utilityTariffId?: number;
      meterNumber?: string;
      comments?: string;
      directions?: string;
      chargerIds?: number[];
      externalId?: string;
      /**
       * * Specifies the provisioning status
       * * PLANNED
       * * READY_FOR_PROVISIONING
       * * PROVISIONED
       * * SCHEDULED_FOR_DECOMMISSIONING
       * * DECOMMISSIONED
       * * DENETWORKED
       * * CLOSED
       */
      provisioningStatus?: string;
      /**
       * * Specifies the location type
       * * HOME
       * * HOTEL
       * * PARKING_LOT
       * * MALL
       * * HIGHWAY
       * * GAS_STATION
       * * PUBLIC_PARKING
       * * COMMERCIAL
       * * DSO
       * * GOVERNMENT
       * * WORK
       */
      locationType?: string;
      chargerHostId?: number;
      /**
       * * Specifies the source type
       * * INTERNAL
       * * EXTERNAL
       */
      sourceType?: string;
      energyStorage?: boolean;
      renewableEnergyGeneration?: boolean;
      lockCombination?: string;
      inMaintenance?: boolean;
      posId?: number;
      hasGate?: boolean;
      overrideAddress?: boolean;
      energyPolicyId?: number;
      electricityTopologyId?: number;
      address?: components["schemas"]["Address"];
      resources?: components["schemas"]["SiteResources"][];
    };
    SiteResources: {
      fileName?: string;
      type?: string;
      createdOn?: number;
      updatedOn?: number;
    };
    SiteResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Site"][];
    };
    EnergyPlanningCalculationResult: {
      from?: string;
      to?: string;
    };
    EnergyPlanningReservation: {
      accountNumber?: number;
      arrival?: number;
      departure?: number;
      requiredEnergyInKwh?: number;
      suppliedEnergyInKwh?: number;
    };
    EnergyPlanningResult: {
      successReservations?: components["schemas"]["EnergyPlanningReservation"][];
      failedReservations?: components["schemas"]["EnergyPlanningReservation"][];
      sitePowerUsage?: { [key: string]: number }[];
    };
    EnergyPlanningResultResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["EnergyPlanningResult"][];
    };
    /** Site resource create object */
    SiteResourceCreate: {
      type: string;
    };
    SiteResource: {
      siteId?: number;
      fileName?: string;
      type?: string;
      createdOn?: number;
      updatedOn?: number;
    };
    SiteResourceResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["SiteResource"][];
    };
    /** Filter object to be used for searching */
    SiteFilter: {
      ids?: number[];
      externalId?: string;
      name?: string;
      legacyId?: string;
      chargerHostIds?: number[];
      propertyId?: number;
      /**
       * Specifies location type
       * * STANDARD
       * * FREEDOM_STATIONS
       * * STANDALONE_STATIONS
       * * READY_FOR_EV
       * * READY_FOR_EV_MULTI_FAMILY
       * * EQUIPMENT
       * * TESTING
       */
      siteTypes?:
        | "STANDARD"
        | "FREEDOM_STATIONS"
        | "STANDALONE_STATIONS"
        | "READY_FOR_EV"
        | "READY_FOR_EV_MULTI_FAMILY"
        | "EQUIPMENT"
        | "TESTING";
      /**
       * Specifies location type
       * * HOME
       * * HOTEL
       * * PARKING_LOT
       * * MALL
       * * HIGHWAY
       * * GAS_STATION
       * * PUBLIC_PARKING
       * * COMMERCIAL
       * * DSO
       * * GOVERNMENT
       * * WORK
       */
      locationTypes?:
        | "HOME"
        | "HOTEL"
        | "PARKING_LOT"
        | "MALL"
        | "HIGHWAY"
        | "GAS_STATION"
        | "PUBLIC_PARKING"
        | "COMMERCIAL"
        | "DSO"
        | "GOVERNMENT"
        | "WORK";
      /**
       * Specifies property status
       * * PLANNED
       * * READY_FOR_PROVISIONING
       * * PROVISIONED
       * * SCHEDULED_FOR_DECOMMISSIONING
       * * DECOMMISSIONED
       * * DENETWORKED
       * * CLOSED
       */
      statuses?:
        | "PLANNED"
        | "READY_FOR_PROVISIONING"
        | "PROVISIONED"
        | "SCHEDULED_FOR_DECOMMISSIONING"
        | "DECOMMISSIONED"
        | "DENETWORKED"
        | "CLOSED";
      posId?: number;
      /**
       * Specifies source type
       * * INTERNAL
       * * OCPI
       * * HUBJECT
       * * GIREVE
       * * SEMA
       * * OCHP
       * * FLEET
       * * IAFC
       */
      sourceType?:
        | "INTERNAL"
        | "OCPI"
        | "HUBJECT"
        | "GIREVE"
        | "SEMA"
        | "OCHP"
        | "FLEET";
    };
    Resource: {
      id?: number;
      uploadedOn?: number;
      fileName?: string;
    };
    ResourceResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Resource"][];
    };
    /** Filter object to be used for searching */
    ReservationFilter: {
      accountNumber?: number;
      /**
       * Specifies the reservation status
       * * ACTIVE
       * * CANCELLED
       * * EXPIRED
       * * RESERVATION_DENIED
       * * FULLFIED
       * * FUTURE
       */
      reservationStatuses?:
        | "ACTIVE"
        | "CANCELLED"
        | "EXPIRED"
        | "RESERVATION_DENIED"
        | "FULLFIED"
        | "FUTURE";
      propertyIds?: number[];
      siteIds?: number[];
      /**
       * Specifies the charger speed
       * * SLOW
       * * SEMI_FAST
       * * FAST
       * * ULTRA_FAST
       */
      chargingSpeeds?: "SLOW" | "SEMI_FAST" | "FAST" | "ULTRA_FAST";
      connectorId?: number;
      chargerId?: number;
      fromDate?: string;
      toDate?: string;
      /**
       * Specifies the connector status
       * * AVAILABLE
       * * CHARGING
       * * FAULTED
       * * UNAVAILABLE
       * * NEW
       * * UNKNOWN
       * * RESERVED
       * * DISCHARGING
       * * PAUSED
       * * PREPARING
       * * FINISHING
       */
      connectorStatuses?:
        | "AVAILABLE"
        | "CHARGING"
        | "FAULTED"
        | "UNAVAILABLE"
        | "NEW"
        | "UNKNOWN"
        | "RESERVED"
        | "DISCHARGING"
        | "PAUSED"
        | "PREPARING"
        | "FINISHING";
    };
    ChargerReservation: {
      id?: number;
      caption?: string;
      siteName?: string;
      siteId?: string;
      property?: string;
      address?: components["schemas"]["Address"];
      connector?: components["schemas"]["Connector"];
    };
    Connector: {
      id?: number;
      identityKey?: string;
      evseConnectorIdentityKey?: string;
      name?: string;
      serialNumber?: string;
      legacyId?: string;
      externalId?: string;
      ean?: string;
      maxCurrent?: number;
      maxPowerKw?: number;
      meterSerialNumber?: string;
      utilityMeterNumber?: string;
      ignoreStatusNotification?: boolean;
      /**
       * * Specifies the connector status options
       * * AVAILABLE
       * * CHARGING
       * * FAULTED
       * * UNAVAILABLE
       * * NEW
       * * UNKNOWN
       * * RESERVED
       * * DISCHARGING
       * * PAUSED
       * * PREPARING
       * * FINISHING
       */
      status?: string;
      reservable?: boolean;
      revenueMargin?: number;
      /**
       * * Specifies the tesla connection type
       * * NONE
       * * ADAPTER
       * * CONNECTOR
       */
      teslaConnectionType?: string;
      teslaAdapterSerialNumber?: string;
      teslaAdapterInstallationDate?: number;
      teslaAdapterInMaintenance?: boolean;
      teslaHasAdapter?: boolean;
      inMaintenance?: boolean;
      smartChargingEnabled?: boolean;
      wiredPhase?: number;
      /**
       * * Specifies the error code
       * * OTHER_ERROR
       * * CONNECTOR_LOCK_FAILURE
       * * HIGH_TEMPERATURE
       * * MODE_3_ERROR
       * * NO_ERROR
       * * POWER_METER_FAILURE
       * * POWER_SWITCH_FAILURE
       * * READER_FAILURE
       * * EV_COMMUNICATION_ERROR
       * * GROUND_FAILURE
       * * INTERNAL_ERROR
       * * LOCAL_LIST_CONFLICT
       * * OVER_CURRENT_FAILURE
       * * OVER_VOLTAGE
       * * RESET_FAILURE
       * * UNDER_VOLTAGE
       * * WEAK_SIGNAL
       */
      errorCode?: string;
      /**
       * * Specifies pos charging status
       * * NONE
       * * STARTING
       * * CHARGING
       * * STOPPING
       */
      posChargingStatus?: string;
      errorMessage?: string;
      /**
       * * Specifies the placement
       * * NOT_SPECIFIED
       * * LEFT
       * * RIGHT
       * * TOP
       * * BOTTOM
       * * CENTER
       * * OTHER
       */
      placement?: string;
      ratedFrequency?: number;
      ratedVoltage?: number;
      qrCode?: string;
      cableLength?: number;
      allowOverridePlan?: boolean;
      notes?: string;
      /**
       * * Specifies the connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
    };
    Reservation: {
      id?: number;
      startDate?: number;
      endDate?: number;
      createdOn?: number;
      /**
       * Specifies the reservation status
       * * ACTIVE
       * * CANCELLED
       * * EXPIRED
       * * RESERVATION_DENIED
       * * FULLFIED
       * * FUTURE
       * * PENDING_EXPIRATION
       */
      status?:
        | "ACTIVE"
        | "CANCELLED"
        | "EXPIRED"
        | "RESERVATION_DENIED"
        | "FULLFIED"
        | "FUTURE"
        | "PENDING_EXPIRATION";
      accountNumber?: number;
      charger?: components["schemas"]["ChargerReservation"];
      terms?: components["schemas"]["Terms"];
    };
    ReservationResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Reservation"][];
    };
    Terms: {
      id?: number;
      reservationType?: "NOW" | "FUTURE";
      reservationFee?: number;
      cancellationFee?: number;
      noShowFee?: number;
      duration?: number;
    };
    /** Property create object */
    PropertyCreate: {
      name: string;
      legacyId?: string;
      externalId?: string;
      chargerHostId: number;
      description?: string;
      locationType:
        | "DEALERSHIP"
        | "MULTI_FAMILY"
        | "WORKPLACE"
        | "RETAIL"
        | "GARAGE"
        | "HIGHWAY"
        | "BIG_TOWN"
        | "SMALL_TOWN"
        | "COMMUTER_TRANSIT"
        | "RURAL"
        | "NEIGHBORHOOD";
      latitude: number;
      longitude: number;
      status:
        | "PLANNED"
        | "READY_FOR_PROVISIONING"
        | "PROVISIONED"
        | "SCHEDULED_FOR_DECOMMISSIONING"
        | "DECOMMISSIONED"
        | "DENETWORKED"
        | "CONTRACT_TERMINATED"
        | "CONTRACT_EXPIRED";
      provisionedDate?: string;
      contactPersonId?: number;
      showExternalCoupons?: boolean;
      electricalTopologyId?: number;
      address: components["schemas"]["AddressCreate"];
    };
    Property: {
      id?: number;
      legacyId?: string;
      name?: string;
      latitude?: number;
      longitude?: number;
      locationType?: string;
      chargerHostId?: number;
      description?: string;
      externalId?: string;
      sourceType?: string;
      status?: string;
      provisionedDate?: number;
      siteIds?: number[];
      showExternalCoupons?: boolean;
      electricalTopologyId?: number;
      contactPerson?: components["schemas"]["ContactPerson"];
      energyPolicyId?: number;
      address?: components["schemas"]["Address"];
    };
    PropertyResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Property"][];
    };
    /** Filter object to be used for searching */
    PropertyFilter: {
      ids?: number[];
      chargerHostId?: number;
      externalId?: string;
      name?: string;
      chargerHostName?: string[];
      /**
       * Specifies source type
       * * INTERNAL
       * * OCPI
       * * HUBJECT
       * * GIREVE
       * * SEMA
       * * OCHP
       * * FLEET
       * * IAFC
       */
      sourceType?:
        | "INTERNAL"
        | "OCPI"
        | "HUBJECT"
        | "GIREVE"
        | "SEMA"
        | "OCHP"
        | "FLEET";
      /**
       * Specifies property status
       * * PLANNED
       * * READY_FOR_PROVISIONING
       * * PROVISIONED
       * * SCHEDULED_FOR_DECOMMISSIONING
       * * DECOMMISSIONED
       * * DENETWORKED
       * * CONTRACT_TERMINATED
       * * CONTRACT_EXPIRED
       */
      statuses?:
        | "PLANNED"
        | "READY_FOR_PROVISIONING"
        | "PROVISIONED"
        | "SCHEDULED_FOR_DECOMMISSIONING"
        | "DECOMMISSIONED"
        | "DENETWORKED"
        | "CONTRACT_TERMINATED"
        | "CONTRACT_EXPIRED";
      legacyId?: string;
      dateProvisioned?: string;
      /**
       * Specifies location type
       * * DEALERSHIP
       * * MULTI_FAMILY
       * * WORKPLACE
       * * RETAIL
       * * GARAGE
       * * HIGHWAY
       * * BIG_TOWN
       * * SMALL_TOWN
       * * COMMUTER_TRANSIT
       * * RURAL
       * * NEIGHBORHOOD
       */
      locationTypes?:
        | "DEALERSHIP"
        | "MULTI_FAMILY"
        | "WORKPLACE"
        | "RETAIL"
        | "GARAGE"
        | "HIGHWAY"
        | "BIG_TOWN"
        | "SMALL_TOWN"
        | "COMMUTER_TRANSIT"
        | "RURAL"
        | "NEIGHBORHOOD";
    };
    /** Add operator object */
    OperatorCreate: {
      firstName: string;
      lastName: string;
      email: string;
      mobile?: string;
      role: string;
      subRoles?: string[];
      /**
       * Password must contain:
       * * at least 8 characters
       * * at least one digit
       * * at least one lower case letter
       * * at least one upper case letter
       * * at least one special character
       */
      password: string;
      /**
       * Confirmation password must be equal to password and contain:
       * * at least 8 characters
       * * at least one digit
       * * at least one lower case letter
       * * at least one upper case letter
       * * at least one special character
       */
      confirmPassword: string;
      companyId: number;
      locale?: string;
      chargerGroupId?: number;
      chargerHostId?: number;
    };
    CompanyResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Company"][];
    };
    ExtendedOperator: {
      id: number;
      primaryRole: string;
      subRoles?: string[];
      chargerGroupMandatory: boolean;
      status: string;
      accountIsBlocked: boolean;
      firstName: string;
      lastName: string;
      mobile?: string;
      email: string;
      creationDate: number;
      lastModificationDate: number;
      company?: components["schemas"]["CompanyResponse"];
      chargerGroupId?: number;
      chargerHost?: components["schemas"]["OperatorChargerHost"];
      userNotificationPreference?: components["schemas"]["UserNotificationPreference"][];
      generatedPassword?: string;
    };
    ExtendedOperatorResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ExtendedOperator"][];
    };
    OperatorChargerHost: {
      id?: number;
      name?: string;
    };
    UserNotificationPreference: {
      id: number;
      userId: number;
      stationEventType: string;
      cellApp?: boolean;
      email?: boolean;
      sms?: boolean;
    };
    /** Filter object to be used for searching */
    OperatorFilter: {
      ids?: number[];
      email?: string;
    };
    Operator: {
      id: number;
      primaryRole: string;
      subRoles?: string[];
      chargerGroupMandatory: boolean;
      status: string;
      accountIsBlocked: boolean;
      firstName: string;
      lastName: string;
      mobile?: string;
      email: string;
      creationDate: number;
      lastModificationDate: number;
      company?: components["schemas"]["CompanyResponse"];
      chargerGroupId?: number;
      chargerHost?: components["schemas"]["OperatorChargerHost"];
      userNotificationPreference?: components["schemas"]["UserNotificationPreference"][];
    };
    OperatorResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Operator"][];
    };
    /** Filter object to be used for searching */
    GuestDriverDetailsFilter: {
      transactionsIds: number[];
    };
    GuestDriverDetails: {
      billingTransactionId?: number;
      firstLastName?: string;
      email?: string;
    };
    GuestDriverDetailsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["GuestDriverDetails"][];
    };
    /** Filter object to be used for searching */
    EvTransactionFilter: {
      ids?: number[];
      accountNumber?: number;
      fromDate?: string;
      toDate?: string;
      chargerIds?: number[];
      connectorIds?: number[];
      evseId?: string;
      transactionBillingStatus: "FINAL_COST";
    };
    ChargerHost: {
      id?: number;
      name?: string;
    };
    Cost: {
      estimated?: number;
      currency?: string;
      totalTax?: number;
      total?: number;
    };
    ErrorInfo: {
      errorCode?: string;
      vendorErrorCode?: string;
      errorMessage?: string;
    };
    EvTransaction: {
      id?: number;
      /**
       * Specifies EV transaction connector status
       * * AVAILABLE
       * * CHARGING
       * * FAULTED
       * * UNAVAILABLE
       * * NEW
       * * UNKNOWN
       * * RESERVED
       * * DISCHARGING
       * * PAUSED
       * * PREPARING
       * * FINISHING
       */
      connectorStatus?: string;
      /**
       * Specifies EV transaction connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
      /**
       * Specifies EV transaction status
       * * STARTED
       * * UPDATED
       * * STOPPED
       * * BILLED
       */
      transactionStatus?: string;
      /**
       * Specifies EV transaction billing status
       * * NOT_BILLABLE
       * * TEMP_COST
       * * FINAL_COST
       * * DICTATED_COST
       * * EXCEEDED_BILLING_CALC_TIME_RANGE
       * * FREE_CHARGE
       */
      transactionBillingStatus?: string;
      /**
       * Specifies EV transaction stop reason
       * * EMERGENCY_STOP
       * * EV_DISCONNECTED
       * * HARD_RESET
       * * LOCAL
       * * OTHER
       * * POWER_LOSS
       * * REBOOT
       * * REMOTE
       * * SOFT_RESET
       * * UNLOCK_COMMAND
       * * DE_AUTHORIZED
       * * ENERGY_LIMIT_REACHED
       * * GROUND_FAULT
       * * IMMEDIATE_RESET
       * * MASTER_PASS
       * * LOCAL_OUT_OF_CREDIT
       * * OVERCURRENT_FAULT
       * * POWER_QUALITY
       * * SOC_LIMIT_REACHED
       * * STOPPED_BY_EV
       * * TIME_LIMIT_REACHED
       * * TIMEOUT
       * * MANUAL_STOP_CHARGE_BY_OPERATOR
       * * CONCURRENT_CHARGING
       * * BEFORE_RESERVATION
       */
      stopReason?: string;
      corruptedReasons?: string[];
      accountNumber?: number;
      planId?: number;
      chargePower?: number;
      connectorId?: number;
      meterReadOnStart?: number;
      meterReadOnStop?: number;
      smart?: boolean;
      startedOn?: number;
      stoppedOn?: number;
      chargeTime?: number;
      chargerId?: number;
      vehicleSoc?: number;
      planCode?: string;
      billingTransactionId?: number;
      cardId?: number;
      cardNumber?: string;
      billedTime?: number;
      totalEnergy?: number;
      tariffId?: number;
      chargerPublicKey?: string;
      startMeterSignedData?: string;
      stopMeterSignedData?: string;
      reservationId?: number;
      evseId?: string;
      authorizationFailureReason?: string;
      accepted?: boolean;
      errorInfo?: components["schemas"]["ErrorInfo"];
      cost?: components["schemas"]["Cost"];
      chargerHost?: components["schemas"]["ChargerHost"];
    };
    EvTransactionResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["EvTransaction"][];
    };
    /** Policy create object */
    PolicyCreate: {
      strategy: "EVEN_SPREAD, FIFO";
      prioritizeByBillingPlan?: boolean;
      prioritizeBySoc?: boolean;
      targetSoc?: number;
      currentAfterSocTarget?: number;
      prioritizeByDriverProfile?: boolean;
      prioritizeByExternalIntegration?: boolean;
      releaseUnusedAllocatedCurrentIfCurrentStableDuring?: number;
      prioritizeByEnergyRequirement?: boolean;
      slowChargeDepartureTimeFromStart?: string;
      fastChargeDepartureTimeFromStart?: string;
      departureTimeAbsolute?: string;
      defaultVehicleEnergyRequirement?: number;
      defaultMinChargeCurrent?: number;
      dropChargePriceThreshold?: number;
      dropChargePercentage?: number;
      /** The price at which to stop the power a charger receives */
      stopChargePriceThreshold?: number;
      utilityDataSource?: "INTERNAL, OPEN_ADR, OSCP";
      mainInputCircuitResourceId?: string;
      /** Energy use limit when peak shaving is applied, in kW */
      peakShavingRate?: number;
      renewableEnergyGeneration?: boolean;
    };
    DepartureTime: {
      /** Set the start time of slow departure as a fixed time */
      slowChargeDepartureTimeFromStart?: number;
      /** Set the start time of fast departure as a fixed time */
      fastChargeDepartureTimeFromStart?: number;
      /** Set the default time of departure as a fixed time */
      departureTimeAbsolute?: number;
    };
    Policy: {
      id?: number;
      /**
       * Defines how chargers are prioritized when there is not enough energy to meet demand
       *  Specifies strategy type
       * * EVEN_SPREAD
       * * FIFO
       */
      strategy?: string;
      /** Priority defined in the Energy management priority field of the driver plan */
      prioritizeByBillingPlan?: boolean;
      /** Use the state of charge of a vehicle to define the charging priority */
      prioritizeBySoc?: boolean;
      /** Target charge amount */
      targetSoc?: number;
      /** The target charge amount (x) to use after a specific state of charge (y) or the departure time is reached. */
      currentAfterSocTarget?: number;
      /** Take the driver’s energy management profile into consideration when calculating the charging priority */
      prioritizeByDriverProfile?: boolean;
      /** Use the priority that is supplied via an API from an external system */
      prioritizeByExternalIntegration?: boolean;
      /** The number of minutes that the charging current must remain stable at a charger before it is assumed that the vehicle charging doesnt need to be charged anymore */
      timeToReleaseUnusedCurrent?: number;
      /** Use the priority that energy required by a vehicle when a driver doesnt enter the value in the mobile app */
      prioritizeByEnergyReqAndTod?: boolean;
      defaultVehicleEnergyReq?: number;
      /** The minimum current that is required for energy management strategies to work */
      defaultMinChargeCurrent?: number;
      /** The price at which to reduce the power a charger receives */
      dropChargePriceThreshold?: number;
      /** The percentage amount to reduce the power by when the price reaches the Drop charge price threshold */
      dropChargePercentage?: number;
      /** The price at which to stop the power a charger receives */
      stopChargePriceThreshold?: number;
      /**
       * The connection used to send demand/response events between distribution system operators (DSOs), utilities, and the energy management system
       *  Specifies utility data source type
       * * INTERNAL
       * * OPEN_ADR
       * * OSCP
       */
      utilityDataSource?: string;
      mainInputCircuitResourceId?: string;
      /** Apply peak shaving, where the power supply is reduced during peak energy consumption */
      applyPeakShaving?: boolean;
      /** Energy use limit when peak shaving is applied, in kW */
      peakShavingCurrent?: number;
      meterNumber?: string;
      ratedVoltage?: number;
      energyStorage?: boolean;
      electricityTopologyId?: number;
      renewableEnergyGeneration?: boolean;
      departureTime?: components["schemas"]["DepartureTime"];
    };
    PolicyResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Policy"][];
    };
    /** Filter object to be used for searching */
    PolicyFilter: {
      ids?: number[];
      siteId?: number;
    };
    /** Customer tariff create object */
    CustomerTariffCreate: {
      name: string;
      tariffCode: string;
      externalId?: string;
      description?: string;
      displayDescription?: string;
      externalTariffId?: string;
      fixedPrice?: number;
      minFee?: number;
      transactionFee?: number;
      maxChargeTimeInMinutes?: number;
      maxChargeAmount?: number;
      maxChargeKwh?: number;
      fixedParkingFee?: number;
      hourlyParkingRate?: number;
      overtimePenalty?: number;
      utilityTariffId?: number;
      addedCostToUtilityRate?: number;
      overtimeChargeBehaviour: "STOP_CHARGE" | "APPLY_PENALTY" | "NO_BEHAVIOUR";
      firstLevelPeriod?: components["schemas"]["LevelPeriodCreate"];
      secondLevelPeriod?: components["schemas"]["LevelPeriodCreate"];
      thirdLevelPeriod?: components["schemas"]["LevelPeriodCreate"];
    };
    LevelPeriodCreate: {
      durationInHours?: number;
      kwhRate?: number;
      plugInMinuteRate?: number;
      plugInHourlyRate?: number;
      minuteRate?: number;
      hourlyRate?: number;
    };
    CustomerTariff: {
      id?: number;
      name?: string;
      tariffCode?: string;
      externalId?: string;
      /**
       * Specifies source type
       * * INTERNAL
       * * OCPI
       * * HUBJECT
       * * GIREVE
       * * SEMA
       * * OCHP
       * * FLEET
       * * IAFC
       */
      sourceType?: string;
      description?: string;
      displayDescription?: string;
      externalTariffId?: string;
      fixedPrice?: number;
      minFee?: number;
      transactionFee?: number;
      maxChargeTimeInMinutes?: number;
      maxChargeAmount?: number;
      maxChargeKwh?: number;
      fixedParkingFee?: number;
      hourlyParkingRate?: number;
      overtimePenalty?: number;
      utilityTariffId?: number;
      addedCostToUtilityRate?: number;
      /**
       * Specifies overtime charge behaviour
       * * NO_BEHAVIOUR
       * * STOP_CHARGE
       * * APPLY_PENALTY
       */
      overtimeChargeBehaviour?: "STOP_CHARGE, APPLY_PENALTY, NO_BEHAVIOUR";
      firstLevelPeriod?: components["schemas"]["LevelPeriod"];
      secondLevelPeriod?: components["schemas"]["LevelPeriod"];
      thirdLevelPeriod?: components["schemas"]["LevelPeriod"];
      countryCurrency?: components["schemas"]["CountryCurrency"];
    };
    CustomerTariffResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerTariff"][];
    };
    LevelPeriod: {
      durationInHours?: number;
      kwhRate?: number;
      plugInMinuteRate?: number;
      plugInHourlyRate?: number;
      minuteRate?: number;
      hourlyRate?: number;
    };
    /** Reservation tariff term create object */
    ReserveNowTermCreate: {
      length: number;
      fee?: number;
      noShowFee?: number;
    };
    CustomerReservationTariffNow: {
      id?: number;
      cancellationFee?: number;
      chargePerMinute?: boolean;
      sameFeeForNoShow?: boolean;
      reservationTerms?: components["schemas"]["ReservationTerm"][];
    };
    CustomerReservationTariffNowResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerReservationTariffNow"][];
    };
    ReservationTerm: {
      id?: number;
      length?: number;
      fee?: number;
      noShowFee?: number;
    };
    CountryCurrencyPair: {
      countryCode: string;
      currency: string;
    };
    /** Filter object to be used for searching */
    CustomerTariffFilter: {
      name?: string;
      description?: string;
      tariffCode?: string;
      externalId?: string;
      sourceType?:
        | "INTERNAL"
        | "OCPI"
        | "HUBJECT"
        | "GIREVE"
        | "SEMA"
        | "OCHP"
        | "FLEET"
        | "IAFC";
      countryCurrency?: components["schemas"]["CountryCurrencyPair"];
    };
    /** Customer plan create object */
    PlanCreate: {
      name: string;
      description: string;
      code: string;
      subscriptionName?: string;
      externalId?: string;
      balanceType:
        | "PRE_PAID"
        | "POST_PAID"
        | "NON_PAYING"
        | "PAYMENT_IMMEDIATELY"
        | "POST_PAID_IMMEDIATELY";
      category:
        | "SINGLE_TARIFF_FOR_ALL_DRIVERS"
        | "MEMBERSHIP"
        | "ROAMING"
        | "OTP";
      discountRate?: number;
      costFactor: number;
      appearanceOrder: number;
      minCommitmentInMonths: number;
      terminationBehavior: "TERMINATE" | "EVERGREEN" | "ROLLOVER";
      customerRolloverPlanCode?: string;
      waiveRolloverPlanSetupFee?: boolean;
      rolloverSwitchDate?: string;
      etf?: number;
      resetEtfOnRollover?: boolean;
      showOnRegistration?: boolean;
      displayOnly?: boolean;
      showExistingCardInputOnRegistration?: boolean;
      requireCardNumber?: boolean;
      showExistingVehicleInputOnRegistration?: boolean;
      requireVehicleInformation?: boolean;
      licenseNumberLabelKeySuffix?: string;
      showInFilterList?: boolean;
      excludeFromDefaultPlanFilter?: boolean;
      hiddenFromDriver?: boolean;
      includeInQaReport?: boolean;
      disableSmartCharging?: boolean;
      allowDisableSmartCharging?: boolean;
      trackAnalytics?: boolean;
      allowRoaming?: boolean;
      requireVin?: boolean;
      vinOemId?: number;
      showVinInputToDriver?: boolean;
      useVinSalesDateForContractEndDate?: boolean;
      cardBrandId?: number;
      cardExternalOemId?: number;
      requireChargeLocationAssignment?: boolean;
      financialCode: string;
      codeForExternalInterfaces: string;
      energyManagementPriority?: number;
      fixedInitialPaymentAmount?: number;
      allowReserveNow?: boolean;
      allowReserveByDate?: boolean;
      excludeFromHostPayment?: boolean;
      planDuration?: number;
      displayCode: string;
      filterDisplayCode?: string;
      tariffCode: string;
    };
    CustomerPlanProfile: {
      id?: number;
      name?: string;
      description?: string;
      code?: string;
      subscriptionName?: string;
      externalId?: string;
      /**
       * * Specifies the balance type
       * * PRE_PAID
       * * POST_PAID
       * * NON_PAYING
       * * PAYMENT_IMMEDIATELY
       * * POST_PAID_IMMEDIATELY
       */
      balanceType?: string;
      /**
       * * Specifies the category
       * * SINGLE_TARIFF_FOR_ALL_DRIVERS
       * * MEMBERSHIP
       * * ROAMING
       * * OTP
       */
      category?: string;
      discountRate?: number;
      costFactor?: number;
      appearanceOrder?: number;
      minCommitmentInMonths?: number;
      etf?: number;
      /**
       * * Specifies the termination behaviour
       * * TERMINATE
       * * EVERGREEN
       * * ROLLOVER
       */
      terminationBehavior?: string;
      rolloverPlanId?: number;
      waiveRolloverPlanSetupFee?: boolean;
      rolloverSwitchDate?: string;
      resetEtfOnRollover?: boolean;
      active?: boolean;
      showOnRegistration?: boolean;
      displayOnly?: boolean;
      showExistingCardInputOnRegistration?: boolean;
      requireExistingCardInput?: boolean;
      showExistingVehicleInputOnRegistration?: boolean;
      requireExistingVehicleInput?: boolean;
      licenseNumberLabelKeySuffix?: string;
      showInFilterList?: boolean;
      excludeFromDefaultPlanFilter?: boolean;
      hiddenFromDriver?: boolean;
      includeInQaReport?: boolean;
      allowSelectionWithoutPaymentMethod?: boolean;
      disableSmartCharging?: boolean;
      allowDisableSmartCharging?: boolean;
      trackAnalytics?: boolean;
      allowRoaming?: boolean;
      requireVin?: boolean;
      vinOemId?: number;
      showVinInputToDriver?: boolean;
      useVinSalesDateForContractEndDate?: boolean;
      cardBrandId?: number;
      cardBrandName?: string;
      cardExternalOemId?: number;
      cardExternalOemName?: string;
      requireChargeLocationAssignment?: boolean;
      financialCode?: string;
      codeForExternalInterfaces?: string;
      energyManagementPriority?: number;
      fixedInitialPaymentAmount?: number;
      allowReserveNow?: boolean;
      allowReserveByDate?: boolean;
      excludeFromHostPayment?: boolean;
      planDuration?: number;
      countryCurrency?: components["schemas"]["CountryCurrency"];
    };
    PlanProfileResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerPlanProfile"][];
    };
    /** Plan product create object */
    PlanProductCreate: {
      /**
       * Specifies product type
       * * RFID_CARD_PURCHASE
       * * SETUP_FEE
       * * SUBSCRIPTION_FEE
       * * MONTHLY_USAGE_CREDIT
       */
      productType: string;
      price: number;
      /**
       * Specifies credit recurrence
       * * ONE_TIME
       * * MONTHLY
       * * ANNUALLY
       * * EVERY_USAGE
       * * ROLLOVER
       * * EXPIRED
       */
      creditRecurrence: string;
      freeUnits: number;
    };
    CustomerPlanProduct: {
      id?: number;
      /**
       * Specifies product type
       * * RFID_CARD_PURCHASE
       * * SETUP_FEE
       * * PAYMENT_RECEIVED
       * * REFUND_PAID
       * * TRANSACTION_FEE
       * * ENERGY_FEE
       * * HOURLY_FEE
       * * RESERVATION_FEE
       * * RESERVATION_PENALTY_FEE
       * * CURRENCY_CONVERSION_FEE
       * * STANDARD_SOCKET_CHARGE_TRANSACTION_FEE
       * * FAST_SOCKET_CHARGE_TRANSACTION_FEE
       * * STANDARD_SOCKET_MONTHLY_SERVICE_FEE
       * * FAST_SOCKET_MONTHLY_SERVICE_FEE
       * * PAYOUT
       * * ANNUAL_STATION_HOST_FEE
       * * MONTHLY_STATION_HOST_FEE
       * * SUBSCRIPTION_FEE
       * * AUTHORIZATION_FEE
       * * OVERTIME_PENALTY_FEE
       * * EARLY_TERMINATION_FEE
       * * ENERGY_REIMBURSEMENT_PER_KWH
       * * NOT_IN_USE_STATION_OWNER_PLUG_HOUR_FEE
       * * DISCONNECTION_FEE
       * * LATE_PAYMENT_FEE
       * * NOT_IN_USE_DEBIT
       * * DEBIT_PAYMENT
       * * LATE_FEE_ADJUSTMENT
       * * MINUTE_FEE
       * * CREDIT_ON_ACCOUNT
       * * DEBIT_ON_ACCOUNT
       * * NOT_IN_USE_PAYMENT
       * * LICENSE_FEE
       * * POWER_PAYMENT
       * * ENERGY_PAYMENT
       * * SERVICE_FEE
       * * DISCONNECT_FEE_ADJUSTMENT
       * * STANDARD_SOCKET_CHARGE_TRANSACTION_KWH_FEE
       * * FAST_SOCKET_CHARGE_TRANSACTION_KWH_FEE
       * * ACH_PAYMENT_TO_CUSTOMER
       * * CHECK_PAYMENT_TO_CUSTOMER
       * * CHECK_PAYMENT_TO_HOST
       * * ACH_PAYMENT_TO_HOST
       * * CARD_PAYMENT_TO_CUSTOMER
       * * CARD_PAYMENT_TO_HOST
       * * ACH_PAYMENT
       * * CHECK_PAYMENT
       * * CARD_PAYMENT
       * * PLUG_TIME_HOURLY_FEE
       * * PLUG_TIME_MINUTE_FEE
       * * REVERSE_TRANSACTION_FEE
       * * REVERSE_ENERGY_FEE
       * * REVERSE_HOURLY_FEE
       * * REVERSE_STANDARD_SOCKET_CHARGE_TRANSACTION_FEE
       * * REVERSE_FAST_SOCKET_CHARGE_TRANSACTION_FEE
       * * REVERSE_AUTHORIZATION_FEE
       * * REVERSE_MINUTE_FEE
       * * REVERSE_STANDARD_SOCKET_CHARGE_TRANSACTION_KWH_FEE
       * * REVERSE_FAST_SOCKET_CHARGE_TRANSACTION_KWH_FEE
       * * REVERSE_PLUG_TIME_HOURLY_FEE
       * * REVERSE_PLUG_TIME_MINUTE_FEE
       * * CREDIT_ON_ACCOUNT_WITH_TAX
       * * DEBIT_ON_ACCOUNT_WITH_TAX
       * * OUTSTANDING_ACCOUNT_ACTIVITY
       * * REVERSE_RFID_CARD_PURCHASE
       * * REVERSE_SETUP_FEE
       * * REVERSE_PAYMENT_RECEIVED
       * * REVERSE_REFUND_PAID
       * * REVERSE_RESERVATION_FEE
       * * REVERSE_RESERVATION_PENALTY_FEE
       * * REVERSE_CURRENCY_CONVERSION_FEE
       * * REVERSE_STANDARD_SOCKET_MONTHLY_SERVICE_FEE
       * * REVERSE_FAST_SOCKET_MONTHLY_SERVICE_FEE
       * * REVERSE_PAYOUT
       * * REVERSE_ANNUAL_STATION_HOST_FEE
       * * REVERSE_MONTHLY_STATION_HOST_FEE
       * * REVERSE_SUBSCRIPTION_FEE
       * * REVERSE_OVERTIME_PENALTY_FEE
       * * REVERSE_EARLY_TERMINATION_FEE
       * * REVERSE_ENERGY_REIMBURSEMENT_PER_KWH
       * * REVERSE_DISCONNECTION_FEE
       * * REVERSE_LATE_PAYMENT_FEE
       * * REVERSE_DEBIT_PAYMENT
       * * REVERSE_LATE_FEE_ADJUSTMENT
       * * REVERSE_CREDIT_ON_ACCOUNT
       * * REVERSE_DEBIT_ON_ACCOUNT
       * * REVERSE_LICENSE_FEE
       * * REVERSE_POWER_PAYMENT
       * * REVERSE_ENERGY_PAYMENT
       * * REVERSE_SERVICE_FEE
       * * REVERSE_DISCONNECT_FEE_ADJUSTMENT
       * * REVERSE_ACH_PAYMENT_TO_CUSTOMER
       * * REVERSE_CHECK_PAYMENT_TO_CUSTOMER
       * * REVERSE_CHECK_PAYMENT_TO_HOST
       * * REVERSE_ACH_PAYMENT_TO_HOST
       * * REVERSE_CARD_PAYMENT_TO_CUSTOMER
       * * REVERSE_CARD_PAYMENT_TO_HOST
       * * REVERSE_ACH_PAYMENT
       * * REVERSE_CHECK_PAYMENT
       * * REVERSE_CARD_PAYMENT
       * * REVERSE_CREDIT_ON_ACCOUNT_WITH_TAX
       * * REVERSE_DEBIT_ON_ACCOUNT_WITH_TAX
       * * REVERSE_OUTSTANDING_ACCOUNT_ACTIVITY
       * * SUBSCRIPTION_REV_SHARE
       * * REVERSE_SUBSCRIPTION_REV_SHARE
       * * MONTHLY_USAGE_CREDIT
       * * NON_ACCOUNT_TRANSACTION_FEE
       * * NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_FEE
       * * NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_FEE
       * * NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_KWH_FEE
       * * NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_KWH_FEE
       * * RESERVATION_CHANGE_FEE
       * * REVERSE_MONTHLY_USAGE_CREDIT
       * * REVERSE_NON_ACCOUNT_TRANSACTION_FEE
       * * REVERSE_NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_FEE
       * * REVERSE_NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_FEE
       * * REVERSE_NON_ACCOUNT_STANDARD_SOCKET_CHARGE_TRX_KWH_FEE
       * * REVERSE_NON_ACCOUNT_FAST_SOCKET_CHARGE_TRX_KWH_FEE
       * * REVERSE_RESERVATION_CHANGE_FEE
       * * AD_HOC_USAGE_CREDIT
       * * RESERVATION_CANCELLATION_FEE
       * * REVERSE_RESERVATION_CANCELLATION_FEE
       * * FUTURE_RESERVATION_FEE
       * * FUTURE_RESERVATION_CANCELLATION_FEE
       * * REVERSE_FUTURE_RESERVATION_FEE
       * * REVERSE_FUTURE_RESERVATION_CANCELLATION_FEE
       * * FUTURE_RESERVATION_PENALTY_FEE
       * * REVERSE_FUTURE_RESERVATION_PENALTY_FEE
       * * DEBIT_CHARGING_TRANSACTION
       * * REVERSE_DEBIT_CHARGING_TRANSACTION
       * * CREDIT_CHARGING_TRANSACTION
       * * REVERSE_CREDIT_CHARGING_TRANSACTION
       * * PENALTY
       * * REVERSE_PENALTY
       * * TRANSACTION_FEE_DISCOUNT
       * * REVERSE_TRANSACTION_FEE_DISCOUNT
       * * RESERVATION_FEE_DISCOUNT
       * * REVERSE_RESERVATION_FEE_DISCOUNT
       * * SETUP_FEE_DISCOUNT
       * * REVERSE_SETUP_FEE_DISCOUNT
       * * SUBSCRIPTION_FEE_DISCOUNT
       * * REVERSE_SUBSCRIPTION_FEE_DISCOUNT
       * * RFID_CARD_PURCHASE_DISCOUNT
       * * REVERSE_RFID_CARD_PURCHASE_DISCOUNT
       * * OVERTIME_PENALTY_FEE_DISCOUNT
       * * REVERSE_OVERTIME_PENALTY_FEE_DISCOUNT
       * * FUTURE_RESERVATION_FEE_DISCOUNT
       * * REVERSE_FUTURE_RESERVATION_FEE_DISCOUNT
       * * RESERVATION_CANCELLATION_FEE_DISCOUNT
       * * REVERSE_RESERVATION_CANCELLATION_FEE_DISCOUNT
       * * FUTURE_RESERVATION_CANCELLATION_FEE_DISCOUNT
       * * REVERSE_FUTURE_RESERVATION_CANCELLATION_FEE_DISCOUNT
       * * RESERVATION_PENALTY_FEE_DISCOUNT
       * * REVERSE_RESERVATION_PENALTY_FEE_DISCOUNT
       * * FUTURE_RESERVATION_PENALTY_FEE_DISCOUNT
       * * REVERSE_FUTURE_RESERVATION_PENALTY_FEE_DISCOUNT
       */
      productType?: string;
      price?: number;
      /**
       * Specifies payment terms
       * * ONE_TIME
       * * MONTHLY
       * * ANNUALLY
       * * EVERY_USAGE
       * * ROLLOVER
       * * EXPIRED
       */
      creditRecurrence?: string;
      freeUnits?: number;
      monthlyUsageCredit?: number;
    };
    CustomerPlanProducts: {
      id?: number;
      code: string;
      countryCurrency?: components["schemas"]["CountryCurrency"];
      products?: components["schemas"]["CustomerPlanProduct"][];
    };
    PlanProductsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerPlanProducts"][];
    };
    /** Filter object to be used for searching */
    PlanProfileFilter: {
      ids?: number[];
      externalId?: string;
      codes?: string[];
      countryCurrency?: components["schemas"]["CountryCurrencyPair"];
      /**
       * * Specifies the balance type
       * * PRE_PAID
       * * POST_PAID
       * * NON_PAYING
       * * PAYMENT_IMMEDIATELY
       * * POST_PAID_IMMEDIATELY
       */
      balanceType?:
        | "PRE_PAID"
        | "POST_PAID"
        | "NON_PAYING"
        | "POST_PAID_IMMEDIATELY";
      active?: boolean;
      showOnRegistration?: boolean;
      hiddenFromDriver?: boolean;
    };
    /** Customer create object */
    CustomerCreate: {
      chargerHostId?: number;
      firstName: string;
      lastName: string;
      /**
       * Password must contain:
       * * at least 8 characters
       * * at least one digit
       * * at least one lower case letter
       * * at least one upper case letter
       * * at least one special character
       */
      password: string;
      email: string;
      mobile?: string;
      /**
       * * Specifies the account type
       * * CORPORATE
       * * PRIVATE
       * * FLEET
       */
      accountType: "CORPORATE" | "PRIVATE" | "FLEET";
      externalId?: string;
      scope?: string;
      gender?: "MALE" | "FEMALE" | "OTHER" | "NOT_SPECIFIED";
      billingAddress: components["schemas"]["AddressCreate"];
      shippingAddress: components["schemas"]["AddressCreate"];
      termsAndConditionsConsent: boolean;
      profilingConsent?: boolean;
      activationMode: "REGISTERED" | "ACTIVE";
      countryCurrencyId: number;
      anniversaryDay?: number;
    };
    B2B: {
      taxNumber?: string;
      vatNumber?: string;
      identificationNumber?: string;
      taxOffice?: string;
      profession?: string;
      customerName?: string;
    };
    CustomerAccount: {
      id?: number;
      accountNumber?: number;
      firstName?: string;
      lastName?: string;
      /**
       * * Specifies the gender
       * * FEMALE
       * * MALE
       * * OTHER
       */
      gender?: string;
      /**
       * * Specifies the account type
       * * CORPORATE
       * * PRIVATE
       * * FLEET
       * * TEST
       * * EXTERNAL_PAYMENT_USER
       * * EMSP
       */
      accountType?: string;
      /**
       * * Specifies the user's status
       * * REGISTERED
       * * ACTIVE
       * * SUSPENDED
       * * INVITED
       * * CLOSED_DELINQUENCY
       * * SUSPENDED_DELINQUENCY
       * * CLOSED
       * * CLOSED_CUSTOMER_REQUEST
       */
      status?: string;
      email?: string;
      mobilePhone?: string;
      externalId?: string;
      groupName?: string;
      shippingAddress?: components["schemas"]["Address"];
      billingAddress?: components["schemas"]["Address"];
      b2b?: components["schemas"]["B2B"];
    };
    CustomerAccountResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerAccount"][];
    };
    /** Member create object */
    MemberCreate: {
      firstName: string;
      lastName: string;
      /**
       * Password must contain:
       * * at least 8 characters
       * * at least one digit
       * * at least one lower case letter
       * * at least one upper case letter
       * * at least one special character
       */
      password: string;
      email: string;
      mobile?: string;
      externalId?: string;
      role: "MEMBER" | "FLEET_MANAGER";
      groupName?: string;
      activationMode: "AUTO_ACTIVATE" | "INVITE" | "INHERIT";
    };
    Member: {
      id?: number;
      firstName?: string;
      lastName?: string;
      /**
       * * Specifies the account type
       * * CORPORATE
       * * PRIVATE
       * * FLEET
       * * TEST
       * * EXTERNAL_PAYMENT_USER
       * * EMSP
       */
      accountType?: string;
      /**
       * * Specifies the member role
       * * MEMBER
       */
      memberRole?: string;
      /**
       * * Specifies the user's status
       * * REGISTERED
       * * ACTIVE
       * * SUSPENDED
       * * INVITED
       * * CLOSED_DELINQUENCY
       * * SUSPENDED_DELINQUENCY
       * * CLOSED
       * * CLOSED_CUSTOMER_REQUEST
       */
      status?: string;
      payingCustomerId?: number;
      payingAccountNumber?: number;
      profilePicture?: string;
      email?: string;
      mobilePhone?: string;
      phoneNumber?: string;
      externalId?: string;
      accountNumber?: number;
      userAcceptedTermsAndConditions?: boolean;
      userAcceptedProfiling?: boolean;
      subscribeToEmailUpdates?: boolean;
      groupName?: string;
      b2bAccountType?: boolean;
      shippingAddress?: components["schemas"]["Address"];
    };
    MemberResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Member"][];
    };
    /** Filter object to be used for searching */
    MemberFilter: {
      ids?: number[];
      externalId?: string;
      payingAccountNumber?: number;
    };
    /** Filter object to be used for searching */
    CustomerFilter: {
      payingAccountNumbers?: number[];
      externalId?: string;
    };
    /** Filter object to be used for searching */
    CountryCurrencyFilter: {
      countryCode?: string;
      currency?: string;
    };
    CountryCurrencyResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CountryCurrency"][];
    };
    /** Contact person create object */
    ContactPersonCreate: {
      firstName: string;
      lastName: string;
      email: string;
      mobilePhoneNumber?: string;
      shippingAddress: components["schemas"]["AddressCreate"];
      billingAddress: components["schemas"]["AddressCreate"];
    };
    ContactPersonResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ContactPerson"][];
    };
    /** Filter object to be used for searching */
    ContactPersonFilter: {
      ids?: number[];
      email?: string;
    };
    /** Filter object to be used for searching */
    ConfigurationFilter: {
      names?: string[];
    };
    Configuration: {
      id?: number;
      name?: string;
      value?: string;
      description?: string;
      /**
       * Specifies allowed user operations
       * * READ
       * * WRITE
       */
      allowedUserOperation?: string;
    };
    ConfigurationResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Configuration"][];
    };
    /** Filter object to be used for searching */
    CompanyFilter: {
      types?:
        | "UNKNOWN"
        | "INSTALLER"
        | "MANUFACTURER"
        | "STATION_HOST"
        | "PROPERTY_OWNER"
        | "UTILITY_COMPANY"
        | "RFID_CARD_SUPPLIER"
        | "WIRELESS_CARRIER"
        | "SERVICE_PROVIDER"
        | "SERVICE_COMPANY"
        | "OEM"
        | "PROPERTY_OWNER_FREEDOM_STATION"
        | "BUILDING_OWNER"
        | "BUILDING_OWNER_FREEDOM_STATION"
        | "CONTRACTOR"
        | "EV_DRIVER"
        | "RETAIL_PROPERTY"
        | "TENANT"
        | "AUTO_DEALERSHIP";
      countryCode?: string;
    };
    /** Charger create object */
    ChargerCreate: {
      siteId: number;
      identityKey: string;
      externalId?: string;
      description?: string;
      caption: string;
      infrastructureCompanyId: number;
      accessLevel: "USE_SITE" | "PUBLIC" | "PRIVATE" | "TAXI_ONLY";
      modelId: number;
      chargerHostId: number;
      serialNumber: string;
    };
    Charger: {
      id?: number;
      identityKey?: string;
      caption?: string;
      description?: string;
      externalId?: string;
      chargerHostId?: number;
      siteId?: number;
      infrastructureCompanyId?: number;
      /**
       * * Specifies the access type
       * * USE_SITE
       * * PUBLIC
       * * PRIVATE
       * * TAXI_ONLY
       */
      accessLevel?: string;
      modelId: number;
      protocolId?: number;
      /**
       * * Specifies the provision process status
       * * ORDERED
       * * IN_STOCK
       * * READY_FOR_INSTALLATION
       * * INSTALLED
       * * CONNECTED
       * * READY_FOR_PROVISIONING
       * * PROVISIONED
       * * SCHEDULED_FOR_DECOMMISSIONING
       * * DECOMMISSIONED
       * * DENETWORKED
       * * IN_CONSTRUCTION
       * * IN_INSTALLATION
       */
      provisionStatus?: string;
      latitude?: number;
      longitude?: number;
      status?: string;
      utilityCompanyId?: number;
      utilityTariffId?: number;
      /**
       * * Specifies the authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      authenticationMethods?: string[];
      /**
       * * Specifies the payment methods
       * * FREE
       * * CARD
       * * PARK_AND_CHARGE
       * * SMS
       * * CALL
       * * CONTRACT
       * * PLUG_AND_CHARGE
       */
      paymentMethods?: string[];
      /**
       * * Specifies the charge speed
       * * SLOW
       * * SEMI_FAST
       * * FAST
       * * ULTRA_FAST
       */
      chargingSpeed?: string;
      address?: components["schemas"]["Address"];
      evses?: components["schemas"]["Evse"][];
    };
    ChargerResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Charger"][];
    };
    Evse: {
      identityKey?: string;
      id?: string;
      connectors?: components["schemas"]["Connector"][];
    };
    RawOperation: {
      response?: string;
    };
    RawOperationResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["RawOperation"][];
    };
    /** Filter object to be used for searching */
    ChargerStatusFilter: {
      ids?: number[];
      externalId?: string;
      groupId?: number;
      siteIds?: number[];
    };
    ChargerStatus: {
      id?: number;
      externalId?: string;
      /**
       * * Specifies the charger status types
       * * AVAILABLE
       * * OCCUPIED
       * * FAULTED
       * * UNAVAILABLE
       * * NEW
       * * UNKNOWN
       * * RESERVED
       * * IN_PROVISION
       * * CHARGING
       * * DISCHARGING
       * * PAUSED
       * * PREPARING
       * * FINISHING
       */
      chargerStatus?: string;
      /**
       * * Specifies the temperature scale types
       * * CELSIUS
       * * FAHRENHEIT
       */
      temperatureScale?: string;
      /**
       * * Specifies the error code
       * * OTHER_ERROR
       * * CONNECTOR_LOCK_FAILURE
       * * HIGH_TEMPERATURE
       * * MODE_3_ERROR
       * * NO_ERROR
       * * POWER_METER_FAILURE
       * * POWER_SWITCH_FAILURE
       * * READER_FAILURE
       * * EV_COMMUNICATION_ERROR
       * * GROUND_FAILURE
       * * INTERNAL_ERROR
       * * LOCAL_LIST_CONFLICT
       * * OVER_CURRENT_FAILURE
       * * OVER_VOLTAGE
       * * RESET_FAILURE
       * * UNDER_VOLTAGE
       * * WEAK_SIGNAL
       */
      errorCode?: string;
      /**
       * * Specifies the provision process status
       * * ORDERED
       * * IN_STOCK
       * * READY_FOR_INSTALLATION
       * * INSTALLED
       * * CONNECTED
       * * READY_FOR_PROVISIONING
       * * PROVISIONED
       * * SCHEDULED_FOR_DECOMMISSIONING
       * * DECOMMISSIONED
       * * DENETWORKED
       * * IN_CONSTRUCTION
       * * IN_INSTALLATION
       */
      provisionStatus?: string;
      firmwareVersion?: string;
      versionCpu2?: string;
      currentTemperature?: number;
      installationDate?: number;
      /**
       * * Specifies the firmware update status
       * * INACTIVE
       * * PLANNED
       * * PENDING
       * * DOWNLOADED
       * * DOWNLOAD_FAILED
       * * INSTALLED
       * * INSTALLATION_FAILED
       * * REQUEST_TIMED_OUT
       * * DOWNLOADING
       * * INSTALLING
       * * DOWNLOAD_SCHEDULED
       * * DOWNLOAD_PAUSED
       * * INSTALL_REBOOTING
       * * INSTALL_SCHEDULED
       * * INSTALL_VERIFICATION_FAILED
       * * INVALID_SIGNATURE
       * * SIGNATURE_VERIFIED
       * * PUBLISH_FAILED
       */
      updateStatus?: string;
      provisioningDate?: number;
      decommissionDate?: number;
      /** List of group ids that contains this charger */
      groupIds?: number[];
      siteId?: number;
      evses?: components["schemas"]["Evse"][];
    };
    ChargerStatusResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerStatus"][];
    };
    /** Filter object to be used for searching */
    ChargerProfileFilter: {
      ids?: number[];
      externalId?: string;
      groupId?: number;
    };
    ChargerProfile: {
      id?: number;
      identityKey?: string;
      caption?: string;
      description?: string;
      externalId?: string;
      chargerHostId?: number;
      siteId?: number;
      modelId?: number;
      additionalSerialNumber?: string;
      contactPersonId?: number;
      /**
       * * Specifies the access types
       * * USE_SITE
       * * PUBLIC
       * * PRIVATE
       * * TAXI_ONLY
       */
      accessLevel?: string;
      showIn3rdPartyFilter?: boolean;
      hidden?: boolean;
      excluded?: boolean;
      disabled?: boolean;
      managed?: boolean;
      /**
       * * Specifies authentication mode options
       * * SERVER_AUTHENTICATION
       * * FREE_VEND
       */
      authenticationMode?: string;
      /**
       * * Specifies the authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      authenticationMethods?: string[];
      /**
       * * Specifies the funding source options
       * * BAAQMD
       * * CA_SETTLEMENT
       * * CA_SETTLEMENT_RND
       * * CEC_2014
       * * CEC_2015
       * * CEC_2016
       * * GREEN_MOUNTAIN_POWER
       * * HOST_FUNDED
       * * MBARD
       * * NEDO
       * * NNA_EVA
       * * NNA_JMA
       * * EVGO_FUNDED
       * * SANBAG_2016
       * * SCAQMD
       * * VW_EA
       * * TBD
       */
      fundingSource?: string;
      /**
       * * Specifies the payment methods
       * * FREE
       * * CARD
       * * PARK_AND_CHARGE
       * * SMS
       * * CALL
       * * CONTRACT
       * * PLUG_AND_CHARGE
       */
      paymentMethods?: string[];
      ignoreStatusNotifications?: boolean;
      inMaintenance?: boolean;
      /**
       * * Specifies the charger current status
       * * AVAILABLE
       * * OCCUPIED
       * * FAULTED
       * * UNAVAILABLE
       * * NEW
       * * UNKNOWN
       * * RESERVED
       * * IN_PROVISION
       * * CHARGING
       * * DISCHARGING
       * * PAUSED
       * * PREPARING
       * * FINISHING
       */
      status?: string;
      serialNumber?: string;
      controllerId?: string;
      erpId?: string;
      equipmentId?: string;
      costCenter?: string;
      /**
       * * Specifies the charge speed
       * * SLOW
       * * SEMI_FAST
       * * FAST
       * * ULTRA_FAST
       */
      chargingSpeed?: string;
      usageStartDate?: number;
      lastFirmwareUpdateDate?: number;
      evses?: components["schemas"]["Evse"][];
      infrastructureCompany?: components["schemas"]["Company"];
      utilityCompany?: components["schemas"]["Company"];
      /** List of group ids that contains this charger */
      groupIds?: number[];
    };
    ChargerProfileResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerProfile"][];
    };
    /** Filter object to be used for searching */
    ChargerNetworkFilter: {
      ids?: number[];
      externalId?: string;
      groupId?: number;
    };
    ChargerNetwork: {
      id?: number;
      externalId?: string;
      /**
       * * Specifies the charger communication types
       * * THREE_G
       * * ADSL
       * * WIFI
       * * ZIGBEE
       * * SECOND_G
       * * NONE
       * * FOUR_G
       * * HSPA
       * * LTE
       * * EVDO
       * * HSPA_PLUS
       * * ONE_XRTT
       * * UMTS
       */
      communicationType?: string;
      macAddress?: string;
      modemSerialNumber?: string;
      doesNotCommunicate?: boolean;
      lastReceivedHeartBeat?: number;
      connectionUri?: string;
      ipAddress?: string;
      dynamicIp?: boolean;
      msisdn?: string;
      iccid?: string;
      imsi?: string;
      wirelessConnectionCarrierCompany?: components["schemas"]["Company"];
      /** List of group ids that contains this charger */
      groupIds?: number[];
    };
    ChargerNetworkResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerNetwork"][];
    };
    /** Filter object to be used for searching */
    ChargerMaintenanceFilter: {
      ids?: number[];
      externalId?: string;
      groupId?: number;
    };
    ChargerMaintenance: {
      id?: number;
      externalId?: string;
      /**
       * * Specifies the charger warranty types
       * * ONE_YEAR
       * * TWO_YEAR
       * * THREE_YEAR
       * * EXTENDED
       * * NONE
       */
      warrantyType?: string;
      /**
       * * Specifies the charger warranty status
       * * ACTIVE
       * * EXPIRED
       * * EXTENDED
       */
      warrantyStatus?: string;
      inMaintenance?: boolean;
      inStorage?: boolean;
      warrantyNumber?: string;
      warrantyInvoiceNumber?: string;
      warrantyStartDate?: number;
      warrantyExpirationDate?: number;
      nextMaintenanceDate?: number;
      lastMaintenanceDate?: number;
      connectorsInMaintenance?: number;
      maintenanceCompany?: components["schemas"]["Company"];
      installerCompany?: components["schemas"]["Company"];
      comments?: string;
      markForReplacement?: boolean;
      /**
       * * Specifies amount of hours
       * * UNDEFINED
       * * FORTY_EIGHT_HOURS_U
       * * TWENTY_FOUR_HOURS_U
       * * SEVENTY_TWO_HOURS_U
       * * TWO_HOURS_U
       * * FOUR_HOURS_U
       * * EIGHT_HOURS_U
       * * NINETY_SIX_HOURS_U
       */
      sla?: string;
      whitelistUpdateExpiresOn?: number;
      /**
       * * Specifies the temperature scale types
       * * CELSIUS
       * * FAHRENHEIT
       */
      temperatureScale?: string;
      /** List of group ids that contains this charger */
      groupIds?: number[];
    };
    ChargerMaintenanceResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerMaintenance"][];
    };
    /** Filter object to be used for searching */
    ChargerLocationFilter: {
      ids?: number[];
      externalId?: string;
      groupId?: number;
    };
    ChargerLocation: {
      id?: number;
      externalId?: string;
      name?: string;
      floor?: string;
      /**
       * * Specifies the charger location types
       * * HOME
       * * HOTEL
       * * PARKING_LOT
       * * MALL
       * * HIGHWAY
       * * GAS_STATION
       * * PUBLIC_PARKING
       * * COMMERCIAL
       * * DSO
       * * GOVERNMENT
       * * WORK
       */
      chargerLocationType?: string;
      /**
       * * Specifies the door status options
       * * UNKNOWN
       * * OPEN
       * * CLOSED
       */
      accessDoorStatus?: string;
      imagesUrls?: string[];
      restaurantsNearby?: boolean;
      latitude?: number;
      longitude?: number;
      vehicleDimensions?: components["schemas"]["VehicleDimensions"];
      openingTimes?: components["schemas"]["ChargerTimeRange"][];
      address?: components["schemas"]["Address"];
      numberOfPaintedParkingLots?: number;
      poiDetails?: string;
      accessData?: string;
      notesForDriver?: string;
      /** List of group ids that contains this charger */
      groupIds?: number[];
    };
    ChargerLocationResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerLocation"][];
    };
    ChargerTimeRange: {
      dayOfWeek?: string;
      startHour?: number;
      startMinute?: number;
      endHour?: number;
      endMinute?: number;
    };
    VehicleDimensions: {
      maxVehicleHeight?: number;
      maxVehicleWidth?: number;
      maxVehicleLength?: number;
    };
    /** Filter object to be used for searching */
    ChargerElectricalFilter: {
      ids?: number[];
      externalId?: string;
      groupId?: number;
    };
    ChargerElectrical: {
      id?: number;
      externalId?: string;
      energySupplierCompany?: components["schemas"]["Company"];
      inputPower?: number;
      maxCurrent?: number;
      meterSigningSupported?: boolean;
      validateMeterSignature?: boolean;
      gridConnectionDescription?: string;
      serverSideLocalLoadBalancingEnabled?: boolean;
      maxBalancePowerKw?: number;
      smartChargingEnabled?: boolean;
      nextElectricalTestDate?: number;
      lastElectricalTestDate?: number;
      utilityMeterType?: string;
      assetId?: string;
      /** List of group ids that contains this charger */
      groupIds?: number[];
    };
    ChargerElectricalResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerElectrical"][];
    };
    /** Charger model connector object */
    ChargerModelConnectorCreate: {
      connectorNumber: number;
      evseNumber: number;
      name: string;
      maxPowerKw: number;
      numberOfPhases: number;
      ratedVoltage: number;
      /**
       * * Specifies connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType: string;
      /**
       * * Specifies charging mode
       * * LEVEL1
       * * LEVEL2
       * * LEVEL3
       * * MODE1
       * * MODE2
       * * MODE3
       * * MODE4
       */
      chargingMode: string;
      /**
       * * Specifies voltage type
       * * AC
       * * DC
       */
      voltageType: string;
      externalId?: string;
      /**
       * NOT_SPECIFIED,
       * LEFT,
       * RIGHT,
       * TOP,
       * BOTTOM,
       * CENTER,
       * OTHER
       */
      placement?: string;
      smartChargingEnabled?: boolean;
      hasBuiltInCable?: boolean;
      chargingInstructions?: string;
      normalCurrentRating?: number;
      maxCurrent?: number;
      ratedFrequency?: number;
      cableLength?: number;
      v2gEnabled?: boolean;
    };
    /** Charger model object */
    ChargerModelCreate: {
      name: string;
      ratedVoltage: number;
      sku: string;
      genericName: string;
      maxPowerKw: number;
      /**
       * * Specifies temperature scale
       * * CELSIUS
       * * FAHRENHEIT
       */
      temperatureScale: "CELSIUS, FAHRENHEIT";
      manufacturerId: number;
      /**
       * * Specifies mounting type
       * * WALL
       * * POLE
       * * BOTH
       * * STAND_ALONE
       */
      mountingType: string;
      /**
       * * Specifies authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      authenticationMethods?: string[];
      /**
       * * Specifies Payment methods
       * * FREE
       * * CARD
       * * PARK_AND_CHARGE
       * * SMS
       * * CALL
       * * CONTRACT
       * * PLUG_AND_CHARGE
       */
      paymentMethods?: string[];
      externalId?: string;
      connectorCreate: components["schemas"]["ChargerModelConnectorCreate"];
      protocolCreate: components["schemas"]["ChargerModelProtocolCreate"];
    };
    /** Charger model protocol object */
    ChargerModelProtocolCreate: {
      /**
       * * Specifies the protocol type
       * * OCPP1_2
       * * OCPP1_5S
       * * NOT_USED_1
       * * SEMA_CONNECT
       * * NOT_USED_3
       * * BCP1_5_1
       * * OCPP1_5J
       * * OCPP1_5PlusS
       * * OCPP1_5PlusJ
       * * OCPP1_6S
       * * OCPP1_6J
       * * OCPP2_0_1J
       * * NOT_USED_4
       * * OCHP_DIRECT
       * * HUBJECT
       * * IAFC
       */
      protocolType: string;
      /**
       * * Specifies the connector type
       * * EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4
       * * ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115
       * * ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115
       * * MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123
       * * CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT
       * * NON_MANAGED
       * * EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123
       * * OCPP_12_DEFAULT
       * * OCPP_15_DEFAULT
       * * MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912
       * * BCP_151_DEFAULT
       * * SEMA_CONNECT_API
       * * DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT
       * * LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT
       * * OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT
       * * EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * OCPP_15_JSON_DEFAULT
       * * OCPP_15_SOAP_SMART_CHARGING_DEFAULT
       * * OCPP_15_JSON_SMART_CHARGING_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT
       * * OCPP_16_SOAP_DEFAULT
       * * OCPP_16_JSON_DEFAULT
       * * ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT
       * * OCPP_15_SOAP_METER_SIGN_DEFAULT
       * * OCPP_12_DEFAULT_REVERSE_CARD_NUMBER
       * * CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT
       * * NISSAN_OCPP15_SOAP_DEFAULT
       * * OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET
       * * OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS
       * * EFACEC_OCPP_15_SOAP_CUSTOMIZED
       * * OCPP_201_JSON_DEFAULT
       * * OCPI
       * * ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT
       * * EFACEC_OCPP_16_JSON_CUSTOMIZED
       * * ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT
       * * OCHP_DIRECT
       * * HUBJECT
       * * IAFC
       */
      softwareConnectorType: string;
      firmwareVersion?: string;
    };
    ChargerModel: {
      id?: number;
      name?: string;
      /**
       * * A group of the below types
       * * LCC
       * * STATION
       */
      type?: string;
      externalId?: string;
      ratedVoltage?: number;
      /**
       * * A group of the below authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      displayType?: string;
      minTemperature?: number;
      maxTemperature?: number;
      ratedFrequency?: number;
      instructionalVideoUrl?: string;
      sku?: string;
      genericName?: string;
      maxCurrent?: number;
      maxPowerKw?: number;
      maxChargeTime?: number;
      useHeartbeatToDetermineOffline?: boolean;
      smartChargingEnabled?: boolean;
      localLoadBalancingSupported?: boolean;
      reservable?: boolean;
      reserveAllEvseConnectors?: boolean;
      autoChargeEnabled?: boolean;
      changeStatusToAvailableOnStopTx?: boolean;
      smsResetSupported?: boolean;
      supportsDischarge?: boolean;
      heaterInstalled?: boolean;
      /**
       * * A group of the temperature scale options
       * * CELSIUS
       * * FAHRENHEIT
       */
      temperatureScale?: string;
      managesLocalWhitelist?: boolean;
      ocpp16Iso15118PncSupported?: boolean;
      ocpp16ImprovedSecuritySupported?: boolean;
      instructionsVideoUrl?: string;
      /**
       * * A group of the Reader types options
       * * RFID
       * * MAGNETIC_READER
       * * RFID_AND_MAGNETIC_READER
       * * NFC
       */
      readerTypes?: string[];
      connectors?: components["schemas"]["ChargerModelConnector"][];
      protocols?: components["schemas"]["ChargerModelProtocol"][];
      manufacturerCompany?: components["schemas"]["Company"];
      maxCurrentSpec?: string;
      /**
       * * A group of the mounting type options
       * * WALL
       * * POLE
       * * BOTH
       * * STAND_ALONE
       */
      mountingType?: string;
      /**
       * * A group of the charging schedule rate unit options
       * * A
       * * W
       */
      chargingScheduleRateUnit?: string;
      /** List of pdf file names */
      instructionalPDFs?: string[];
      rebootTime?: number;
      /**
       * * A group of the below authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      authenticationMethods?: string[];
      /**
       * * A group of the below Payment methods
       * * FREE
       * * CARD
       * * PARK_AND_CHARGE
       * * SMS
       * * CALL
       * * CONTRACT
       * * PLUG_AND_CHARGE
       */
      paymentMethods?: string[];
    };
    ChargerModelConnector: {
      id?: number;
      name?: string;
      externalId?: string;
      ratedVoltage?: number;
      /**
       * * Specifies the placement options
       * * NOT_SPECIFIED
       * * LEFT
       * * RIGHT
       * * TOP
       * * BOTTOM
       * * CENTER
       * * OTHER
       */
      placement?: string;
      connectorNumber?: number;
      /**
       * * A group of connector type options
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
      /**
       * * A group of charging mode options
       * * LEVEL1
       * * LEVEL2
       * * LEVEL3
       * * MODE1
       * * MODE2
       * * MODE3
       * * MODE4
       */
      chargingMode?: string;
      smartCharging?: boolean;
      hasBuiltInCable?: boolean;
      chargingInstructions?: string;
      /**
       * * A group of voltage type options
       * * AC
       * * DC
       */
      voltageType?: string;
      normalCurrentRating?: number;
      numberOfPhases?: number;
      maxCurrent?: number;
      maxPower?: number;
      ratedFrequency?: number;
      evseNumber?: number;
      cableLength?: number;
    };
    ChargerModelProtocol: {
      id?: number;
      /**
       * * Specifies the charger protocol type
       * * OCPP1_2
       * * OCPP1_5S
       * * NOT_USED_1
       * * SEMA_CONNECT
       * * NOT_USED_3
       * * BCP1_5_1
       * * OCPP1_5J
       * * OCPP1_5PlusS
       * * OCPP1_5PlusJ
       * * OCPP1_6S
       * * OCPP1_6J
       * * OCPP2_0_1J
       * * NOT_USED_4
       * * XXXOCHP_DIRECTXX
       * * HUBJECT
       */
      protocolType?: string;
      /**
       * * Specifies the software connector type
       * * EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4
       * * ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115
       * * ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115
       * * MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123
       * * CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT
       * * NON_MANAGED
       * * EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123
       * * OCPP_12_DEFAULT
       * * OCPP_15_DEFAULT
       * * MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912
       * * BCP_151_DEFAULT
       * * SEMA_CONNECT_API
       * * DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT
       * * LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT
       * * OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT
       * * EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * OCPP_15_JSON_DEFAULT
       * * OCPP_15_SOAP_SMART_CHARGING_DEFAULT
       * * OCPP_15_JSON_SMART_CHARGING_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT
       * * OCPP_16_SOAP_DEFAULT
       * * OCPP_16_JSON_DEFAULT
       * * ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT
       * * OCPP_15_SOAP_METER_SIGN_DEFAULT
       * * OCPP_12_DEFAULT_REVERSE_CARD_NUMBER
       * * CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT
       * * NISSAN_OCPP15_SOAP_DEFAULT
       * * OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET
       * * OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS
       * * EFACEC_OCPP_15_SOAP_CUSTOMIZED
       * * OCPP_201_JSON_DEFAULT
       * * OCPI
       * * ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT
       * * EFACEC_OCPP_16_JSON_CUSTOMIZED
       * * ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT
       * * OCHP_DIRECT
       * * HUBJECT
       * * AUTO_DEALERSHIP
       */
      softwareConnectorType?: string;
      firmwareVersion?: string;
    };
    ChargerModelResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerModel"][];
    };
    ChargerModelProtocolResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerModelProtocol"][];
    };
    ChargerModelConnectorResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerModelConnector"][];
    };
    /** Filter object to be used for searching */
    ChargerModelFilter: {
      ids?: number[];
      externalId?: string;
    };
    /** Charger host create object */
    ChargerHostCreate: {
      name: string;
      externalId?: string;
      /**
       * * Specifies the charger host type
       * * STANDARD
       * * FLEET
       * * MDU
       * * WORKPLACE
       */
      type: "STANDARD" | "FLEET" | "MDU" | "WORKPLACE";
      companyId: number;
      contactPersonId: number;
      defaultHostServicePlanCode: string;
      defaultBillingTariffCode: string;
      address: components["schemas"]["AddressCreate"];
      anniversaryDay: number;
      paymentTermsInDays: number;
      chargerGroupParentId: number;
      customerDetailGroupParentId: number;
    };
    ChargerHostProfile: {
      id?: number;
      accountNumber?: number;
      name?: string;
      /**
       * Specifies account status
       * * REGISTERED
       * * ACTIVE
       * * SUSPEND
       * * CLOSED_DELINQUENCY
       * * SUSPENDED_DELINQUENCY
       * * CLOSED
       * * CLOSED_CUSTOMER_REQUEST
       */
      accountStatus?: string;
      externalId?: string;
      registrationNumber?: string;
      /**
       * Specifies on boarding status
       * * ACTIVE
       * * NEW
       * * IN_PROCESS
       */
      onBoardingStatus?: string;
      /**
       * Specifies the type
       * * STANDARD
       * * FLEET
       * * MDU
       * * WORKPLACE
       */
      type?: string;
      accountClosureDate?: number;
      payingCustomerAccountNumber?: number;
      chargerGroupId?: number;
      customerDetailsGroupId?: number;
      departmentGroupId?: number;
      allowedEmailDomains?: string;
      chargerIssueDefaultAssigneeId?: number;
      cardIssueDefaultAssigneeId?: number;
      customerIssueDefaultAssigneeId?: number;
      invoiceProcessingInstructions?: string;
      address?: components["schemas"]["Address"];
      company?: components["schemas"]["Company"];
      contactPerson?: components["schemas"]["Person"];
    };
    ChargerHostProfileResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerHostProfile"][];
    };
    Person: {
      id?: number;
      firstName?: string;
      lastName?: string;
      email?: string;
    };
    /** Filter object to be used for searching */
    StatementFilter: {
      fromDate?: string;
      toDate?: string;
    };
    Statement: {
      id?: number;
      invoiceNumber?: number;
      invoiceId?: number;
      startDate?: number;
      endDate?: number;
      /**
       * Specifies the currency
       * * USD
       * * EUR
       * * GBP
       * * NIS
       * * HUF
       * * CZK
       * * RON
       * * HRK
       * * SEK
       * * NOK
       * * SKK
       * * CLP
       * * COP
       * * JPY
       * * ISK
       * * INR
       * * NZD
       * * DKK
       * * CAD
       * * AED
       * * CHF
       * * PLN
       * * RUB
       */
      currency?: string;
      amount?: number;
    };
    StatementResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Statement"][];
    };
    /** Filter object to be used for searching */
    InvoiceFilter: {
      fromDate?: string;
      toDate?: string;
    };
    Invoice: {
      id?: number;
      number?: number;
      /**
       * * Specifies the type of the invoice
       * * BILLING_PERIOD
       * * FUNDS_RECEIVED
       * * FUNDS_REFUNDED
       */
      type?: string;
      successfulPayment?: boolean;
      dueDate?: number;
      billingDate?: number;
      paidDate?: number;
      billingCardType?: string;
      cardNumber?: string;
      confirmationNumber?: string;
      paymentGatewayBillingErrorCode?: string;
      currency?: string;
      tax?: number;
      amount?: number;
      totalkWh?: number;
      createdOn?: number;
      billingExternalInvoiceId?: number;
    };
    InvoiceResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Invoice"][];
    };
    CurrentStatement: {
      /**
       * Specifies the currency
       * * USD
       * * EUR
       * * GBP
       * * NIS
       * * HUF
       * * CZK
       * * RON
       * * HRK
       * * SEK
       * * NOK
       * * SKK
       * * CLP
       * * COP
       * * JPY
       * * ISK
       * * INR
       * * NZD
       * * DKK
       * * CAD
       * * AED
       * * CHF
       * * PLN
       * * RUB
       */
      currency?: string;
    };
    ChargerHostTransactionFilter: {
      invoicesNumber?: number[];
      fromDate?: string;
      toDate?: string;
      /**
       * * Specifies the category of the product
       * * ADJUSTMENTS
       * * CHARGING_ACTIVITY
       * * MEMBERSHIP_ACTIVITY
       * * PAYMENTS
       */
      categoryType?:
        | "ADJUSTMENTS"
        | "CHARGING_ACTIVITY"
        | "MEMBERSHIP_ACTIVITY"
        | "PAYMENTS";
      customerPlanCode?: string;
      chargerHostPlanCode?: string;
      chargerId?: number;
    };
    BillingTransactionInvoice: {
      id?: number;
      number?: number;
      /**
       * * Specifies the type of the invoice
       * * BILLING_PERIOD
       * * FUNDS_RECEIVED
       * * FUNDS_REFUNDED
       */
      type?: string;
      successfulPayment?: boolean;
      dueDate?: number;
      billingDate?: number;
      paidDate?: number;
      billingCardType?: string;
      cardNumber?: string;
      confirmationNumber?: string;
      paymentGatewayBillingErrorCode?: string;
      createdOn?: number;
      billingExternalInvoiceId?: number;
    };
    BillingTransactionResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Transaction"][];
    };
    ContractPlan: {
      id?: number;
      code?: string;
      name?: string;
      displayCode?: string;
    };
    Transaction: {
      id?: number;
      comment?: string;
      createdOn?: number;
      billingStartDate?: number;
      billingEndDate?: number;
      amount?: number;
      billingErrorCode?: string;
      isDebit?: boolean;
      balance?: number;
      affectedBalance?: boolean;
      tax?: number;
      refundBillingTransactionId?: number;
      retractTransactionId?: number;
      /**
       * Specifies the category of the product
       * * ADJUSTMENTS
       * * CHARGING_ACTIVITY
       * * MEMBERSHIP_ACTIVITY
       * * PAYMENTS
       */
      productCategory?: string;
      currency?: string;
      amountBeforeDiscount?: number;
      totalkWh?: number;
      evChargerTransactionId?: number;
      chargerHostId?: number;
      utilityCompanyId?: number;
      propertyId?: number;
      tariffDate?: number;
      chargerId?: number;
      transactionDuration?: string;
      reservationId?: number;
      statementId?: number;
      memberAccountNumber?: number;
      payingAccountNumber?: number;
      externalPaymentDetailsId?: number;
      externalRegistrationId?: string;
      billingRecordType?: string;
      contractPlan?: components["schemas"]["ContractPlan"];
      invoice?: components["schemas"]["BillingTransactionInvoice"];
    };
    /** Filter object to be used for searching */
    ChargerHostFilter: {
      externalId?: string;
      accountNumber?: number;
      /**
       * Specifies account status
       * * REGISTERED
       * * ACTIVE
       * * SUSPENDED
       * * CLOSED_DELINQUENCY
       * * SUSPENDED_DELINQUENCY
       * * CLOSED
       * * CLOSED_CUSTOMER_REQUEST
       */
      accountStatuses?:
        | "REGISTERED"
        | "ACTIVE"
        | "SUSPENDED"
        | "CLOSED_DELINQUENCY"
        | "SUSPENDED_DELINQUENCY"
        | "CLOSED"
        | "CLOSED_CUSTOMER_REQUEST";
      /**
       * Specifies on boarding status
       * * ACTIVE
       * * NEW
       * * IN_PROCESS
       */
      onBoardingStatuses?: "ACTIVE" | "NEW" | "IN_PROCESS";
      paidManually?: boolean;
    };
    /** Charger group create object */
    ChargerGroupCreate: {
      caption: string;
      description?: string;
      externalId?: string;
      /** If dynamic content query is passed the group will be defined as dynamic, otherwise static */
      dynamicContentQuery?: string;
    };
    ChargerGroup: {
      id?: number;
      caption?: string;
      description?: string;
      isFolder?: boolean;
      /**
       * Specifies category
       * * CHARGER
       */
      category?: string;
      /**
       * Specifies card authorization schema
       * * DEFAULT
       * * APPROVE_ALL
       * * SPECIFIC_PROVIDERS
       */
      cardAuthorizationSchema?: string;
      relatedToChargerHost?: boolean;
      dynamicContentQuery?: string;
      externalId?: string;
      enabledForAccessibilityVisibility?: boolean;
      externalCardAuthenticationProviderNames?: string[];
      plans?: components["schemas"]["ChargerGroupPlan"][];
      subGroups?: components["schemas"]["GroupDetails"][];
    };
    ChargerGroupPlan: {
      id?: number;
      code?: string;
    };
    ChargerGroupResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerGroup"][];
    };
    GroupDetails: {
      id?: number;
      caption?: string;
      description?: string;
      isFolder?: boolean;
      /**
       * Specifies category
       * * CHARGER
       */
      category?: string;
      /**
       * Specifies card authorization schema
       * * DEFAULT
       * * APPROVE_ALL
       * * SPECIFIC_PROVIDERS
       */
      cardAuthorizationSchema?: string;
      relatedToChargerHost?: boolean;
      dynamicContentQuery?: string;
      externalId?: string;
      enabledForAccessibilityVisibility?: boolean;
      ancestorGroupId?: number;
      externalCardAuthenticationProviderNames?: string[];
      plans?: components["schemas"]["ChargerGroupPlan"][];
    };
    /** Charger group folder create object */
    FolderCreate: {
      caption: string;
      description?: string;
      externalId?: string;
    };
    /** Reassign card object */
    ReassignCard: {
      accountNumber: number;
    };
    Card: {
      id?: number;
      cardNumber?: string;
      visibleNumber?: string;
      /**
       * Specifies form factor
       * * WALLET_SIZE
       * * KEY_RING
       * * NONE
       */
      formFactor?: string;
      /**
       * Specifies card type
       * * RFID
       * * VIRTUAL
       * * VEHICLE_ID
       * * EMAID
       * * PIN_CODE
       */
      type?: string;
      /**
       * Specifies card status
       * * ORDERED
       * * ACTIVE
       * * NOT_ASSIGNED
       * * SUSPENDED
       * * CANCELLED
       * * BLOCKED
       * * EXPIRED
       * * BLACKLISTED
       * * SENT
       * * LOST
       * * STOLEN
       * * INACTIVE
       * * DESTROYED
       */
      status?: string;
      brandId?: number;
      chargerHostId?: number;
      modifiedOn?: number;
      customerDetailId?: number;
      expirationDate?: number;
      batchImportId?: number;
    };
    CardResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Card"][];
    };
    /** Activate card object */
    ActivateCard: {
      comments?: string;
    };
    /** Filter object to be used for searching */
    CardFilter: {
      ids?: number[];
      /**
       * Specifies card type
       * * RFID
       * * VIRTUAL
       * * VEHICLE_ID
       * * EMAID
       * * PIN_CODE
       */
      types?: "RFID" | "VIRTUAL" | "VEHICLE_ID" | "EMAID" | "PIN_CODE";
      /**
       * Specifies card status
       * * ORDERED
       * * ACTIVE
       * * SUSPENDED
       * * NOT_ASSIGNED
       * * CANCELLED
       * * BLOCKED
       * * EXPIRED
       * * BLACKLISTED
       * * SENT
       * * LOST
       * * STOLEN
       * * INACTIVE
       * * DESTROYED
       */
      statuses?:
        | "ORDERED"
        | "ACTIVE"
        | "SUSPENDED"
        | "NOT_ASSIGNED"
        | "CANCELLED"
        | "BLOCKED"
        | "EXPIRED"
        | "BLACKLISTED"
        | "SENT"
        | "LOST"
        | "STOLEN"
        | "INACTIVE"
        | "DESTROYED";
      /**
       * Specifies form factor
       * * WALLET_SIZE
       * * KEY_RING
       * * NONE
       */
      formFactors?: "WALLET_SIZE" | "KEY_RING" | "NONE";
      chargerHostId?: number;
      accountNumber?: number;
    };
    BatchCard: {
      cardNumber: string;
      visibleNumber: string;
    };
    /** Batch card import object */
    BatchCardImport: {
      batchImportName: string;
      brandId: number;
      /**
       * Specifies form factor
       * * WALLET_SIZE
       * * KEY_RING
       * * NONE
       */
      formFactor: "WALLET_SIZE" | "KEY_RING" | "NONE";
      /**
       * Specifies card type
       * * RFID
       * * VEHICLE_ID
       * * EMAID
       * * PIN_CODE
       */
      type: "RFID" | "VEHICLE_ID" | "EMAID" | "PIN_CODE";
      cards: components["schemas"]["BatchCard"][];
      expirationDate?: string;
      chargerHostId?: number;
    };
    /** Filter object to be used for searching */
    BillingTransactionFilter: {
      invoicesNumber?: number[];
      fromDate?: number;
      toDate?: number;
      categoryType?:
        | "ADJUSTMENTS"
        | "CHARGING_ACTIVITY"
        | "MEMBERSHIP_ACTIVITY"
        | "PAYMENTS";
      payerInfo?: string;
      /** For customer related transactions filter by CUSTOMER and ONE_TIME_PAYMENT_DRIVER */
      billingRecordTypes?:
        | "SYSTEM"
        | "CUSTOMER"
        | "SERVICE_PROVIDER"
        | "CHARGER_HOST"
        | "COMPANY"
        | "EXTERNAL_CUSTOMER"
        | "ONE_TIME_PAYMENT_DRIVER"
        | "TEST_DRIVER";
    };
    LoginRequest: {
      userName: string;
      password: string;
    };
    LoginResponse: {
      ticket?: string;
    };
    OperatorLoginResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["LoginResponse"][];
    };
    LoginAsCustomerRequest: {
      accountNumber: number;
    };
    CustomerLoginResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["LoginResponse"][];
    };
    /** Get reservation terms now object */
    ReservationTermsNow: {
      connectorId: number;
    };
    TermsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Terms"][];
    };
    /** Get reservation terms by date object */
    ReservationTermsByDate: {
      startDate: number;
      endDate: number;
      connectorId: number;
    };
    ReservationCreateNow: {
      connectorId: number;
      termsId: number;
    };
    /** Get chargers for reservation object */
    ChargerFind: {
      chargerHostId?: number;
      propertyId?: number;
      siteId?: number;
      chargingSpeeds: "SLOW" | "SEMI_FAST" | "FAST" | "ULTRA_FAST";
      startDate: string;
      endDate: string;
    };
    ChargerReservationResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["FindChargerReservation"][];
    };
    FindChargerReservation: {
      id?: number;
      caption?: string;
      connectorId?: number;
      chargingSpeed?: "SLOW" | "SEMI_FAST" | "FAST" | "ULTRA_FAST";
      connectorType?: string;
      propertyId?: number;
      siteId?: number;
    };
    ReservationCreateByDate: {
      connectorId: number;
      termId?: number;
      startDate: string;
      endDate: string;
    };
    /** Create card payment method */
    CreatePaymentCard: {
      customerId?: string;
      /**
       * * Specifies the payment method type
       * * AMERICAN_EXPRESS
       * * BANKCARD
       * * DINERS
       * * DISCOVER
       * * ISRACARD
       * * JCB
       * * LASER
       * * MAESTRO
       * * MASTERCARD
       * * MASTERPASS
       * * VISA
       */
      paymentMethodType: string;
      token: string;
      nameOnCard: string;
      cardNumber: string;
      expiryMonth: number;
      expiryYear: number;
    };
    PaymentCard: {
      id?: number;
      primary?: boolean;
      createdOn?: number;
      type?: string;
      name?: string;
      cardNumber?: string;
      expiryMonth?: number;
      expiryYear?: number;
      expired?: boolean;
    };
    PaymentCardResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["PaymentCard"][];
    };
    /** Create bank account payment method */
    CreateBankAccount: {
      /**
       * * Specifies the payment method type
       * * SEPA_DIRECT_DEBIT
       */
      paymentMethodType: string;
      token: string;
      accountName: string;
      iban?: string;
    };
    BankAccount: {
      id?: number;
      primary?: boolean;
      createdOn?: number;
      accountName?: string;
      iban?: string;
      bic?: string;
    };
    BankAccountResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["BankAccount"][];
    };
    /** Add contract object */
    ContractCreate: {
      startDate?: string;
      endDate?: string;
      lastDateForEtf?: string;
      status:
        | "ACTIVE"
        | "SUSPENDED"
        | "CLOSED_BY_CUSTOMER"
        | "CLOSED"
        | "CLOSED_AUTOSWAP";
      couponCode?: string;
      privateEntityPolicy?: "PROPERTY" | "SITE" | "CHARGER";
      privateEntityId?: number;
      planCode: string;
      vin?: string;
      percentageDiscount?: number;
      monthlyDiscountAmount?: number;
      cardsToOrder?: number;
      oemCardNumber?: string;
      waivePlanSetupFee?: boolean;
      useNewPlanEtfDate?: boolean;
      externalId?: string;
    };
    Contract: {
      contractId?: string;
      startDate?: number;
      endDate?: number;
      lastDateForEtf?: number;
      etf?: number;
      /**
       * Specifies the contract initialization status
       * * ACTIVE
       * * SUSPENDED
       * * CLOSED_BY_CUSTOMER
       * * CLOSED
       * * CLOSED_AUTOSWAP
       */
      status?:
        | "ACTIVE"
        | "SUSPENDED"
        | "CLOSED_BY_CUSTOMER"
        | "CLOSED"
        | "CLOSED_AUTOSWAP";
      couponCode?: string;
      privateEntityPolicy?: "PROPERTY" | "SITE" | "CHARGER";
      privateEntityId?: number;
      vin?: string;
      percentageDiscount?: number;
      monthlyDiscountAmount?: number;
      closureDate?: number;
      waivePlanSetupFee?: boolean;
      useNewPlanEtfDate?: boolean;
      externalId?: string;
      amountUsed?: number;
      creditBalance?: number;
      plan?: components["schemas"]["ContractPlan"];
    };
    ExtendedContractResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Contract"][];
    };
    /** Filter object to be used for searching */
    ContractFilter: {
      externalId?: string;
    };
    /** Add ad hoc contract object */
    AdHocContractCreate: {
      amount: number;
      externalId?: string;
    };
    Credit: {
      contractId?: string;
      status?: string;
      creditBalance?: number;
      currency?: string;
      amountUsed?: number;
      externalId?: string;
    };
    CreditResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Credit"][];
    };
    ChargingAbilityReservationRequest: {
      connectorId?: number;
    };
    ChargingAbilityChargeRequest: {
      connectorId: number;
    };
    AutoCharge: {
      /**
       * * Specifies the enrollment status
       * * SUCCESS
       * * FAILURE
       * * PENDING
       * * REJECTED
       */
      status?: string;
      endTime?: number;
    };
    AutoChargeResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["AutoCharge"][];
    };
    SuspendCardResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["SuspendCards"][];
    };
    SuspendCards: {
      accountNumber?: number;
      cardIds?: number[];
    };
    /** Batch card assign object */
    BatchCardAssign: {
      cardIds: number[];
    };
    /** Add billing transaction refund object */
    BillingTransactionRefundCreate: {
      amount: number;
      billingProductType: "REFUND_PAID";
      invoiceNumber: number;
    };
    /** Add billing transaction penalty object */
    BillingTransactionPenaltyCreate: {
      amount: number;
      taxAmount: number;
      evTransactionId?: number;
      billingProductType:
        | "EARLY_TERMINATION_FEE"
        | "DISCONNECTION_FEE"
        | "OUTSTANDING_ACCOUNT_ACTIVITY"
        | "LATE_PAYMENT_FEE"
        | "PENALTY";
      comment?: string;
    };
    /** Add billing transaction external payment object */
    BillingTransactionExternalPaymentCreate: {
      amount: number;
      billingProductType:
        | "ACH_PAYMENT_TO_CUSTOMER"
        | "CHECK_PAYMENT_TO_CUSTOMER"
        | "CARD_PAYMENT_TO_CUSTOMER";
      comment?: string;
    };
    /** Add billing transaction credit object */
    BillingTransactionCreditCreate: {
      amount: number;
      taxAmount?: number;
      billingProductType: "CREDIT_ON_ACCOUNT" | "DEBIT_ON_ACCOUNT";
      comment?: string;
    };
    /** Add billing transaction contract object */
    BillingTransactionContractCreate: {
      contractId?: string;
      billingProductType:
        | "RFID_CARD_PURCHASE"
        | "SETUP_FEE"
        | "SUBSCRIPTION_FEE"
        | "MONTHLY_USAGE_CREDIT";
      amount: number;
      comment?: string;
    };
    UserNotificationPreferencePatch: {
      cellApp?: boolean;
      email?: boolean;
      sms?: boolean;
      eventType: string;
    };
    /** Object that defines user notification preferences to update */
    UserNotificationPreferencesPatch: {
      userNotificationPreferencePatch?: components["schemas"]["UserNotificationPreferencePatch"][];
    };
    UserNotificationPreferenceResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["UserNotificationPreference"][];
    };
    AddressUpdate: {
      address1?: string;
      address2?: string;
      city?: string;
      stateCode?: string;
      countryCode?: string;
      zoneId?: string;
      zipCode?: string;
      municipality?: string;
      region?: string;
    };
    /** Site update object */
    SiteUpdate: {
      name?: string;
      displayName?: string;
      legacyId?: string;
      externalId?: string;
      propertyId?: number;
      type?:
        | "STANDARD"
        | "FREEDOM_STATIONS"
        | "STANDALONE_STATIONS"
        | "READY_FOR_EV"
        | "READY_FOR_EV_MULTI_FAMILY"
        | "EQUIPMENT"
        | "TESTING";
      provisioningStatus?:
        | "PLANNED"
        | "READY_FOR_PROVISIONING"
        | "PROVISIONED"
        | "SCHEDULED_FOR_DECOMMISSIONING"
        | "DECOMMISSIONED"
        | "DENETWORKED"
        | "CLOSED";
      utilityCompanyId?: number;
      utilityTariffId?: number;
      meterNumber?: string;
      ratedVoltage?: number;
      maxCurrent?: number;
      energyStorage?: boolean;
      renewableEnergyGeneration?: boolean;
      lockCombination?: string;
      inMaintenance?: boolean;
      posId?: number;
      comments?: string;
      directions?: string;
      latitude?: number;
      longitude?: number;
      hasGate?: boolean;
      locationSetting?: "INDOOR" | "OUTDOOR";
      locationType?:
        | "HOME"
        | "HOTEL"
        | "PARKING_LOT"
        | "MALL"
        | "HIGHWAY"
        | "GAS_STATION"
        | "PUBLIC_PARKING"
        | "COMMERCIAL"
        | "DSO"
        | "GOVERNMENT"
        | "WORK";
      chargerAccessLevel?: "PUBLIC" | "PRIVATE" | "TAXI_ONLY";
      energyPolicyId?: number;
      address?: components["schemas"]["AddressUpdate"];
    };
    /** Site resource create object */
    SiteResourcePatch: {
      fileName: string;
    };
    /** External site update object */
    ExternalSiteUpdate: {
      legacyId?: string;
      displayName?: string;
      locationSetting?: "INDOOR" | "OUTDOOR";
      locationType?:
        | "HOME"
        | "HOTEL"
        | "PARKING_LOT"
        | "MALL"
        | "HIGHWAY"
        | "GAS_STATION"
        | "PUBLIC_PARKING"
        | "COMMERCIAL"
        | "DSO"
        | "GOVERNMENT"
        | "WORK";
      hasGate?: boolean;
    };
    /** Property update object */
    PropertyUpdate: {
      name: string;
      legacyId?: string;
      status?:
        | "PLANNED"
        | "READY_FOR_PROVISIONING"
        | "PROVISIONED"
        | "SCHEDULED_FOR_DECOMMISSIONING"
        | "DECOMMISSIONED"
        | "DENETWORKED"
        | "CONTRACT_TERMINATED"
        | "CONTRACT_EXPIRED";
      description?: string;
      externalId?: string;
      latitude?: number;
      longitude?: number;
      showExternalCoupons?: boolean;
      contactPersonId?: number;
      electricalTopologyId?: number;
      provisionedDate?: string;
      energyPolicyId?: number;
      locationType?:
        | "DEALERSHIP"
        | "MULTI_FAMILY"
        | "WORKPLACE"
        | "RETAIL"
        | "GARAGE"
        | "HIGHWAY"
        | "BIG_TOWN"
        | "SMALL_TOWN"
        | "COMMUTER_TRANSIT"
        | "RURAL"
        | "NEIGHBORHOOD";
      address?: components["schemas"]["AddressUpdate"];
    };
    /** External property update object */
    ExternalPropertyUpdate: {
      legacyId?: string;
    };
    /** Update operator object */
    OperatorPatch: {
      email?: string;
      firstName?: string;
      lastName?: string;
      mobile?: string;
      role?: string;
      subRoles?: string[];
      companyId?: number;
      chargerGroupId?: number;
      chargerHostId?: number;
    };
    /** Policy update object */
    PolicyUpdate: {
      strategy?: "EVEN_SPREAD" | "FIFO";
      prioritizeByBillingPlan?: boolean;
      prioritizeBySoc?: boolean;
      targetSoc?: number;
      currentAfterSocTarget?: number;
      prioritizeByDriverProfile?: boolean;
      prioritizeByExternalIntegration?: boolean;
      releaseUnusedAllocatedCurrentIfCurrentStableDuring?: number;
      prioritizeByEnergyRequirement?: boolean;
      slowChargeDepartureTimeFromStart?: string;
      fastChargeDepartureTimeFromStart?: string;
      departureTimeAbsolute?: string;
      defaultVehicleEnergyReq?: number;
      defaultMinChargeCurrent?: number;
      dropChargePriceThreshold?: number;
      dropChargePercentage?: number;
      /** The price at which to stop the power a charger receives. */
      stopChargePriceThreshold?: number;
      utilityDataSource?: "INTERNAL, OPEN_ADR, OSCP";
      mainInputCircuitResourceId?: string;
      /** Energy use limit when peak shaving is applied, in kW */
      peakShavingRate?: number;
      renewableEnergyGeneration?: boolean;
    };
    /** Customer tariff update object */
    CustomerTariffUpdate: {
      name?: string;
      tariffCode?: string;
      externalId?: string;
      description?: string;
      displayDescription?: string;
      externalTariffId?: string;
      fixedPrice?: number;
      minFee?: number;
      transactionFee?: number;
      maxChargeTimeInMinutes?: number;
      maxChargeAmount?: number;
      maxChargeKwh?: number;
      fixedParkingFee?: number;
      hourlyParkingRate?: number;
      overtimePenalty?: number;
      utilityTariffId?: number;
      addedCostToUtilityRate?: number;
      /**
       * Specifies overtime charge behaviour
       * * NO_BEHAVIOUR
       * * STOP_CHARGE
       * * APPLY_PENALTY
       */
      overtimeChargeBehaviour?:
        | "STOP_CHARGE"
        | "APPLY_PENALTY"
        | "NO_BEHAVIOUR";
      firstLevelPeriod?: components["schemas"]["LevelPeriodUpdate"];
      secondLevelPeriod?: components["schemas"]["LevelPeriodUpdate"];
      thirdLevelPeriod?: components["schemas"]["LevelPeriodUpdate"];
    };
    LevelPeriodUpdate: {
      durationInHours?: number;
      kwhRate?: number;
      plugInMinuteRate?: number;
      plugInHourlyRate?: number;
      minuteRate?: number;
      hourlyRate?: number;
    };
    /** Reservation tariff now update object */
    ReserveNowUpdate: {
      cancellationFee?: number;
      sameFeeForNoShow?: boolean;
    };
    /** Customer reservation tariff term update object */
    ReserveNowTermUpdate: {
      length?: number;
      fee?: number;
      noShowFee?: number;
    };
    /** Reservation tariff by date update object */
    ReserveByDateTermsUpdate: {
      allowReservation?: boolean;
      chargePerMinute?: boolean;
      sameFeeForNoShow?: boolean;
      onlyChargeWhenReserved?: boolean;
      fee?: number;
      cancellationFee?: number;
      noShowFee?: number;
    };
    CustomerReservationTariffByDate: {
      id?: number;
      allowReservation?: boolean;
      chargePerMinute?: boolean;
      sameFeeForNoShow?: boolean;
      onlyChargeWhenReserved?: boolean;
      fee?: number;
      cancellationFee?: number;
      noShowFee?: number;
    };
    CustomerReservationTariffByDateResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerReservationTariffByDate"][];
    };
    /** Customer plan update object */
    CustomerPlanProfileUpdate: {
      name?: string;
      description?: string;
      code?: string;
      balanceType?:
        | "PRE_PAID"
        | "POST_PAID"
        | "NON_PAYING"
        | "PAYMENT_IMMEDIATELY"
        | "POST_PAID_IMMEDIATELY";
      costFactor?: number;
      appearanceOrder?: number;
      terminationBehavior?: "TERMINATE" | "EVERGREEN" | "ROLLOVER";
      planDuration?: number;
      customerRolloverPlanCode?: string;
      subscriptionName?: string;
      externalId?: string;
      category?:
        | "SINGLE_TARIFF_FOR_ALL_DRIVERS"
        | "MEMBERSHIP"
        | "ROAMING"
        | "OTP";
      discountRate?: number;
      minCommitmentInMonths?: number;
      etf?: number;
      waiveRolloverPlanSetupFee?: boolean;
      rolloverSwitchDate?: string;
      resetEtfOnRollover?: boolean;
      showOnRegistration?: boolean;
      displayOnly?: boolean;
      showExistingCardInputOnRegistration?: boolean;
      showExistingVehicleInputOnRegistration?: boolean;
      requireVehicleInformation?: boolean;
      licenseNumberLabelKeySuffix?: string;
      showInFilterList?: boolean;
      excludeFromDefaultPlanFilter?: boolean;
      hiddenFromDriver?: boolean;
      includeInQaReport?: boolean;
      disableSmartCharging?: boolean;
      allowDisableSmartCharging?: boolean;
      trackAnalytics?: boolean;
      allowRoaming?: boolean;
      requireVin?: boolean;
      vinOemId?: number;
      showVinInputToDriver?: boolean;
      useVinSalesDateForContractEndDate?: boolean;
      cardBrandId?: number;
      cardExternalOemId?: number;
      requireChargeLocationAssignment?: boolean;
      allowSelectionWithoutPaymentMethod?: boolean;
      financialCode?: string;
      codeForExternalInterfaces?: string;
      energyManagementPriority?: number;
      filterDisplayCode?: string;
      allowReserveNow?: boolean;
      allowReserveByDate?: boolean;
      fixedInitialPaymentAmount?: number;
      excludeFromHostPayment?: boolean;
      requireCardNumber?: boolean;
    };
    /** Plan product update object */
    PlanProductUpdate: {
      /**
       * Specifies product type
       * * RFID_CARD_PURCHASE
       * * SETUP_FEE
       * * SUBSCRIPTION_FEE
       * * MONTHLY_USAGE_CREDIT
       */
      productType: string;
      price?: number;
      freeUnits?: number;
    };
    /** Plan product delete object */
    PlanProductDelete: {
      /**
       * Specifies product type
       * * RFID_CARD_PURCHASE
       * * SETUP_FEE
       * * SUBSCRIPTION_FEE
       * * MONTHLY_USAGE_CREDIT
       */
      productType: string;
    };
    /** Plan registration display update object */
    PlanRegistrationDisplayUpdate: {
      registrationHeaderImageUrl?: string;
      registrationImageHeader1?: string;
      registrationImageHeader2?: string;
      registrationTagLineHeader1?: string;
      registrationTagLineHeader2?: string;
    };
    CustomerPlanRegistrationDisplay: {
      id?: number;
      name?: string;
      code?: string;
      externalId?: string;
      locale?: string;
      registrationHeaderImageUrl?: string;
      registrationImageHeader1?: string;
      registrationImageHeader2?: string;
      registrationTagLineHeader1?: string;
      registrationTagLineHeader2?: string;
    };
    PlanRegistrationDisplayResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerPlanRegistrationDisplay"][];
    };
    /** Plan display update object */
    PlanDisplayUpdate: {
      marketingOptInText?: string;
      termsAndConditionsUrl?: string;
      termsAgreement?: string;
      externalTermsAndConditionsUrl?: string;
      externalTermsOfServiceUrl?: string;
      notificationTemplateName?: string;
      extraConfirmation?: string;
      htmlDescription?: string;
      mobileHtmlDescription?: string;
      summaryHtmlDescription?: string;
      finalHtmlComments?: string;
      displayCode?: string;
    };
    CustomerPlanDisplay: {
      id?: number;
      name?: string;
      code?: string;
      externalId?: string;
      locale?: string;
      displayCode?: string;
      filterDisplayCode?: string;
      logo?: string;
      marketingOptInText?: string;
      termsAndConditionsUrl?: string;
      termsAgreement?: string;
      termsAndConditions?: string;
      externalTermsAndConditionsUrl?: string;
      externalTermsOfServiceUrl?: string;
      notificationTemplatePackageId?: number;
      notificationTemplateName?: string;
      requireExtraConfirmation?: boolean;
      extraConfirmation?: string;
      htmlDescription?: string;
      mobileHtmlDescription?: string;
      summaryHtmlDescription?: string;
      finalHtmlComments?: string;
    };
    PlanDisplayResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerPlanDisplay"][];
    };
    /** Customer plan by country-currency update object */
    CustomerCountryCurrencyPlanUpdate: {
      name?: string;
      description?: string;
      displayCode?: string;
      subscriptionName?: string;
      etf?: number;
      showOnRegistration?: boolean;
      energyManagementPriority?: number;
    };
    /** Customer wallet update object */
    CustomerWalletUpdate: {
      autoPayEnabledRequired?: boolean;
      /**
       * * Specifies auto pay
       * * ENABLED
       * * DISABLED
       */
      autoPayEnabled?: "ENABLED ,DISABLED";
      newAnniversaryDay?: number;
      billingCycleTerm?: "NONE" | "WEEKLY" | "BI_WEEKLY" | "MONTHLY";
      concurrentCardChargingBehavior?:
        | "ALLOW"
        | "DENY"
        | "STOP_CURRENT_CHARGE_AND_START_NEW";
      paymentTerms?: number;
    };
    AccountWallet: {
      accountNumber?: number;
      balance?: number;
      autoCharge?: boolean;
      autoChargeThreshold?: number;
      autoChargeAmount?: number;
      anniversaryDay?: number;
      pendingUpdatedAnniversaryDay?: number;
      paymentTerms?: number;
      /**
       * * Specifies the payment status
       * * ENABLED
       * * DISABLED
       * * DISABLED_DELINQUENCY
       */
      autoPayEnabled?: string;
      autoPayEnabledRequiredForCharging?: boolean;
      /**
       * * Specifies concurrent card usage behavior
       * * ALLOW
       * * DENY
       * * STOP_CURRENT_CHARGE_AND_START_NEW
       */
      concurrentCardUsageChargingBehavior?: string;
      /**
       * * Specifies the billing cycle
       * * NONE
       * * WEEKLY
       * * BI_WEEKLY
       * * MONTHLY
       */
      billingCycleTerm?: string;
      /**
       * * Specifies the balance type
       * * PRE_PAID
       * * POST_PAID
       * * NON_PAYING
       * * PAYMENT_IMMEDIATELY
       * * POST_PAID_IMMEDIATELY
       */
      balanceType?: string;
      /**
       * * Specifies the dunning status
       * * NONE
       * * STARTED
       * * GOING_TO_START
       * * SENT_REMINDER
       * * SUSPEND_DELINQUENCY
       * * CLOSE_DELINQUENCY
       */
      dunningStatus?: string;
      dunningLastRunDate?: number;
      dunningStartDate?: number;
      countryCurrency?: components["schemas"]["CountryCurrency"];
      dunningBlockInfo?: components["schemas"]["DunningBlockInfo"];
      invoiceBlockInfo?: components["schemas"]["InvoiceBlockInfo"];
    };
    AccountWalletResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["AccountWallet"][];
    };
    DunningBlockInfo: {
      updateUserId?: number;
      comments?: string;
      until?: number;
      startDate?: number;
      updateDate?: number;
      dunningLastRunDate?: number;
    };
    InvoiceBlockInfo: {
      comments?: string;
      updateUserId?: number;
      until?: number;
      startDate?: number;
      updateDate?: number;
    };
    /** Update account charging configuration object */
    AccountChargingConfigurationUpdate: {
      concurrentCardUsageChargingBehavior?:
        | "ALLOW"
        | "DENY"
        | "STOP_CURRENT_CHARGE_AND_START_NEW";
      autoPayEnabledRequired?: boolean;
      autoPayEnabled?: "ENABLED" | "DISABLED";
      autoCharge?: boolean;
      autoChargeAmount?: number;
      autoChargeThreshold?: number;
    };
    /** Charger host account wallet */
    WalletBlockSettingsUpdate: {
      dunningBlockUntil?: string;
      dunningBlockComments?: string;
      invoiceBlockUntil?: string;
      invoiceBlockComments?: string;
    };
    WalletBlockSettings: {
      id?: number;
      accountNumber?: number;
      /**
       * * Specifies the dunning status
       * * NONE
       * * STARTED
       * * GOING_TO_START
       * * SENT_REMINDER
       * * SUSPEND_DELINQUENCY
       * * CLOSE_DELINQUENCY
       */
      dunningStatus?: string;
      dunningStartDate?: number;
      currency?: string;
      dunningBlockInfo?: components["schemas"]["DunningBlockInfo"];
      invoiceBlockInfo?: components["schemas"]["InvoiceBlockInfo"];
    };
    WalletBlockStatusResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["WalletBlockSettings"][];
    };
    /** Update account billing cycle object */
    AccountBillingCycleUpdate: {
      billingCycleTerm?: "NONE" | "WEEKLY" | "BI_WEEKLY" | "MONTHLY";
      dunningBlockUntil?: string;
      dunningBlockStatus?: "ON" | "OFF";
      dunningBlockComments?: string;
      invoiceBlockStatus?: "ON" | "OFF";
      invoiceBlockUntil?: string;
      invoiceBlockComments?: string;
      anniversaryDay?: number;
      paymentTerms?: number;
    };
    /** Charger host profile update object */
    CustomerUpdate: {
      firstName: string;
      lastName: string;
      gender?: "MALE" | "FEMALE" | "OTHER" | "NOT_SPECIFIED";
      mobile?: string;
      /**
       * * Specifies the account type
       * * CORPORATE
       * * PRIVATE
       * * FLEET
       */
      accountType?: "CORPORATE" | "PRIVATE" | "FLEET";
      externalId?: string;
      erpId?: string;
      billingAddress: components["schemas"]["AddressUpdate"];
      shippingAddress: components["schemas"]["AddressUpdate"];
    };
    /** Close account object */
    CloseAccountRequest: {
      closedByCustomer: boolean;
    };
    CloseAccount: {
      accountNumber?: number;
      /**
       * Specifies the account status
       * * CLOSED
       * * CLOSED_CUSTOMER_REQUEST
       */
      status?: "CLOSED" | "CLOSED_CUSTOMER_REQUEST";
      cardIds?: number[];
    };
    CloseAccountResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CloseAccount"][];
    };
    /** Member update object */
    MemberUpdate: {
      firstName?: string;
      lastName?: string;
      mobile?: string;
      phoneNumber?: string;
      profilePicture?: string;
      externalId?: string;
      address?: components["schemas"]["AddressUpdate"];
    };
    /** Configuration update object */
    ConfigurationUpdate: {
      value?: string;
    };
    /** Charger profile update object */
    ChargerProfileUpdate: {
      caption?: string;
      identityKey?: string;
      externalId?: string;
      description?: string;
      siteId?: number;
      modelId?: number;
      protocolId?: number;
      serialNumber?: string;
      additionalSerialNumber?: string;
      contactPersonId?: number;
      /**
       * * Specifies the access types
       * * USE_SITE
       * * PUBLIC
       * * PRIVATE
       * * TAXI_ONLY
       */
      accessLevel?: string;
      showIn3rdPartyFilter?: boolean;
      hidden?: boolean;
      excluded?: boolean;
      disabled?: boolean;
      managed?: boolean;
      ignoreStatusNotifications?: boolean;
      /**
       * * Specifies the authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      authenticationMethods?: string[];
      /**
       * * Specifies the payment methods
       * * FREE
       * * CARD
       * * PARK_ANDA_CHARGE
       * * SMS
       * * CALL
       * * CONTRACT
       * * PLUG_AND_CHARGE
       */
      paymentMethods?: string[];
      /**
       * * Specifies authentication mode options
       * * SERVER_AUTHENTICATION
       * * FREE_VEND
       */
      authenticationMode?: string;
      equipmentId?: string;
      controllerId?: string;
      erpId?: string;
      costCenter?: string;
      infrastructureCompanyId?: number;
      utilityCompanyId?: number;
    };
    /** Charger network update object */
    ChargerNetworkUpdate: {
      communicationType?: "THREE_G,ADSL,WIFI,ZIGBEE,SECOND_G,NONE,FOUR_G,HSPA,LTE,EVDO,HSPA_PLUS,ONE_XRTT,UMTS";
      macAddress?: string;
      modemSerialNumber?: string;
      doesNotCommunicate?: boolean;
      lastReceivedCommunicationSignal?: string;
      connectionUri?: string;
      ipAddress?: string;
      dynamicIp?: boolean;
      msisdn?: string;
      iccid?: string;
      imsi?: string;
      wirelessConnectionCarrierCompanyId?: number;
    };
    /** Charger maintenance update object */
    ChargerMaintenanceUpdate: {
      /**
       * * Specifies amount of hours
       * * UNDEFINED
       * * FORTY_EIGHT_HOURS_U
       * * TWENTY_FOUR_HOURS_U
       * * SEVENTY_TWO_HOURS_U
       * * TWO_HOURS_U
       * * FOUR_HOURS_U
       * * EIGHT_HOURS_U
       * * NINETY_SIX_HOURS_U
       */
      sla?: string;
      warrantyType?: string;
      warrantyStatus?: string;
      warrantyStartDate?: string;
      warrantyExpirationDate?: string;
      warrantyNumber?: string;
      warrantyInvoiceNumber?: string;
      inMaintenance?: boolean;
      inStorage?: boolean;
      nextMaintenanceDate?: string;
      lastMaintenanceDate?: string;
      maintenanceCompanyId?: number;
      comments?: string;
      markForReplacement?: boolean;
      whitelistUpdateExpiresOn?: string;
      installerCompanyId?: number;
      temperatureScale?: "CELSIUS" | "FAHRENHEIT";
    };
    /** Charger location update object */
    ChargerLocationUpdate: {
      accessData?: string;
      chargerLocationType?:
        | "HOME"
        | "HOTEL"
        | "PARKING_LOT"
        | "MALL"
        | "HIGHWAY"
        | "GAS_STATION"
        | "PUBLIC_PARKING"
        | "COMMERCIAL"
        | "DSO"
        | "GOVERNMENT"
        | "WORK";
      accessDoorStatus?: "UNKNOWN, OPEN, CLOSED";
      floor?: string;
      restaurantsNearby?: boolean;
      poiDetails?: string;
      numberOfPaintedParkingLots?: number;
      imagesUrls?: string[];
      vehicleDimensionsUpdate?: components["schemas"]["VehicleDimensionsUpdate"];
      notesToDriver?: string;
      openingTimes?: components["schemas"]["ChargerTimeRangeUpdate"][];
    };
    ChargerTimeRangeUpdate: {
      dayOfWeek: string;
      startHour: number;
      startMinute: number;
      endHour: number;
      endMinute: number;
    };
    VehicleDimensionsUpdate: {
      maxVehicleHeight?: number;
      maxVehicleWidth?: number;
      maxVehicleLength?: number;
    };
    /** Charger electrical update object */
    ChargerElectricalUpdate: {
      energySupplierCompanyId?: number;
      inputPower?: number;
      maxCurrent?: number;
      meterSigningSupported?: boolean;
      validateMeterSignature?: boolean;
      gridConnectionDescription?: string;
      serverSideLocalLoadBalancingEnabled?: boolean;
      maxBalancePowerKw?: number;
      smartChargingEnabled?: boolean;
      nextElectricalTestDate?: string;
      lastElectricalTestDate?: string;
      utilityMeterType?: string;
      assetId?: string;
    };
    /** Charger connector update object */
    ChargerConnectorUpdate: {
      name?: string;
      identityKey?: string;
      evseIdentityKey?: string;
      evseConnectorIdentityKey?: string;
      serialNumber?: string;
      legacyId?: string;
      externalId?: string;
      ean?: string;
      maxCurrent?: number;
      maxPowerKw?: number;
      meterSerialNumber?: string;
      utilityMeterNumber?: string;
      cableLength?: number;
      wiredPhase?: number;
      revenueMargin?: number;
      inMaintenance?: boolean;
      ignoreStatusNotification?: boolean;
      reservable?: boolean;
      smartChargingEnabled?: boolean;
      teslaConnectionType?: "NONE" | "ADAPTER" | "CONNECTOR";
      teslaAdapterSerialNumber?: string;
      teslaAdapterInstallationDate?: string;
      teslaAdapterInMaintenance?: boolean;
      notes?: string;
    };
    ChargerConnectorResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["Connector"][];
    };
    ConnectorTariffUpdate: {
      /**
       * Specifies day of the week
       * * MONDAY
       * * TUESDAY
       * * WEDNESDAY
       * * THURSDAY
       * * FRIDAY
       * * SATURDAY
       * * SUNDAY
       */
      dayOfWeek: string;
      startTimeHours: number;
      startTimeMinutes: number;
      endTimeHours: number;
      endTimeMinutes: number;
      billingTariffId: number;
    };
    ConnectorTariffsUpdate: {
      connectorTariffSet: components["schemas"]["ConnectorTariffUpdate"][];
    };
    ConnectorTariff: {
      id?: number;
      /**
       * Specifies day of the week
       * * MONDAY
       * * TUESDAY
       * * WEDNESDAY
       * * THURSDAY
       * * FRIDAY
       * * SATURDAY
       * * SUNDAY
       */
      dayOfWeek?: string;
      startDate?: number;
      endDate?: number;
      billingTariffCode?: string;
      billingTariffId?: number;
      billingTariffName?: string;
      billingTariffSpCurrencyId?: number;
      roamingTariffId?: number;
      roamingTariffCode?: string;
      roamingTariffName?: string;
      roamingTariffSpCurrencyId?: number;
    };
    ConnectorTariffResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ConnectorTariffsDetails"][];
    };
    ConnectorTariffsDetails: {
      connectorId?: number;
      externalId?: string;
      tariffs?: components["schemas"]["ConnectorTariff"][];
    };
    /** Charger model object */
    ChargerModelUpdate: {
      name?: string;
      /**
       * * A group of the below types
       * * LCC
       * * CHARGER
       */
      type?: string;
      externalId?: string;
      ratedVoltage?: number;
      /**
       * * A group of the below authentication methods
       * * SEVEN_INCH
       * * EIGHT_INCH
       * * TOUCH
       * * ONE_LINE
       * * TWO_LINES
       * * FOUR_LINES
       * * LCD
       * * NONE
       * * LED
       */
      displayType?: string;
      minTemperature?: number;
      maxTemperature?: number;
      ratedFrequency?: number;
      sku?: string;
      genericName?: string;
      maxCurrent?: number;
      maxPowerKw?: number;
      maxChargeTime?: number;
      useHeartbeatToDetermineOffline?: boolean;
      smartChargingEnabled?: boolean;
      localLoadBalancingSupported?: boolean;
      reservable?: boolean;
      reserveAllEvseConnectors?: boolean;
      autoChargeEnabled?: boolean;
      changeStatusToAvailableOnStopTx?: boolean;
      smsResetSupported?: boolean;
      supportsDischarge?: boolean;
      heaterInstalled?: boolean;
      /**
       * * A group of the temperature scale options
       * * CELSIUS
       * * FAHRENHEIT
       */
      temperatureScale?: string;
      managesLocalWhitelist?: boolean;
      ocpp16Iso15118PncSupported?: boolean;
      ocpp16ImprovedSecuritySupported?: boolean;
      instructionsVideoUrl?: string;
      /**
       * * A group of the Reader types options
       * * RFID
       * * MAGNETIC_READER
       * * RFID_AND_MAGNETIC_READER
       * * NFC
       */
      readerTypes?: string[];
      manufacturerId?: number;
      maxCurrentSpec?: string;
      /**
       * * A group of the mounting type options
       * * WALL
       * * POLE
       * * BOTH
       * * STAND_ALONE
       */
      mountingType?: string;
      /**
       * * A group of the charging schedule rate unit options
       * * A
       * * W
       */
      chargingScheduleRateUnit?: string;
      rebootTime?: number;
      /**
       * * A group of the below authentication methods
       * * NONE
       * * RFID_CLASSIC
       * * SMS
       * * APP
       * * CALL
       * * PARK_AND_CHARGE
       * * RFID_DES_FIRE
       * * PLUG_AND_CHARGE
       * * DIRECT_PAYMENT
       * * CONTACTLESS_CARD
       */
      authenticationMethods?: string[];
      /**
       * * A group of the below Payment methods
       * * FREE
       * * CARD
       * * PARK_AND_CHARGE
       * * SMS
       * * CALL
       * * CONTRACT
       * * PLUG_AND_CHARGE
       */
      paymentMethods?: string[];
    };
    /** Charger model protocol object */
    ChargerModelProtocolUpdate: {
      /**
       * * Specifies the protocol type
       * * OCPP1_2
       * * OCPP1_5S
       * * NOT_USED_1
       * * SEMA_CONNECT
       * * NOT_USED_3
       * * BCP1_5_1
       * * OCPP1_5J
       * * OCPP1_5PlusS
       * * OCPP1_5PlusJ
       * * OCPP1_6S
       * * OCPP1_6J
       * * OCPP2_0_1J
       * * NOT_USED_4
       * * OCHP_DIRECT
       * * HUBJECT
       * * IAFC
       */
      protocolType?: string;
      /**
       * * Specifies the connector type
       * * EFACEC_MODEL_EFAPOWER_EV_C1_OCPP12_FIRMWARE_KIOSK_PC_EFACEC_V_1_2_0_BUILD_4
       * * ALFEN_MODEL_ALL_OCPP12_FIRMWARE_5_5_1290_48_00_115
       * * ALFEN_MODEL_ALL_OCPP15_FIRMWARE_5_5_1290_48_00_115
       * * MENNEKES_MODEL_ABC_OCPP12_FIRMWARE_123
       * * CIRCONTROL_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT
       * * NON_MANAGED
       * * EFACEC_MODEL_ABC_OCPP12_FIRMWARE_123
       * * OCPP_12_DEFAULT
       * * OCPP_15_DEFAULT
       * * MENNEKES_MODEL_ALL_OCPP15_FIRMWARE_2912
       * * BCP_151_DEFAULT
       * * SEMA_CONNECT_API
       * * DBT_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * EVBOX_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * DBT_MODEL_DEFAULT_OCPP12_FIRMWARE_DEFAULT
       * * LITEON_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * OCPP_12_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT
       * * OCPP_15_DEFAULT_ACTIVATE_DEACTIVATE_SUPPORT
       * * EBG_COMPLEO_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15_FIRMWARE_DEFAULT
       * * OCPP_15_JSON_DEFAULT
       * * OCPP_15_SOAP_SMART_CHARGING_DEFAULT
       * * OCPP_15_JSON_SMART_CHARGING_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15S_V2G_FIRMWARE_DEFAULT
       * * OCPP_16_SOAP_DEFAULT
       * * OCPP_16_JSON_DEFAULT
       * * ABB_MODEL_DEFAULT_OCPP15S_FIRMWARE_DEFAULT
       * * OCPP_15_SOAP_METER_SIGN_DEFAULT
       * * OCPP_12_DEFAULT_REVERSE_CARD_NUMBER
       * * CIRCONTROL_MODEL_DEFAULT_OCPP12_SMART_CHARGING_FIRMWARE_DEFAULT
       * * CIRCONTROL_MODEL_DEFAULT_OCPP15_SMART_CHARGING_FIRMWARE_DEFAULT
       * * NISSAN_OCPP15_SOAP_DEFAULT
       * * OCPP_15_SOAP_DEACTIVATE_BLOCKED_SOCKET
       * * OCPP_15_SOAP_2_BLOCKING_EACH_OTHER_SOCKETS
       * * EFACEC_OCPP_15_SOAP_CUSTOMIZED
       * * OCPP_201_JSON_DEFAULT
       * * OCPI
       * * ABB_OCPP_15_SOAP_AUTO_CHARGE_ENROLLMENT
       * * EFACEC_OCPP_16_JSON_CUSTOMIZED
       * * ABB_OCPP_16_JSON_AUTO_CHARGE_ENROLLMENT
       * * OCHP_DIRECT
       * * HUBJECT
       * * IAFC
       */
      softwareConnectorType?: string;
      firmwareVersion?: string;
    };
    /** Charger model connector object */
    ChargerModelConnectorUpdate: {
      ratedVoltage?: number;
      /**
       * * Specifies the placement
       * * NOT_SPECIFIED
       * * LEFT
       * * RIGHT
       * * TOP
       * * BOTTOM
       * * CENTER
       * * OTHER
       */
      placement?: string;
      connectorNumber?: number;
      maxPowerKw?: number;
      /**
       * * Specifies connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
      /**
       * * Specifies charging mode option
       * * LEVEL1
       * * LEVEL2
       * * LEVEL3
       * * MODE1
       * * MODE2
       * * MODE3
       * * MODE4
       */
      chargingMode?: string;
      smartChargingEnabled?: boolean;
      hasBuiltInCable?: boolean;
      chargingInstructions?: string;
      /**
       * * Specifies voltage type
       * * AC
       * * DC
       */
      voltageType?: string;
      normalCurrentRating?: number;
      maxCurrent?: number;
      numberOfPhases?: number;
      externalId?: string;
      name?: string;
      ratedFrequency?: number;
      evseNumber?: number;
      cableLength?: number;
      v2gEnabled?: boolean;
    };
    ChargerHostWalletBlockSettingsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["WalletBlockSettings"][];
    };
    /** Charger host account wallet */
    ChargerHostWalletBillingInfoUpdate: {
      paidManually?: boolean;
      /**
       * * Specifies auto pay
       * * ENABLED
       * * DISABLED
       */
      autoPayEnabled?: "ENABLED ,DISABLED";
      newAnniversaryDay?: number;
      w9ExistsOnFile?: boolean;
      paymentTermsInDays?: number;
    };
    ChargerHostWalletBillingInfo: {
      id?: number;
      accountNumber?: number;
      balance?: number;
      anniversaryDay?: number;
      newAnniversaryDay?: number;
      paymentTermsInDays?: number;
      /**
       * * Specifies auto pay
       * * ENABLED
       * * DISABLED
       * * DISABLED_DELINQUENCY
       */
      autoPayEnabled?: string;
      paidManually?: boolean;
      w9ExistsOnFile?: boolean;
      currency?: string;
    };
    ChargerHostWalletBillingInfoResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerHostWalletBillingInfo"][];
    };
    /** Charger host profile update object */
    ChargerHostProfileUpdate: {
      name?: string;
      externalId?: string;
      /**
       * * Specifies the charger host type
       * * STANDARD
       * * FLEET
       * * MDU
       * * WORKPLACE
       */
      type?: "STANDARD" | "FLEET" | "MDU" | "WORKPLACE";
      /**
       * * Specifies the on boarding status
       * * ACTIVE
       * * NEW
       * * IN_PROCESS
       */
      onBoardingStatus?: "ACTIVE" | "NEW,IN_PROCESS";
      companyId?: number;
      contactPersonId?: number;
      payingCustomerAccountNumber?: number;
      allowedEmailDomains?: string;
      chargerIssueDefaultAssigneeId?: number;
      cardIssueDefaultAssigneeId?: number;
      customerIssueDefaultAssigneeId?: number;
      invoiceProcessingInstructions?: string;
      address?: components["schemas"]["AddressUpdate"];
    };
    /** Charger host payment gateway object */
    ChargerHostPaymentGatewayUpdate: {
      /**
       * * Specifies the application fee types
       * * AMOUNT
       * * RATE
       * * NONE
       */
      applicationFeeType?: string;
      paymentGatewayAccountId?: string;
      vatNumber?: string;
      applicationFee?: number;
    };
    ChargerHostPaymentGateway: {
      id?: number;
      accountNumber?: number;
      paymentGatewayAccountId?: string;
      vatNumber?: string;
      /**
       * * Specifies the application fee types
       * * AMOUNT
       * * RATE
       * * NONE
       */
      applicationFeeType?: string;
      applicationFee?: number;
      useCustomConfigurations?: boolean;
      gatewayType?: string;
      serverApiKey?: string;
      serverApiResponseDomain?: string;
      url?: string;
      iframeUrl?: string;
      programKey?: string;
      programId?: string;
      developerId?: string;
      apiScriptUrl?: string;
      isSandBox?: boolean;
      merchantId?: string;
    };
    ChargerHostPaymentGatewayResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerHostPaymentGateway"][];
    };
    /** ChargerHost billing update object */
    ChargerHostBillingUpdate: {
      defaultHostServicePlanCode?: string;
      defaultHostServiceContractId?: number;
      defaultCustomerPlanCode?: string;
      billingUtilityTariffCode?: string;
      billingHostContractId?: string;
      defaultChargerPlanCode?: string;
      defaultBillingTariffCode?: string;
      shouldBillCustomerFromHost?: boolean;
    };
    ChargerHostBilling: {
      id?: number;
      accountNumber?: number;
      defaultHostServicePlanCode?: string;
      defaultHostServiceContractId?: string;
      defaultCustomerPlanCode?: string;
      billingUtilityTariffCode?: string;
      billingHostContractId?: string;
      billingHostContractIds?: string[];
      defaultChargerPlanCode?: string;
      defaultBillingTariffCode?: string;
      shouldBillCustomerFromHost?: boolean;
    };
    ChargerHostBillingResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerHostBilling"][];
    };
    /** Charger group update object */
    ChargerGroupUpdate: {
      caption?: string;
      description?: string;
      externalId?: string;
      dynamicContentQuery?: string;
      /**
       * Specifies card authorization schema
       * * DEFAULT
       * * APPROVE_ALL
       * * SPECIFIC_PROVIDERS
       */
      cardAuthorizationSchema?:
        | "DEFAULT"
        | "APPROVE_ALL"
        | "SPECIFIC_PROVIDERS";
      externalCardAuthorizationProviderNames?: string[];
    };
    /** Charger group reallocation object */
    ChargerGroupReallocate: {
      destinationGroupId: number;
    };
    ChargerGroupDetailsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["GroupDetails"][];
    };
    /** Remove chargers object */
    RemoveChargers: {
      ids?: number[];
    };
    /** Add chargers object */
    AddChargers: {
      ids?: number[];
    };
    /** Remove billing plans object */
    RemoveBillingPlans: {
      codes: string[];
    };
    /** Adding billing plans object */
    AddBillingPlans: {
      codes: string[];
    };
    /** Update card status object */
    UpdateStatus: {
      status: "LOST" | "DESTROYED" | "INACTIVE" | "CANCELLED" | "SUSPENDED";
      comments?: string;
    };
    /** Delete card object */
    DeleteCardRequest: {
      accountNumber?: number;
    };
    /** Update contract object */
    ContractUpdate: {
      startDate?: string;
      endDate?: string;
      lastDateForEtf?: string;
      privateEntityPolicy?: "PROPERTY" | "SITE" | "CHARGER";
      privateEntityId?: number;
      vin?: string;
      percentageDiscount?: number;
      monthlyDiscountAmount?: number;
      waivePlanSetupFee?: boolean;
      useNewPlanEtfDate?: boolean;
      oemCardNumber?: string;
      externalId?: string;
    };
    /** Swap contract object */
    ContractSwap: {
      planCode: string;
      waivePlanSetupFee: boolean;
      useNewPlanEtfDate: boolean;
      vin?: string;
    };
    /** Update status of contract object */
    ContractStatusUpdate: {
      /**
       * Specifies contract initialization status
       * * ACTIVE
       * * SUSPENDED
       * * CLOSED_BY_CUSTOMER
       * * CLOSED
       * * CLOSED_AUTOSWAP
       */
      status:
        | "ACTIVE"
        | "SUSPENDED"
        | "CLOSED_BY_CUSTOMER"
        | "CLOSED"
        | "CLOSED_AUTOSWAP";
    };
    /** Update ad hoc contract object */
    ContractCreditUpdate: {
      amount: number;
      comment?: string;
    };
    /** Close contract object */
    ContractClose: {
      requestedBy: "OPERATOR" | "CUSTOMER";
      etf: number;
    };
    /** Update status ad hoc contract object */
    AdHocContractStatusUpdate: {
      status: "ACTIVE" | "SUSPENDED";
    };
    /** Update ad hoc contract credit object */
    AdHocContractUpdate: {
      amount: number;
      externalId?: string;
      comment?: string;
    };
    ResourceContent: {
      content?: string[];
    };
    ResourceContentResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ResourceContent"][];
    };
    CustomerReservationTariff: {
      id?: number;
      reserveByDateTerms?: components["schemas"]["ReserveByDateTerms"];
      reserveNowTerms?: components["schemas"]["ReserveNowTerms"];
    };
    CustomerReservationTariffResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerReservationTariff"][];
    };
    ReserveByDateTerms: {
      allowReservation?: boolean;
      chargePerMinute?: boolean;
      sameFeeForNoShow?: boolean;
      onlyChargeWhenReserved?: boolean;
      fee?: number;
      cancellationFee?: number;
      noShowFee?: number;
    };
    ReserveNowTerms: {
      cancellationFee?: number;
      chargePerMinute?: boolean;
      sameFeeForNoShow?: boolean;
      reservationTerms?: components["schemas"]["ReservationTerm"][];
    };
    ChargerSpeeds: {
      /**
       * * Specifies the charge speed
       * * SLOW
       * * SEMI_FAST
       * * FAST
       * * ULTRA_FAST
       */
      chargerSpeed?: string;
      tariffTimeRanges?: components["schemas"]["TariffTimeRange"][];
    };
    ConnectorTypes: {
      /**
       * * Specifies the connector type
       * * TYPE_2_MENNEKES
       * * TYPE_4_CHADEMO
       * * TYPE_F_SCHUKO_CEE_7_4_GER
       * * TYPE_E_AND_F_CEE_7_5_FRA
       * * TYPE_3_SCAME
       * * TYPE_COMBO_GERMANY
       * * TYPE_K_SECTION_107_2_D1_DEN
       * * TYPE_C_CEE7_16_EU
       * * TYPE_E_CEE_7_5_FRA
       * * TYPE_C_CEE_7_17_GER_FRA
       * * TYPE_L_CEI_23_16_VII_ITA
       * * TYPE_J_SEV_1011_CH
       * * TYPE_D_BS_546_2_PIN_UK
       * * TYPE_D_BS_546_3_PIN_UK
       * * TYPE_G_BS_1363_IS_401_AND_411_MS_58_UK
       * * TYPE_1_J1772_YAZAKI
       * * SAE_J1772_COMBO_US
       * * SAE_J1772_AVCON
       * * TESLA_UNIVERSAL_MOBILE_CONNECTOR
       * * NEMA_1_15P
       * * TYPE_B_NEMA_5_15
       * * TYPE_B_NEMA_5_20
       * * TESLA_R
       * * TESLA_S
       * * TYPE_2_TETHERED
       */
      connectorType?: string;
      tariffTimeRanges?: components["schemas"]["TariffTimeRange"][];
    };
    CustomerPlanTariff: {
      chargerSpeeds?: components["schemas"]["ChargerSpeeds"][];
      connectorTypes?: components["schemas"]["ConnectorTypes"][];
    };
    CustomerPlanTariffs: {
      id?: number;
      groupId?: number;
      tariffs?: components["schemas"]["CustomerPlanTariff"];
    };
    PlanTariffsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["CustomerPlanTariffs"][];
    };
    ExternalCardAuthorizationProvider: {
      externalCardAuthorizationProviderNames?: string[];
    };
    ExternalCardAuthorizationProviderResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ExternalCardAuthorizationProvider"][];
    };
    ChargerHostAccountWallet: {
      id?: number;
      accountNumber?: number;
      balance?: number;
      anniversaryDay?: number;
      newAnniversaryDay?: number;
      paymentTermsInDays?: number;
      /**
       * * Specifies auto pay
       * * ENABLED
       * * DISABLED
       * * DISABLED_DELINQUENCY
       */
      autoPayEnabled?: string;
      /**
       * * Specifies the dunning status
       * * NONE
       * * STARTED
       * * GOING_TO_START
       * * SENT_REMINDER
       * * SUSPEND_DELINQUENCY
       * * CLOSE_DELINQUENCY
       */
      dunningStatus?: string;
      dunningStartDate?: number;
      currency?: string;
      paidManually?: boolean;
      w9ExistsOnFile?: boolean;
      dunningBlockInfo?: components["schemas"]["DunningBlockInfo"];
      invoiceBlockInfo?: components["schemas"]["InvoiceBlockInfo"];
    };
    ChargerHostAccountWalletResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerHostAccountWallet"][];
    };
    ChargerHostPlanManagement: {
      id?: number;
      accountNumber?: number;
      countryCurrency?: components["schemas"]["CountryCurrency"];
      allowHostToControlDriverTariffs?: boolean;
      singleTariffForAllDrivers?: boolean;
      specifyTariffPerDriverType?: boolean;
      allowMembershipPlans?: boolean;
      allowOtpPlans?: boolean;
      allowRoamingPlans?: boolean;
    };
    ChargerHostPlanManagementResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerHostPlanManagement"][];
    };
    ChargerGroupChargers: {
      id?: number;
      chargerIds?: number[];
    };
    ChargerGroupChargersResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["ChargerGroupChargers"][];
    };
    BatchCards: {
      name: string;
      importOn: number;
      numberOfRecordsToImport?: number;
      successNumberOfRecordsImported?: number;
      ids?: number[];
    };
    BatchCardsResponse: {
      httpStatusCode: number;
      requestId: string;
      code?: string;
      reason?: string;
      message?: string;
      errors?: components["schemas"]["Message"][];
      messages?: components["schemas"]["Message"][];
      count: number;
      data: components["schemas"]["BatchCards"][];
    };
  };
}

export interface operations {
  /** Get a customer plan tariffs by plan code and charger group id */
  getBillingPlanGroupTariffsByCode: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Charger group id */
        chargerGroupId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanTariffsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update all a customer plan tariffs of a plan code */
  updatePlanGroupTariffsByCode: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** groupId */
        chargerGroupId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PutPlanTariffsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanTariffsUpdate"];
      };
    };
  };
  /** Get a customer plan tariffs by plan code that related to all chargers */
  getBillingPlanTariffsForAllGroupsByCode: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanTariffsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update all a customer plan tariffs of a plan code */
  updatePlanGroupTariffsByCode_1: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PutPlanTariffsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanTariffsUpdate"];
      };
    };
  };
  /** Get details of all vehicles by filter */
  getVehiclesByFilter: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["VehicleResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VehicleFilter"];
      };
    };
  };
  /** Find utility tariffs by filter */
  filter: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["UtilityTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UtilityTariffFilter"];
      };
    };
  };
  /** Create a site */
  addSite: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SiteResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteCreate"];
      };
    };
  };
  /** Calculate energy planning */
  calcEnergyPlanning: {
    parameters: {
      path: {
        /** Site ID */
        siteId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["EnergyPlanningResultResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnergyPlanningCalculationResult"];
      };
    };
  };
  /** Add vehicles schedule to a given site by a CSV file */
  loadVehiclesSchedule: {
    parameters: {
      path: {
        /** siteId */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** File to upload */
          file: string;
        };
      };
    };
  };
  /** Find a site resource */
  findSiteResource: {
    parameters: {
      path: {
        id: number;
        fileName: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceContentResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Connect a resource to a site */
  connectResourceToSite: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** File name */
        fileName: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SiteResourceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteResourceCreate"];
      };
    };
  };
  /** Delete site's resource by id and file name */
  deleteSiteResource: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** File name */
        fileName: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update s site resource */
  updateSiteResource: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** File name */
        fileName: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteResourcePatch"];
      };
    };
  };
  /** Find sites by filter */
  filterSites: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SiteResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteFilter"];
      };
    };
  };
  /** Upload files */
  uploadFiles: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ResourceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Files to upload */
          files: string[];
          chargerHostId?: string;
        };
      };
    };
  };
  /** Finds reservations based on a given filter */
  filterReservations: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ReservationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservationFilter"];
      };
    };
  };
  /** Create a property */
  addProperty: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PropertyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyCreate"];
      };
    };
  };
  /** Finds properties based on a given filter */
  filterProperties: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PropertyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyFilter"];
      };
    };
  };
  /** Add a new operator user */
  addOperator: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedOperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperatorCreate"];
      };
    };
  };
  /** Finds operator users based on a given filter */
  filterOperators: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["OperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperatorFilter"];
      };
    };
  };
  /** Find driver details of one-time payment billing transactions */
  getGuestDriverDetails: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["GuestDriverDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GuestDriverDetailsFilter"];
      };
    };
  };
  /** Get details of EV transactions based on a given filter */
  filterEvTransactions: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["EvTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvTransactionFilter"];
      };
    };
  };
  /** Create energy policy */
  addPolicy: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PolicyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PolicyCreate"];
      };
    };
  };
  /** Find energy policies based on a given filter */
  filterPolicies: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PolicyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PolicyFilter"];
      };
    };
  };
  /** Create customer tariff */
  addCustomerTariff: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerTariffCreate"];
      };
    };
  };
  /** Create customer reservation tariff term */
  createCustomerReservationTariffTerm: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerReservationTariffNowResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReserveNowTermCreate"];
      };
    };
  };
  /** Find customers tariffs by filter */
  filter_1: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerTariffFilter"];
      };
    };
  };
  /** Create customer plan */
  createPlan: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanCreate"];
      };
    };
  };
  /** Get a plan products by plan code */
  getBillingPlanProducts: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProductsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Add product to customer plan */
  addPlanProduct: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProductsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanProductCreate"];
      };
    };
  };
  filterPlanProfile: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanProfileFilter"];
      };
    };
  };
  /** Create a new customer */
  addCustomer: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerCreate"];
      };
    };
  };
  /** Create a new member */
  addMember: {
    parameters: {
      path: {
        /** Paying Account Number */
        payingAccountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["MemberResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberCreate"];
      };
    };
  };
  /** Get details of members based on a given filter */
  filterMembers: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["MemberResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberFilter"];
      };
    };
  };
  /** Get details of a customer by filter */
  filterCustomerAccounts: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerFilter"];
      };
    };
  };
  /** Find country currencies by filter */
  filter_2: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CountryCurrencyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CountryCurrencyFilter"];
      };
    };
  };
  /** Create a new contact person */
  createPerson: {
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ContactPersonResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContactPersonCreate"];
      };
    };
  };
  /** Get details of contact people based on a given filter */
  filterContactPeople: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ContactPersonResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContactPersonFilter"];
      };
    };
  };
  /** Find configurations by filter */
  filter_3: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ConfigurationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigurationFilter"];
      };
    };
  };
  /** Find companies by filter */
  filter_4: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CompanyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyFilter"];
      };
    };
  };
  /** Create a Charger */
  addCharger: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerCreate"];
      };
    };
  };
  /**
   * Send remote operation to charger. Make sure each request is sent with a <b>different GUID</b>
   *
   * <b>OCPP 1.6 Example:</b>
   *
   * <code>[
   * &ensp;&ensp;2,
   * &ensp;&ensp;"8cc0c606-2c6b-4447-96bd-82c6cf01393c",
   * &ensp;&ensp;"RemoteStartTransaction", {
   * &ensp;&ensp;&ensp;&ensp;"idTag": "EE06547CE41FB7",
   * &ensp;&ensp;&ensp;&ensp;"connectorId": 2
   * &ensp;&ensp;&ensp;&ensp;}
   * ]</code>
   *
   * <b>OCPP 1.5 SOAP Example:</b>
   *
   * <code><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:ns="urn://Ocpp/Cp/2012/06/">
   * &ensp;&ensp;<soap:Header>
   * &ensp;&ensp;&ensp;&ensp;<ns:chargeBoxIdentity>SCAL0001</ns:chargeBoxIdentity>
   * &ensp;&ensp;</soap:Header>
   * &ensp;&ensp;<soap:Body>
   * &ensp;&ensp;&ensp;&ensp;<ns:clearCacheRequest/>
   * &ensp;&ensp;</soap:Body>
   * </soap:Envelope></code>
   */
  sendRawMessage: {
    parameters: {
      path: {
        /** Identity Key */
        identityKey: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["RawOperationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": string;
        "text/plain": string;
      };
    };
  };
  /**
   * Send charging profile remote operation to charger.
   *
   * <b>OCPP 1.6 Example:</b>
   *
   * <code>{
   * &ensp;&ensp;"connectorId": 2,
   * &ensp;&ensp;"csChargingProfiles": {
   * &ensp;&ensp;&ensp;&ensp;"chargingProfileId": 520,
   * &ensp;&ensp;&ensp;&ensp;"transactionId": 122202,
   * &ensp;&ensp;&ensp;&ensp;"stackLevel": 0,
   * &ensp;&ensp;&ensp;&ensp;"chargingProfilePurpose": "TxProfile",
   * &ensp;&ensp;&ensp;&ensp;"chargingProfileKind": "Absolute",
   * &ensp;&ensp;&ensp;&ensp;"chargingSchedule": {
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"startSchedule": "2021-05-18T12:44:09Z",
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"chargingRateUnit": "A",
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"chargingSchedulePeriod": [
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;{
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"startPeriod": 0,
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"limit": 1,
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;"numberPhases": 3
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;}
   * &ensp;&ensp;&ensp;&ensp;&ensp;&ensp;]
   * &ensp;&ensp;&ensp;&ensp;}
   * &ensp;&ensp;}
   * }</code>
   */
  sendChargingProfileMessage: {
    parameters: {
      path: {
        /** Identity Key */
        identityKey: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["RawOperationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
  };
  /** Find charger status details by filter */
  filterChargerStatus: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerStatusResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerStatusFilter"];
      };
    };
  };
  filterChargerProfile: {
    parameters: {
      query: {
        /** Requested Fields */
        requestedFields?: string[];
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerProfileFilter"];
      };
    };
  };
  /** Find charger network details by filter */
  filterChargerNetwork: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerNetworkResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerNetworkFilter"];
      };
    };
  };
  /** Find charger maintenance details by filter */
  filterChargerMaintenance: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerMaintenanceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerMaintenanceFilter"];
      };
    };
  };
  /** Find charger locations details by filter */
  filterChargerLocation: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerLocationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerLocationFilter"];
      };
    };
  };
  /**
   * Send remote operation to charger group. Make sure each request is sent with a <b>different GUID</b>
   *
   * <b>OCPP 1.6 Example:</b>
   *
   * <code>[
   * &ensp;&ensp;2,
   * &ensp;&ensp;"8cc0c606-2c6b-4447-96bd-82c6cf01393c",
   * &ensp;&ensp;"GetCompositeSchedule", {
   * &ensp;&ensp;&ensp;&ensp;"connectorId": 0
   * &ensp;&ensp;&ensp;&ensp;"duration": 3600
   * &ensp;&ensp;&ensp;&ensp;"chargingRateUnit": "A",
   * &ensp;&ensp;&ensp;&ensp;}
   * ]</code>
   */
  sendRawMessage_1: {
    parameters: {
      path: {
        /** Group Id */
        groupId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": string;
      };
    };
  };
  /** Find charger electrical details by filter */
  filterChargerElectrical: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerElectricalResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerElectricalFilter"];
      };
    };
  };
  /** Create a charger model */
  createChargerModel: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelCreate"];
      };
    };
  };
  /** Create a charger model protocol */
  createModelProtocol: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelProtocolResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelProtocolCreate"];
      };
    };
  };
  /** Create a charger model connector */
  createChargerModelConnector: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelConnectorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelConnectorCreate"];
      };
    };
  };
  /** Find charger models by filter */
  filterChargerModel: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelFilter"];
      };
    };
  };
  /** Create a charger host */
  createChargerHost: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostCreate"];
      };
    };
  };
  /** Finds statements based on a given filter */
  filterStatements: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["StatementResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatementFilter"];
      };
    };
  };
  /** Finds statements based on a given filter */
  filterInvoices: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["InvoiceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvoiceFilter"];
      };
    };
  };
  /** Get invoice as pdf */
  getCurrentStatementAsPdf: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
      header: {
        "Accept-Language"?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/pdf": string;
          "application/json": string;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentStatement"];
      };
    };
  };
  /** Finds transactions based on a given filter */
  filterTransactions: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostTransactionFilter"];
      };
    };
  };
  /** Finds charger hosts based on a given filter */
  filterChargerHosts: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostFilter"];
      };
    };
  };
  /** Get details of a given charger group */
  getChargerGroupById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Create new charger group under a given group id */
  addChargerGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerGroupCreate"];
      };
    };
  };
  /** Delete a charger group by id */
  deleteChargerGroupById: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update single charger group */
  updateChargerGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerGroupUpdate"];
      };
    };
  };
  /** Create new folder under a given group id */
  addChargerGroupFolder: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FolderCreate"];
      };
    };
  };
  /** Reassign card by id */
  reassign: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReassignCard"];
      };
    };
  };
  /**
   * Exiting card must be in one of the following statuses to be activated:
   *
   * * LOST
   * * DESTROYED
   * * INACTIVE
   * * CANCELLED
   * * SUSPENDED
   * * STOLEN
   * * NOT_ASSIGNED
   */
  activateCard: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivateCard"];
      };
    };
  };
  /** Finds cards based on a given filter */
  filterCards: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CardFilter"];
      };
    };
  };
  /** Import batch of cards */
  importBatch: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchCardImport"];
      };
    };
  };
  /** Finds billing transactions based on a given filter */
  filterTransactions_1: {
    parameters: {
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionFilter"];
      };
    };
  };
  /** Operator login */
  operatorLogin: {
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["OperatorLoginResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
  };
  /** Operator login as customer */
  operatorLoginAsCustomer: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerLoginResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginAsCustomerRequest"];
      };
    };
  };
  /** Finds statements based on a given filter */
  filterStatements_1: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["StatementResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatementFilter"];
      };
    };
  };
  /** Get reservation terms to reserve now */
  getReservationTermsNow: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["TermsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservationTermsNow"];
      };
    };
  };
  /** Get reservation terms by date */
  getReservationTermsByDate: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["TermsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservationTermsByDate"];
      };
    };
  };
  /** Reserve now */
  reserveNow: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ReservationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservationCreateNow"];
      };
    };
  };
  /** Get details of charger to reserve */
  getChargerForReservation: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerReservationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerFind"];
      };
    };
  };
  /** Create a reservation by date */
  createReservationByDate: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ReservationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReservationCreateByDate"];
      };
    };
  };
  /** Get details of card payment methods by account number */
  getPaymentCard: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PaymentCardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Add a new card payment method */
  addCardPaymentMethod: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PaymentCardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePaymentCard"];
      };
    };
  };
  /** Get details of bank account payment methods by account number */
  getBankAccountPayments: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BankAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Add a new bank account payment method */
  addBankAccount: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BankAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBankAccount"];
      };
    };
  };
  /** Find invoices based on a given filter */
  filterInvoices_1: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["InvoiceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvoiceFilter"];
      };
    };
  };
  /** Get invoice as pdf */
  getCurrentStatementAsPdf_1: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
      header: {
        "Accept-Language"?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/pdf": string;
          "application/json": string;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CurrentStatement"];
      };
    };
  };
  /** Add a new contract */
  addContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractCreate"];
      };
    };
  };
  /** Finds contracts based on a given filter */
  filterContracts: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractFilter"];
      };
    };
  };
  /** Find an ad hoc contract for a given account */
  getAdHocContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CreditResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Add a new ad hoc contract */
  addAdHocContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CreditResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdHocContractCreate"];
      };
    };
  };
  /** Validate that a customer has all capabilities to reserve charger */
  validateChargingAbilityReservation: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargingAbilityReservationRequest"];
      };
    };
  };
  /** Validate that a customer has all capabilities to charge */
  validateChargingStartStatus: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargingAbilityChargeRequest"];
      };
    };
  };
  /** Auto charge enrollment */
  autoCharge: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Charger Identity Key */
        chargerIdentityKey: string;
        /** Connector Identity Key */
        connectorIdentityKey: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["AutoChargeResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Suspend all cards for a given account */
  suspendCards: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SuspendCardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Assign batch of cards. No billing involved when assigning to given account */
  batchAssign: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BatchCardAssign"];
      };
    };
  };
  /** Add a new billing transaction refund related */
  addRefundTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionRefundCreate"];
      };
    };
  };
  /** Add a new billing transaction penalty related */
  addPenaltyTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionPenaltyCreate"];
      };
    };
  };
  /** Finds billing transactions based on a given filter */
  filterTransactions_2: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionFilter"];
      };
    };
  };
  /** Add a new billing transaction external payment related */
  addExternalPaymentTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionExternalPaymentCreate"];
      };
    };
  };
  /** Add a new billing transaction credit related */
  addCreditTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionCreditCreate"];
      };
    };
  };
  /** Add a new billing transaction contract related */
  addContractsTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BillingTransactionContractCreate"];
      };
    };
  };
  /** Update notification preferences for user */
  updateNotificationPreferences: {
    parameters: {
      path: {
        /** User Id */
        userId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["UserNotificationPreferenceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserNotificationPreferencesPatch"];
      };
    };
  };
  /** Get details of site by its id */
  getSite: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SiteResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Deletes a single site by its id */
  deleteSiteById: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /**
   * Update a single site. Address field is optional.
   *
   *  To inherit the address of the property pass null for address field
   */
  updateSite: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SiteResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SiteUpdate"];
      };
    };
  };
  /** Updates a single external site */
  updateExternalSite: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["SiteResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExternalSiteUpdate"];
      };
    };
  };
  /** Get details of property by its id */
  getProperty: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PropertyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Deletes a single property by its id */
  deletePropertyById: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Updates a single property */
  updateProperty: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PropertyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PropertyUpdate"];
      };
    };
  };
  /** Updates a single external property */
  updateExternalProperty: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PropertyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExternalPropertyUpdate"];
      };
    };
  };
  /** Get details of operator user by its id */
  getOperator: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["OperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Deletes a single operator by its id */
  deleteOperatorById: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update operator user */
  updateOperator: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["OperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OperatorPatch"];
      };
    };
  };
  /** Unblocks an operator */
  unblockOperator: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["OperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Suspend an operator by its id */
  suspend: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["OperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Change operator status to active */
  reactivate: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["OperatorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of energy policy by its id */
  getPolicy: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PolicyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Deletes a single energy policy by its id */
  deletePropertyById_1: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Updates single energy policy */
  updatePolicy: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PolicyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PolicyUpdate"];
      };
    };
  };
  /** Get customer tariff by id */
  getCustomerTariff: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update customer tariff */
  updateCustomerTariff: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerTariffUpdate"];
      };
    };
  };
  /** Update customer reservation tariff now */
  updateCustomerReservationTariffNow: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerReservationTariffNowResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReserveNowUpdate"];
      };
    };
  };
  /** Delete customer reservation tariff term */
  deleteCustomerReservationTariffTerm: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Term Id */
        termId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerReservationTariffNowResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update customer reservation tariff term */
  updateCustomerReservationTariffTerm: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Term Id */
        termId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerReservationTariffNowResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReserveNowTermUpdate"];
      };
    };
  };
  /** Update customer reservation tariff */
  updateCustomerReservationTariffByDate: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerReservationTariffByDateResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReserveByDateTermsUpdate"];
      };
    };
  };
  /** Get a customer plan profile by plan code */
  getPlanProfile: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a customer plan profile by plan code */
  updatePlan: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerPlanProfileUpdate"];
      };
    };
  };
  /** Update a customer plan product by plan code */
  updatePlanProduct: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProductsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanProductUpdate"];
      };
    };
  };
  /** Remove product from customer plan */
  removePlanProduct: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProductsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanProductDelete"];
      };
    };
  };
  /** Get a customer plan registration display by code and locale */
  getPlanRegistrationDisplay: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanRegistrationDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a customer plan registration display by code and locale */
  updatePlanRegistrationDisplay: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanRegistrationDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanRegistrationDisplayUpdate"];
      };
    };
  };
  /** Get a customer plan display by plan code and locale */
  getPlanDisplayByCode: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a customer plan display by code and locale */
  updatePrimaryPlanDisplay: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanDisplayUpdate"];
      };
    };
  };
  /** Deactivate a customer plan by plan code */
  deactivatePlan: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get a customer plan profile by plan code and country(ISO3)-currency */
  getPlanProfileByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a customer plan profile by plan code and country(ISO3)-currency */
  updatePlanByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerCountryCurrencyPlanUpdate"];
      };
    };
  };
  /** Update a customer plan product by plan code and country(ISO3)-currency */
  updatePlanProduct_1: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProductsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanProductUpdate"];
      };
    };
  };
  /** Get a customer plan registration display by code, country(ISO3)-currency and locale */
  getPlanRegistrationDisplayByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanRegistrationDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a customer plan registration display by code, country(ISO3)-currency and locale */
  updatePlanRegistrationDisplayByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanRegistrationDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanRegistrationDisplayUpdate"];
      };
    };
  };
  /** Get a customer plan display by code, country(ISO3)-currency and locale */
  getPlanDisplayByCodeCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a customer plan display by code, country(ISO3)-currency and locale */
  updatePlanDisplayByCodeCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
        /** locale */
        locale: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanDisplayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PlanDisplayUpdate"];
      };
    };
  };
  /** Deactivate a customer plan profile by plan code and country(ISO3)-currency */
  deactivatePlanByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Activate a customer plan profile by plan code and country(ISO3)-currency */
  activatePlanByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Activate a customer plan by plan code */
  activatePlan: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get an account's wallet by account number */
  getAccountWallet: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["AccountWalletResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update customer's account wallet */
  updateCustomerWallet: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["AccountWalletResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerWalletUpdate"];
      };
    };
  };
  /** Update charging configuration of an account */
  updateChargingConfiguration: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountChargingConfigurationUpdate"];
      };
    };
  };
  /** Update customer's account wallet block settings */
  updateAccountWalletBlockSettings: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["WalletBlockStatusResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletBlockSettingsUpdate"];
      };
    };
  };
  /** Update billing cycle of an account */
  updateAccountBillingCycle: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["AccountWalletResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountBillingCycleUpdate"];
      };
    };
  };
  /** Get details of a customer by account number */
  getCustomerAccount: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update customer's profile by by account number */
  updateCustomerProfile: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerUpdate"];
      };
    };
  };
  /** Close account of a paying customer, the operation also closes members account */
  close: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CloseAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CloseAccountRequest"];
      };
    };
  };
  /** Activate a registered account */
  activateRegisteredAccount: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CloseAccountResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of a member by account number */
  getMember: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["MemberResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a member by account number */
  updateMemberByAccountNumber: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["MemberResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MemberUpdate"];
      };
    };
  };
  /** Unsuspends a member by account number */
  unsuspendMemberByAccountNumber: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["MemberResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Suspends a member by account number */
  suspendMemberByAccountNumber: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["MemberResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get a configuration by id */
  getConfigurationById: {
    parameters: {
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ConfigurationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a configuration by id */
  update: {
    parameters: {
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ConfigurationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigurationUpdate"];
      };
    };
  };
  /** Get details of charger profile by its id */
  getChargerProfile: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
      query: {
        /** Requested Fields */
        requestedFields?: string[];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update charger profile by its id */
  updateChargerProfile: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerProfileUpdate"];
      };
    };
  };
  /** Get details of charger network by its id */
  getChargerNetwork: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerNetworkResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Updates charger networks details */
  updateChargerNetwork: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerNetworkResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerNetworkUpdate"];
      };
    };
  };
  /** Get details of charger maintenance by its id */
  getChargerMaintenance: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerMaintenanceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Updates a single charger maintenance details */
  updateChargerMaintenance: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerMaintenanceResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerMaintenanceUpdate"];
      };
    };
  };
  /** Get details of charger location by its id */
  getChargerLocation: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerLocationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Updates charger location details */
  updateChargerLocation: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerLocationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerLocationUpdate"];
      };
    };
  };
  /** Get details of charger electrical by its id */
  getChargerElectrical: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerElectricalResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Updates charger electrical details */
  updateChargerElectrical: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerElectricalResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerElectricalUpdate"];
      };
    };
  };
  /** Update charger connector */
  updateChargerConnector: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Connector id */
        connectorId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerConnectorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerConnectorUpdate"];
      };
    };
  };
  /** Get connector tariffs by id */
  getConnectorTariff: {
    parameters: {
      path: {
        /** chargerId */
        chargerId: number;
        /** connectorId */
        connectorId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ConnectorTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update connector tariffs */
  updateConnectorTariff: {
    parameters: {
      path: {
        /** chargerId */
        chargerId: number;
        /** connectorId */
        connectorId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ConnectorTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConnectorTariffsUpdate"];
      };
    };
  };
  /** Get details of a charger model by id */
  getChargerModel: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Delete a charger model */
  deleteModel: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a charger model */
  updateChargerModel: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelUpdate"];
      };
    };
  };
  /** Delete a charger model protocol */
  deleteModelProtocol: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Protocol Id */
        protocolId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a charger model protocol */
  updateModelProtocol: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Protocol Id */
        protocolId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelProtocolResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelProtocolUpdate"];
      };
    };
  };
  /** Delete a charger model connector */
  deleteChargerModelConnector: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Connector id */
        connectorId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a charger model connector */
  updateChargerModelConnector: {
    parameters: {
      path: {
        /** Id */
        id: number;
        /** Connector id */
        connectorId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerModelConnectorResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerModelConnectorUpdate"];
      };
    };
  };
  /** Update charger host account wallet block settings */
  updateWalletBlockSettings: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostWalletBlockSettingsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletBlockSettingsUpdate"];
      };
    };
  };
  /** Update charger host billing info by account number */
  updateWalletBillingInfo: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostWalletBillingInfoResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostWalletBillingInfoUpdate"];
      };
    };
  };
  /** Find by account number */
  getChargerHostProfile: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a charger host profile by by account number */
  updateChargerHostProfile: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostProfileUpdate"];
      };
    };
  };
  /** Find by account number */
  getChargerHostPaymentGateway: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostPaymentGatewayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update charger host payment gateway by account number */
  updateChargerHostPaymentGateway: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostPaymentGatewayResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostPaymentGatewayUpdate"];
      };
    };
  };
  /** Find by account number */
  getChargerHostBilling: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostBillingResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update a charger host billing by account number */
  updateChargerHostBilling: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostBillingResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerHostBillingUpdate"];
      };
    };
  };
  /** Suspend a charger host's account by account number */
  suspendChargerHostProfile: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Reopen a charger host's account by account number */
  reopenChargerHostProfile: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Close a charger host's account by account number */
  closeChargerHostProfile: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Activate a charger host's account by account number */
  activateChargerHostProfile: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Reallocate a charger group */
  reallocateChargerGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChargerGroupReallocate"];
      };
    };
  };
  /** Remove chargers from charger group */
  removeChargersFromGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveChargers"];
      };
    };
  };
  /** Add chargers to a charger group */
  addChargersToGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddChargers"];
      };
    };
  };
  /** Remove billing plans from a charger group */
  removeBillingPlansFromGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveBillingPlans"];
      };
    };
  };
  /** Add billing plans to a charger group */
  addBillingPlansToGroup: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddBillingPlans"];
      };
    };
  };
  /**
   * Card must be active in order to update it's status to one of the following:
   *
   * * LOST
   * * DESTROYED
   * * INACTIVE
   * * CANCELLED
   * * SUSPENDED
   * * STOLEN
   */
  changeStatus: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateStatus"];
      };
    };
  };
  /** Delete card by id */
  deleteCardById: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteCardRequest"];
      };
    };
  };
  /** Cancel reservation by its id */
  cancelReservation: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ReservationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Set card payment method as primary */
  setPrimaryPaymentCard: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PaymentCardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of a contract by the account number and contract id */
  getContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Contract Id */
        contractId: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Update contract */
  updateContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Contract Id */
        contractId: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractUpdate"];
      };
    };
  };
  /** Rollover contract */
  swapContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Contract Id */
        contractId: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractSwap"];
      };
    };
  };
  /** Update the status of a contract */
  updateContractStatus: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Contract Id */
        contractId: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractStatusUpdate"];
      };
    };
  };
  /** Update usage credit of a contract */
  updateContractUsageCredit: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Contract Id */
        contractId: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CreditResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractCreditUpdate"];
      };
    };
  };
  closeContract: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Contract Id */
        contractId: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExtendedContractResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContractClose"];
      };
    };
  };
  /** Update the status of an ad hoc contract */
  updateAdHocContractStatus: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CreditResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdHocContractStatusUpdate"];
      };
    };
  };
  /** Update an ad hoc contract credit */
  updateAdHocContractCredit: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CreditResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdHocContractUpdate"];
      };
    };
  };
  /** Get utility tariff by id */
  getUtilityTariff: {
    parameters: {
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["UtilityTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get last energy planning result */
  getLastEnergyPlanningResult: {
    parameters: {
      path: {
        /** Site ID */
        siteId: number;
      };
      query: {
        /** From date */
        from: string;
        /** To date */
        to: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["EnergyPlanningResultResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of reservation by its id */
  getReservation: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ReservationResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of EV transaction by its id */
  getEvTransaction: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["EvTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get EV transaction cost */
  getEvTransactionCost: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["EvTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get customer reservation tariff by id */
  getCustomerReservationTariff: {
    parameters: {
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CustomerReservationTariffResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get a customer plan tariffs by plan code and charger group id */
  getBillingPlanGroupTariffsByCodeCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
        /** Charger group id */
        chargerGroupId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanTariffsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get a customer plan tariffs by plan code that related to all chargers */
  getBillingPlanTariffsForAllGroupsByCodeCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanTariffsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get a plan products by plan code, country(ISO3)-currency and locale */
  getBillingPlanProductsByCountryCurrency: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        /** Country Currency */
        countryCurrency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["PlanProductsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of country currency by its id */
  getCountryCurrency: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CountryCurrencyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of a contact person by id */
  getContactPerson: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ContactPersonResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get external card authorization providers by service provider */
  getExternalCardAuthorizationProvider: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ExternalCardAuthorizationProviderResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get company by id */
  getCompany: {
    parameters: {
      path: {
        /** id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CompanyResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of charger status by its id */
  getChargerStatus: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ChargerStatusResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get charger-groups by a given charger id */
  getGroupsByChargerId: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupDetailsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Find by account number */
  getChargerHostAccount: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostAccountWalletResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Find by account number */
  getChargerHostPlanManagement: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostPlanManagementResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get invoice as pdf */
  getInvoicePdf: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
        /** Id */
        id: number;
      };
      header: {
        "Accept-Language"?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/pdf": string;
          "application/json": string;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Find by account number */
  getChargerHostAccount_1: {
    parameters: {
      path: {
        /** AccountNumber */
        accountNumber: number;
        /** Currency */
        currency: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerHostAccountWalletResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get charger ids by a given charger-group id */
  getChargerGroupChargersById: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupChargersResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of charger's root group */
  getChargerRootGroup: {
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["ChargerGroupResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of card by its id */
  getCard: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["CardResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get card ids from existing batch import */
  getCardIdsFromBatch: {
    parameters: {
      path: {
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BatchCardsResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get invoice as pdf */
  getInvoicePdf_1: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Id */
        id: number;
      };
      header: {
        "Accept-Language"?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/pdf": string;
          "application/json": string;
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Validate that a customer's account is in good standing for charging */
  validateAccountBeforeCharging: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get details of a billing transaction by account number and id */
  getTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Get line items details of transaction by its id */
  getLineItemForTransaction: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Id */
        id: number;
      };
      query: {
        pageSize?: string;
        pageNumber?: string;
        sortBy?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BillingTransactionResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Delete customer plan tariffs by plan code and connector type for for a given charger group */
  deletePlanGroupTariffsByCodeAndConnectorType: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        connectorType: string;
        /** groupId */
        chargerGroupId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Delete customer plan tariffs by plan code and connector type for all chargers group */
  deletePlanGroupTariffsByCodeAndConnectorType_1: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        connectorType: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Delete customer plan tariffs by plan code and charger speed for for a given charger group */
  deletePlanGroupTariffsByCodeAndSpeed: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        chargerSpeed: string;
        /** groupId */
        chargerGroupId: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Delete customer plan tariffs by plan code and charger speed for all chargers group */
  deletePlanGroupTariffsByCodeAndSpeed_1: {
    parameters: {
      path: {
        /** Plan Code */
        planCode: string;
        chargerSpeed: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Deletes a member by its account number */
  deleteMemberByAccountNumber: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
  /** Delete card payment method */
  deleteCreditCard: {
    parameters: {
      path: {
        /** Account Number */
        accountNumber: number;
        /** Id */
        id: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "*/*": components["schemas"]["BaseResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["BaseResponse"];
        };
      };
    };
  };
}

export interface external {}
